{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState } from \"react\";\nimport { BELOW_INNER_LEFT_ANCHOR, containsElement } from \"@react-md/utils\";\nimport { useMenu } from \"./useMenu\";\nimport { noop } from \"./utils\";\n/**\n * This hook controls the visibility and positioning for a context menu.\n *\n * @example\n * Simple Example\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import [ Menu, MenuItem, useContextMenu ] from \"@react-md/menu\":\n *\n * function Example(): ReactElement {\n *   const { menuProps, onContextMenu } = useContextMenu();\n *\n *   return (\n *     <div onContextMenu={onContextMenu}>\n *       <textarea />\n *       <Menu {...menuProps}>\n *         <MenuItem>Cut</MenuItem>\n *         <MenuItem>Copy</MenuItem>\n *         <MenuItem>Paste</MenuItem>\n *         <MenuItem>Undo</MenuItem>\n *       </Menu>\n *     </div>\n *   );\n * }\n * ```\n *\n *\n * @remarks \\@since 5.0.0\n * @param options - The {@link ContextMenuHookOptions}\n * @returns the {@link ContextMenuHookReturnValue}\n */\nexport function useContextMenu(_a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n  var _b = _a.anchor,\n    anchor = _b === void 0 ? BELOW_INNER_LEFT_ANCHOR : _b,\n    _c = _a.baseId,\n    baseId = _c === void 0 ? \"context-menu\" : _c,\n    _d = _a.menuLabel,\n    menuLabel = _d === void 0 ? \"Context Menu\" : _d,\n    fixedPositionOptions = _a.fixedPositionOptions,\n    _e = _a.onContextMenu,\n    onContextMenu = _e === void 0 ? noop : _e,\n    _f = _a.preventScroll,\n    preventScroll = _f === void 0 ? true : _f,\n    options = __rest(_a, [\"anchor\", \"baseId\", \"menuLabel\", \"fixedPositionOptions\", \"onContextMenu\", \"preventScroll\"]);\n  var _g = __read(useState(false), 2),\n    visible = _g[0],\n    setVisible = _g[1];\n  var _h = __read(useState({}), 2),\n    coords = _h[0],\n    setCoords = _h[1];\n  var _j = useMenu(__assign(__assign({}, options), {\n      anchor: anchor,\n      baseId: baseId,\n      menuLabel: menuLabel,\n      visible: visible,\n      setVisible: setVisible,\n      fixedPositionOptions: __assign(__assign({}, fixedPositionOptions), coords),\n      preventScroll: preventScroll\n    })),\n    menuRef = _j.menuRef,\n    menuProps = _j.menuProps,\n    menuNodeRef = _j.menuNodeRef;\n  return {\n    menuRef: menuRef,\n    menuProps: menuProps,\n    menuNodeRef: menuNodeRef,\n    visible: visible,\n    setVisible: setVisible,\n    setCoords: setCoords,\n    onContextMenu: function (event) {\n      onContextMenu(event);\n      if (event.isPropagationStopped() ||\n      // make it so that if you right click the custom context menu, the\n      // browser's default context menu can appear (mostly for being able to\n      // inspect your custom context menu)\n      /* istanbul ignore next */\n      event.target instanceof HTMLElement && containsElement(menuNodeRef.current, event.target)) {\n        return;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n      setCoords({\n        initialX: event.clientX,\n        initialY: event.clientY\n      });\n      setVisible(true);\n    }\n  };\n}","map":{"version":3,"names":["useState","BELOW_INNER_LEFT_ANCHOR","containsElement","useMenu","noop","useContextMenu","_a","_b","anchor","_c","baseId","_d","menuLabel","fixedPositionOptions","_e","onContextMenu","_f","preventScroll","options","__rest","_g","__read","visible","setVisible","_h","coords","setCoords","_j","__assign","menuRef","menuProps","menuNodeRef","event","isPropagationStopped","target","HTMLElement","current","preventDefault","stopPropagation","initialX","clientX","initialY","clientY"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\menu\\src\\useContextMenu.ts"],"sourcesContent":["import type { Dispatch, MouseEvent, SetStateAction } from \"react\";\nimport { useState } from \"react\";\nimport type { InitialCoords } from \"@react-md/utils\";\nimport { BELOW_INNER_LEFT_ANCHOR, containsElement } from \"@react-md/utils\";\n\nimport type { BaseMenuHookOptions, BaseMenuHookReturnValue } from \"./types\";\nimport { useMenu } from \"./useMenu\";\nimport { noop } from \"./utils\";\n\n/** @remarks \\@since 5.0.0 */\nexport interface ContextMenuHookOptions\n  extends Omit<BaseMenuHookOptions, \"baseId\" | \"visible\" | \"setVisible\"> {\n  /**\n   * Since there can generally only be one context menu visible at a time, this\n   * will be defaulted to `\"context-menu\"` instead of requiring an id like the\n   * {@link useMenu} hook. If the default `id` does not work for your use case,\n   * it can still be overridden.\n   *\n   * @defaultValue `\"context-menu\"`\n   * @see {@link BaseMenuHookOptions.baseId}\n   */\n  baseId?: string;\n\n  /**\n   * The label _should_ be required for a context menu since there is no valid\n   * \"toggle\" component here to inherit a label from. However, this will be\n   * defaulted to `\"Context Menu\"` for convenience.\n   *\n   * @defaultValue `\"Context Menu\"`\n   * @see {@link BaseMenuHookOptions.menuLabel}\n   */\n  menuLabel?: string;\n\n  /**\n   * An optional custom contextmenu event handler that will be merged with the\n   * menu visibility behavior. If this function calls `event.stopPropagation()`,\n   * the default context menu behavior will not occur.\n   */\n  onContextMenu?<E extends HTMLElement>(event: MouseEvent<E>): void;\n\n  /**\n   * Unlike other menus, context menus will default to no longer allowing the\n   * page to be scrolled while visible.\n   *\n   * @see {@link BaseMenuHookOptions.preventScroll}\n   * @defaultValue `true`.\n   */\n  preventScroll?: boolean;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface ContextMenuHookReturnValue extends BaseMenuHookReturnValue {\n  /**\n   * An event handler that should passed to an element that causes a `Menu` to\n   * appear instead of the default browser context menu.\n   */\n  onContextMenu<E extends HTMLElement>(event: MouseEvent<E>): void;\n\n  /**\n   * Boolean if the context menu is currently visible,\n   */\n  visible: boolean;\n\n  /**\n   * A function that can be used to manually set the visibility of the context\n   * menu when the default behavior does not match your use case.\n   */\n  setVisible: Dispatch<SetStateAction<boolean>>;\n\n  /**\n   * This function can be used to manually move the context menu to new\n   * coordinates if the default behavior did not work. You probably won't ever\n   * need to use this.\n   */\n  setCoords: Dispatch<SetStateAction<InitialCoords>>;\n}\n\n/**\n * This hook controls the visibility and positioning for a context menu.\n *\n * @example\n * Simple Example\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import [ Menu, MenuItem, useContextMenu ] from \"@react-md/menu\":\n *\n * function Example(): ReactElement {\n *   const { menuProps, onContextMenu } = useContextMenu();\n *\n *   return (\n *     <div onContextMenu={onContextMenu}>\n *       <textarea />\n *       <Menu {...menuProps}>\n *         <MenuItem>Cut</MenuItem>\n *         <MenuItem>Copy</MenuItem>\n *         <MenuItem>Paste</MenuItem>\n *         <MenuItem>Undo</MenuItem>\n *       </Menu>\n *     </div>\n *   );\n * }\n * ```\n *\n *\n * @remarks \\@since 5.0.0\n * @param options - The {@link ContextMenuHookOptions}\n * @returns the {@link ContextMenuHookReturnValue}\n */\nexport function useContextMenu({\n  anchor = BELOW_INNER_LEFT_ANCHOR,\n  baseId = \"context-menu\",\n  menuLabel = \"Context Menu\",\n  fixedPositionOptions,\n  onContextMenu = noop,\n  preventScroll = true,\n  ...options\n}: ContextMenuHookOptions = {}): ContextMenuHookReturnValue {\n  const [visible, setVisible] = useState(false);\n  const [coords, setCoords] = useState<InitialCoords>({});\n  const { menuRef, menuProps, menuNodeRef } = useMenu<HTMLElement>({\n    ...options,\n    anchor,\n    baseId,\n    menuLabel,\n    visible,\n    setVisible,\n    fixedPositionOptions: {\n      ...fixedPositionOptions,\n      ...coords,\n    },\n    preventScroll,\n  });\n\n  return {\n    menuRef,\n    menuProps,\n    menuNodeRef,\n    visible,\n    setVisible,\n    setCoords,\n    onContextMenu(event) {\n      onContextMenu(event);\n      if (\n        event.isPropagationStopped() ||\n        // make it so that if you right click the custom context menu, the\n        // browser's default context menu can appear (mostly for being able to\n        // inspect your custom context menu)\n        /* istanbul ignore next */\n        (event.target instanceof HTMLElement &&\n          containsElement(menuNodeRef.current, event.target))\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      setCoords({\n        initialX: event.clientX,\n        initialY: event.clientY,\n      });\n      setVisible(true);\n    },\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,SAASC,uBAAuB,EAAEC,eAAe,QAAQ,iBAAiB;AAG1E,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,IAAI,QAAQ,SAAS;AAsE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAM,SAAUC,cAAcA,CAACC,EAQD;EARC,IAAAA,EAAA;IAAAA,EAAA,KAQD;EAAA;EAP5B,IAAAC,EAAA,GAAAD,EAAA,CAAAE,MAAgC;IAAhCA,MAAM,GAAAD,EAAA,cAAGN,uBAAuB,GAAAM,EAAA;IAChCE,EAAA,GAAAH,EAAA,CAAAI,MAAuB;IAAvBA,MAAM,GAAAD,EAAA,cAAG,cAAc,GAAAA,EAAA;IACvBE,EAAA,GAAAL,EAAA,CAAAM,SAA0B;IAA1BA,SAAS,GAAAD,EAAA,cAAG,cAAc,GAAAA,EAAA;IAC1BE,oBAAoB,GAAAP,EAAA,CAAAO,oBAAA;IACpBC,EAAA,GAAAR,EAAA,CAAAS,aAAoB;IAApBA,aAAa,GAAAD,EAAA,cAAGV,IAAI,GAAAU,EAAA;IACpBE,EAAA,GAAAV,EAAA,CAAAW,aAAoB;IAApBA,aAAa,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACjBE,OAAO,GAAAC,MAAA,CAAAb,EAAA,EAPmB,2FAQ9B,CADW;EAEJ,IAAAc,EAAA,GAAAC,MAAA,CAAwBrB,QAAQ,CAAC,KAAK,CAAC;IAAtCsB,OAAO,GAAAF,EAAA;IAAEG,UAAU,GAAAH,EAAA,GAAmB;EACvC,IAAAI,EAAA,GAAAH,MAAA,CAAsBrB,QAAQ,CAAgB,EAAE,CAAC;IAAhDyB,MAAM,GAAAD,EAAA;IAAEE,SAAS,GAAAF,EAAA,GAA+B;EACjD,IAAAG,EAAA,GAAsCxB,OAAO,CAAAyB,QAAA,CAAAA,QAAA,KAC9CV,OAAO;MACVV,MAAM,EAAAA,MAAA;MACNE,MAAM,EAAAA,MAAA;MACNE,SAAS,EAAAA,SAAA;MACTU,OAAO,EAAAA,OAAA;MACPC,UAAU,EAAAA,UAAA;MACVV,oBAAoB,EAAAe,QAAA,CAAAA,QAAA,KACff,oBAAoB,GACpBY,MAAM;MAEXR,aAAa,EAAAA;IAAA,GACb;IAZMY,OAAO,GAAAF,EAAA,CAAAE,OAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,WAAW,GAAAJ,EAAA,CAAAI,WAYrC;EAEF,OAAO;IACLF,OAAO,EAAAA,OAAA;IACPC,SAAS,EAAAA,SAAA;IACTC,WAAW,EAAAA,WAAA;IACXT,OAAO,EAAAA,OAAA;IACPC,UAAU,EAAAA,UAAA;IACVG,SAAS,EAAAA,SAAA;IACTX,aAAa,WAAAA,CAACiB,KAAK;MACjBjB,aAAa,CAACiB,KAAK,CAAC;MACpB,IACEA,KAAK,CAACC,oBAAoB,EAAE;MAC5B;MACA;MACA;MACA;MACCD,KAAK,CAACE,MAAM,YAAYC,WAAW,IAClCjC,eAAe,CAAC6B,WAAW,CAACK,OAAO,EAAEJ,KAAK,CAACE,MAAM,CAAE,EACrD;QACA;;MAGFF,KAAK,CAACK,cAAc,EAAE;MACtBL,KAAK,CAACM,eAAe,EAAE;MACvBZ,SAAS,CAAC;QACRa,QAAQ,EAAEP,KAAK,CAACQ,OAAO;QACvBC,QAAQ,EAAET,KAAK,CAACU;OACjB,CAAC;MACFnB,UAAU,CAAC,IAAI,CAAC;IAClB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}