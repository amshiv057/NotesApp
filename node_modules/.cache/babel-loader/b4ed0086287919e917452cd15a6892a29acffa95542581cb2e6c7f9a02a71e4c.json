{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-chip\");\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\nexport var Chip = forwardRef(function Chip(_a, ref) {\n  var _b;\n  var ariaPressed = _a[\"aria-pressed\"],\n    propClassName = _a.className,\n    children = _a.children,\n    _c = _a.theme,\n    theme = _c === void 0 ? \"solid\" : _c,\n    propLeftIcon = _a.leftIcon,\n    rightIcon = _a.rightIcon,\n    _d = _a.raisable,\n    raisable = _d === void 0 ? false : _d,\n    _e = _a.disabled,\n    disabled = _e === void 0 ? false : _e,\n    selected = _a.selected,\n    _f = _a.selectedThemed,\n    selectedThemed = _f === void 0 ? false : _f,\n    contentStyle = _a.contentStyle,\n    contentClassName = _a.contentClassName,\n    _g = _a.disableContentWrap,\n    disableContentWrap = _g === void 0 ? false : _g,\n    propSelectedIcon = _a.selectedIcon,\n    _h = _a.noninteractable,\n    noninteractable = _h === void 0 ? false : _h,\n    _j = _a.disableIconTransition,\n    disableIconTransition = _j === void 0 ? false : _j,\n    props = __rest(_a, [\"aria-pressed\", \"className\", \"children\", \"theme\", \"leftIcon\", \"rightIcon\", \"raisable\", \"disabled\", \"selected\", \"selectedThemed\", \"contentStyle\", \"contentClassName\", \"disableContentWrap\", \"selectedIcon\", \"noninteractable\", \"disableIconTransition\"]);\n  var _k = useInteractionStates({\n      handlers: props,\n      className: propClassName,\n      disabled: disabled || noninteractable,\n      enablePressedAndRipple: raisable && !noninteractable\n    }),\n    ripples = _k.ripples,\n    className = _k.className,\n    handlers = _k.handlers;\n  var content = children;\n  if (!disableContentWrap) {\n    content = _jsx(\"span\", __assign({\n      style: contentStyle,\n      className: cn(block(\"content\"), contentClassName)\n    }, {\n      children: children\n    }));\n  }\n  var leftIcon = propLeftIcon;\n  var selectable = typeof selected === \"boolean\";\n  var selectedIcon = useIcon(\"selected\", propSelectedIcon);\n  var isHiddenIcon = false;\n  if (selectable && !selectedThemed && typeof leftIcon === \"undefined\" && selectedIcon) {\n    leftIcon = selectedIcon;\n    if (!disableIconTransition && isValidElement(selectedIcon)) {\n      isHiddenIcon = !selected;\n      leftIcon = cloneElement(selectedIcon, {\n        className: block(\"selected-icon\", {\n          visible: selected\n        })\n      });\n    } else if (disableIconTransition && !selected) {\n      // don't want to render it when not selected if there's no transition\n      leftIcon = null;\n    }\n  }\n  var leading = leftIcon && !isHiddenIcon;\n  var trailing = rightIcon;\n  var Component = noninteractable ? \"span\" : \"button\";\n  var buttonProps = {\n    \"aria-pressed\": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : !!selected || undefined,\n    type: \"button\",\n    disabled: disabled\n  };\n  return _jsxs(Component, __assign({}, noninteractable ? {} : buttonProps, props, handlers, {\n    ref: ref,\n    className: cn(block((_b = {}, _b[theme] = true, _b.disabled = disabled, _b.selected = !disabled && selected && !selectedThemed, _b.themed = !disabled && selected && selectedThemed, _b[\"solid-disabled\"] = disabled && theme === \"solid\", _b[\"leading-icon\"] = leading && !trailing, _b[\"trailing-icon\"] = trailing && !leading, _b.surrounded = leading && trailing, _b.noninteractable = noninteractable, _b)), className)\n  }, {\n    children: [_jsx(TextIconSpacing, __assign({\n      icon: leftIcon,\n      beforeClassName: isHiddenIcon ? \"\" : undefined\n    }, {\n      children: _jsx(TextIconSpacing, __assign({\n        icon: rightIcon,\n        iconAfter: true\n      }, {\n        children: content\n      }))\n    })), ripples]\n  }));\n});","map":{"version":3,"names":["cloneElement","forwardRef","isValidElement","cn","TextIconSpacing","useIcon","useInteractionStates","bem","block","Chip","_a","ref","ariaPressed","propClassName","className","children","_c","theme","propLeftIcon","leftIcon","rightIcon","_d","raisable","_e","disabled","selected","_f","selectedThemed","contentStyle","contentClassName","_g","disableContentWrap","propSelectedIcon","selectedIcon","_h","noninteractable","_j","disableIconTransition","props","__rest","_k","handlers","enablePressedAndRipple","ripples","content","_jsx","__assign","style","selectable","isHiddenIcon","visible","leading","trailing","Component","buttonProps","undefined","type","_jsxs","_b","themed","surrounded","icon","beforeClassName","iconAfter"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\chip\\src\\Chip.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, CSSProperties, ReactNode } from \"react\";\nimport { cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\n\ntype ButtonAttributes = Omit<ButtonHTMLAttributes<HTMLButtonElement>, \"type\">;\n\nexport interface ChipProps extends ButtonAttributes {\n  /**\n   * The theme for the button.\n   */\n  theme?: \"outline\" | \"solid\";\n\n  /**\n   * An optional icon to place to the left of the children. There will\n   * automatically be some margin placed between this icon and the children if\n   * defined.\n   */\n  leftIcon?: ReactNode;\n\n  /**\n   * An optional icon to place to the right of the children. There will\n   * automatically be some margin placed between this icon and the children if\n   * defined.\n   */\n  rightIcon?: ReactNode;\n\n  /**\n   * Boolean if the chip should gain elevation while the user is pressing the\n   * chip with mouse, touch, or keyboard click.\n   */\n  raisable?: boolean;\n\n  /**\n   * An optional style to provide to the `<span>` that surrounds the `children`\n   * of the chip.\n   *\n   * This prop will do nothing if the `disableContentWrap` prop is enabled.\n   */\n  contentStyle?: CSSProperties;\n\n  /**\n   * An optional className to provide to the `<span>` that surrounds the\n   * `children` of the chip.\n   *\n   * This prop will do nothing if the `disableContentWrap` prop is enabled.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the children should no longer be wrapped in a `<span>` that adds\n   * some default styles to ellipsis and truncate the children based on the\n   * chip's width.\n   */\n  disableContentWrap?: boolean;\n\n  /**\n   * Boolean if the chip is selected or deselected which is `undefined` by\n   * default. Setting this prop to a boolean updates the chip to render a\n   * selected icon to the left of the content as well as adding a darker\n   * background when set to `true`. The icon will only appear once the state is\n   * `true` and will transition in and out when swapped between `true` and\n   * `false`.\n   *\n   * @remarks\n   *\n   * See the `disableIconTransition` and `selectedIcon` props for more details\n   * about the icon behavior\n   */\n  selected?: boolean;\n\n  /**\n   * Boolean if the selection state should use a swatch of the primary color\n   * instead of rendering a check icon and the normal background color changes.\n   */\n  selectedThemed?: boolean;\n\n  /**\n   * The icon to use as the `leftIcon` when the `selected` prop is a boolean.\n   * When this is omitted, it will inherit the `selected` icon from the main\n   * `Configuration` / `IconProvider`.\n   *\n   * If this is set to `null`, no icon will be rendered when the `selected` is set\n   * to `\"selected\"` or `\"unselected\"`.\n   *\n   * If the `leftIcon` prop is not `undefined`, the `leftIcon` prop will always\n   * be used instead of this prop.\n   */\n  selectedIcon?: ReactNode;\n\n  /**\n   * Boolean if the selected icon should not animate when the `selected` is a\n   * boolean. This transition is just a simple \"appear\" transition with the\n   * `max-width` of the icon.\n   */\n  disableIconTransition?: boolean;\n\n  /**\n   * Boolean if the chip should render as a non-interactable element (`<span>`)\n   * instead of a button. This can be used to just apply the chip styles.\n   *\n   * @remarks \\@since 2.6.0\n   */\n  noninteractable?: boolean;\n}\n\nconst block = bem(\"rmd-chip\");\n\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\nexport const Chip = forwardRef<HTMLButtonElement, ChipProps>(function Chip(\n  {\n    \"aria-pressed\": ariaPressed,\n    className: propClassName,\n    children,\n    theme = \"solid\",\n    leftIcon: propLeftIcon,\n    rightIcon,\n    raisable = false,\n    disabled = false,\n    selected,\n    selectedThemed = false,\n    contentStyle,\n    contentClassName,\n    disableContentWrap = false,\n    selectedIcon: propSelectedIcon,\n    noninteractable = false,\n    disableIconTransition = false,\n    ...props\n  },\n  ref\n) {\n  const { ripples, className, handlers } = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled: disabled || noninteractable,\n    enablePressedAndRipple: raisable && !noninteractable,\n  });\n\n  let content = children;\n  if (!disableContentWrap) {\n    content = (\n      <span\n        style={contentStyle}\n        className={cn(block(\"content\"), contentClassName)}\n      >\n        {children}\n      </span>\n    );\n  }\n\n  let leftIcon = propLeftIcon;\n  const selectable = typeof selected === \"boolean\";\n  const selectedIcon = useIcon(\"selected\", propSelectedIcon);\n  let isHiddenIcon = false;\n  if (\n    selectable &&\n    !selectedThemed &&\n    typeof leftIcon === \"undefined\" &&\n    selectedIcon\n  ) {\n    leftIcon = selectedIcon;\n\n    if (!disableIconTransition && isValidElement(selectedIcon)) {\n      isHiddenIcon = !selected;\n      leftIcon = cloneElement(selectedIcon, {\n        className: block(\"selected-icon\", { visible: selected }),\n      });\n    } else if (disableIconTransition && !selected) {\n      // don't want to render it when not selected if there's no transition\n      leftIcon = null;\n    }\n  }\n\n  const leading = leftIcon && !isHiddenIcon;\n  const trailing = rightIcon;\n  const Component = noninteractable ? \"span\" : \"button\";\n  const buttonProps = {\n    \"aria-pressed\": ariaPressed ?? (!!selected || undefined),\n    type: \"button\",\n    disabled,\n  } as const;\n\n  return (\n    <Component\n      {...(noninteractable ? {} : buttonProps)}\n      {...props}\n      {...handlers}\n      ref={ref}\n      className={cn(\n        block({\n          [theme]: true,\n          disabled,\n          selected: !disabled && selected && !selectedThemed,\n          themed: !disabled && selected && selectedThemed,\n          \"solid-disabled\": disabled && theme === \"solid\",\n          \"leading-icon\": leading && !trailing,\n          \"trailing-icon\": trailing && !leading,\n          surrounded: leading && trailing,\n          noninteractable,\n        }),\n        className\n      )}\n    >\n      <TextIconSpacing\n        icon={leftIcon}\n        beforeClassName={isHiddenIcon ? \"\" : undefined}\n      >\n        <TextIconSpacing icon={rightIcon} iconAfter>\n          {content}\n        </TextIconSpacing>\n      </TextIconSpacing>\n      {ripples}\n    </Component>\n  );\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}