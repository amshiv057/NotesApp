{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n/**\n * @internal\n */\nvar noop = function () {\n  // do nothing\n};\n/**\n * This is a completely internal hook that helps control the visibility of the\n * discrete value tooltip's visibility for the `Slider` and `RangeSlider`.\n *\n * Note: This isn't 100% there since the tooltip doesn't animate in when the\n * user holds the mouse down in the same spot for the `animationDuration`.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport function useDiscreteValueVisibility(_a) {\n  var active = _a.active,\n    animate = _a.animate,\n    animationDuration = _a.animationDuration,\n    discrete = _a.discrete,\n    disabled = _a.disabled,\n    _b = _a.onBlur,\n    propOnBlur = _b === void 0 ? noop : _b,\n    _c = _a.onFocus,\n    propOnFocus = _c === void 0 ? noop : _c;\n  var ref = useRef(null);\n  var isKeyboard = useIsUserInteractionMode(\"keyboard\");\n  // when the user interaction mode changes from keyboard -> mouse by clicking\n  // on the track, need to make sure that the thumb value has the animation\n  // state enabled so it moves at the same speed as the thumb instead of jumping\n  // immediately\n  var _d = __read(useState(false), 2),\n    isModeTransition = _d[0],\n    setModeTransition = _d[1];\n  var _e = __read(useState(false), 2),\n    visible = _e[0],\n    setVisible = _e[1];\n  useEffect(function () {\n    if (!discrete) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    }\n    if (discrete && visible && disabled) {\n      setVisible(false);\n      return;\n    }\n    if (!isKeyboard) {\n      // only considered a \"transition\" when the tooltip is already visible and\n      // switching away from keyboard mode\n      setModeTransition(visible);\n      return;\n    }\n    // when swapping from mouse/touch -> keyboard, the tooltip's visibility will\n    // need to be enabled since default drag behavior is to hide on drag end.\n    // The drag process automatically focuses the current \"target\" thumb to help\n    // the user switch between the modes more easily so if the active element is\n    // the current thumb, we're good to go\n    setModeTransition(false);\n    setVisible(!disabled && document.activeElement === ref.current);\n  }, [isKeyboard, visible, discrete, disabled]);\n  useEffect(function () {\n    if (!discrete) {\n      return;\n    }\n    if (!active) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    }\n    // need to delay the visibility for the same `animationDuration` as the\n    // thumb's active state so that the tooltip appears at the same time the\n    // thumb stops animating with click drag events\n    var timeout = window.setTimeout(function () {\n      setVisible(true);\n      setModeTransition(false);\n    }, animationDuration);\n    return function () {\n      window.clearTimeout(timeout);\n    };\n  }, [active, animationDuration, discrete]);\n  var onBlur = useCallback(function (event) {\n    propOnBlur(event);\n    var track = event.currentTarget.parentElement;\n    // need to hide on blur because it _usually_ means the user clicked\n    // somewhere else on the page after using the keyboard. However, it is\n    // possible the user used the keyboard to update the value and then\n    // clicked on the track to update more quickly, so verify that the next\n    // focus element isn't the track or any children of the track.\n    if (!track || document.activeElement || !track.contains(document.activeElement)) {\n      ref.current = null;\n      setVisible(false);\n    }\n  }, [propOnBlur]);\n  var onFocus = useCallback(function (event) {\n    ref.current = event.currentTarget;\n    propOnFocus(event);\n    if (discrete && isKeyboard) {\n      setVisible(true);\n    }\n  }, [discrete, propOnFocus, isKeyboard]);\n  return {\n    onBlur: onBlur,\n    onFocus: onFocus,\n    animateValue: isModeTransition || animate && isKeyboard,\n    visible: visible\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useIsUserInteractionMode","noop","useDiscreteValueVisibility","_a","active","animate","animationDuration","discrete","disabled","_b","onBlur","propOnBlur","_c","onFocus","propOnFocus","ref","isKeyboard","_d","__read","isModeTransition","setModeTransition","_e","visible","setVisible","document","activeElement","current","timeout","window","setTimeout","clearTimeout","event","track","currentTarget","parentElement","contains","animateValue"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\slider\\useDiscreteValueVisibility.ts"],"sourcesContent":["import type { FocusEvent, FocusEventHandler } from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n\n/**\n * @internal\n */\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\ninterface Options {\n  active: boolean;\n  animate: boolean;\n  animationDuration: number;\n  discrete: boolean;\n  disabled: boolean;\n  onBlur?: FocusEventHandler<HTMLSpanElement>;\n  onFocus?: FocusEventHandler<HTMLSpanElement>;\n}\n\n/**\n * @internal\n * @remarks \\@since 2.5.0\n */\ninterface ReturnedProps {\n  /**\n   * Boolean if the value should animate the `left`, `right`, `top`, and\n   * `bottom` values to match the speed of the thumb.\n   */\n  animateValue: boolean;\n  visible: boolean;\n  onBlur: FocusEventHandler<HTMLSpanElement>;\n  onFocus: FocusEventHandler<HTMLSpanElement>;\n}\n\n/**\n * This is a completely internal hook that helps control the visibility of the\n * discrete value tooltip's visibility for the `Slider` and `RangeSlider`.\n *\n * Note: This isn't 100% there since the tooltip doesn't animate in when the\n * user holds the mouse down in the same spot for the `animationDuration`.\n *\n * @internal\n * @remarks \\@since 2.5.0\n */\nexport function useDiscreteValueVisibility({\n  active,\n  animate,\n  animationDuration,\n  discrete,\n  disabled,\n  onBlur: propOnBlur = noop,\n  onFocus: propOnFocus = noop,\n}: Options): ReturnedProps {\n  const ref = useRef<HTMLSpanElement | null>(null);\n  const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n\n  // when the user interaction mode changes from keyboard -> mouse by clicking\n  // on the track, need to make sure that the thumb value has the animation\n  // state enabled so it moves at the same speed as the thumb instead of jumping\n  // immediately\n  const [isModeTransition, setModeTransition] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (!discrete) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    }\n\n    if (discrete && visible && disabled) {\n      setVisible(false);\n      return;\n    }\n\n    if (!isKeyboard) {\n      // only considered a \"transition\" when the tooltip is already visible and\n      // switching away from keyboard mode\n      setModeTransition(visible);\n      return;\n    }\n\n    // when swapping from mouse/touch -> keyboard, the tooltip's visibility will\n    // need to be enabled since default drag behavior is to hide on drag end.\n    // The drag process automatically focuses the current \"target\" thumb to help\n    // the user switch between the modes more easily so if the active element is\n    // the current thumb, we're good to go\n    setModeTransition(false);\n    setVisible(!disabled && document.activeElement === ref.current);\n  }, [isKeyboard, visible, discrete, disabled]);\n\n  useEffect(() => {\n    if (!discrete) {\n      return;\n    }\n\n    if (!active) {\n      setVisible(false);\n      setModeTransition(false);\n      return;\n    }\n\n    // need to delay the visibility for the same `animationDuration` as the\n    // thumb's active state so that the tooltip appears at the same time the\n    // thumb stops animating with click drag events\n    const timeout = window.setTimeout(() => {\n      setVisible(true);\n      setModeTransition(false);\n    }, animationDuration);\n\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [active, animationDuration, discrete]);\n\n  const onBlur = useCallback(\n    (event: FocusEvent<HTMLSpanElement>) => {\n      propOnBlur(event);\n\n      const track = event.currentTarget.parentElement;\n      // need to hide on blur because it _usually_ means the user clicked\n      // somewhere else on the page after using the keyboard. However, it is\n      // possible the user used the keyboard to update the value and then\n      // clicked on the track to update more quickly, so verify that the next\n      // focus element isn't the track or any children of the track.\n      if (\n        !track ||\n        document.activeElement ||\n        !track.contains(document.activeElement)\n      ) {\n        ref.current = null;\n        setVisible(false);\n      }\n    },\n    [propOnBlur]\n  );\n\n  const onFocus = useCallback(\n    (event: FocusEvent<HTMLSpanElement>) => {\n      ref.current = event.currentTarget;\n      propOnFocus(event);\n      if (discrete && isKeyboard) {\n        setVisible(true);\n      }\n    },\n    [discrete, propOnFocus, isKeyboard]\n  );\n\n  return {\n    onBlur,\n    onFocus,\n    animateValue: isModeTransition || (animate && isKeyboard),\n    visible,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}