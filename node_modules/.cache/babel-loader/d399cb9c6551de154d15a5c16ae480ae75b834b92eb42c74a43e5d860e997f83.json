{"ast":null,"code":"/**\n * Gets the current percentage based on the min, max, and current value.\n *\n * @returns the percentage that the `value` is between the `min` and `max`\n * values.\n * @internal\n * @remarks \\@since 4.0.1 uses an object for options instead of multiple\n * arguments.\n */\nexport function getPercentage(_a) {\n  var min = _a.min,\n    max = _a.max,\n    value = _a.value,\n    _b = _a.validate,\n    validate = _b === void 0 ? true : _b;\n  if (validate) {\n    if (min >= max) {\n      throw new RangeError(\"A range must have the min value less than the max value\");\n    }\n    if (value > max || value < min) {\n      throw new RangeError(\"A value must be between the min and max values\");\n    }\n  }\n  var range = max - min;\n  var start = value - min;\n  var percentage = start / range;\n  return Math.max(0, Math.min(Math.abs(percentage), 1));\n}","map":{"version":3,"names":["getPercentage","_a","min","max","value","_b","validate","RangeError","range","start","percentage","Math","abs"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\getPercentage.ts"],"sourcesContent":["/** @remarks \\@since 4.0.1 */\nexport interface GetPercentageOptions {\n  /**\n   * The min value allowed.\n   */\n  min: number;\n\n  /**\n   * The max value allowed.\n   */\n  max: number;\n\n  /**\n   * The current value\n   */\n  value: number;\n\n  /**\n   * Boolean if the min, max, and value options should be validated to make sure\n   * they are within the correct range relative to each other.\n   *\n   * @defaultValue `true`\n   */\n  validate?: boolean;\n}\n\n/**\n * Gets the current percentage based on the min, max, and current value.\n *\n * @returns the percentage that the `value` is between the `min` and `max`\n * values.\n * @internal\n * @remarks \\@since 4.0.1 uses an object for options instead of multiple\n * arguments.\n */\nexport function getPercentage({\n  min,\n  max,\n  value,\n  validate = true,\n}: GetPercentageOptions): number {\n  if (validate) {\n    if (min >= max) {\n      throw new RangeError(\n        \"A range must have the min value less than the max value\"\n      );\n    }\n\n    if (value > max || value < min) {\n      throw new RangeError(\"A value must be between the min and max values\");\n    }\n  }\n\n  const range = max - min;\n  const start = value - min;\n  const percentage = start / range;\n  return Math.max(0, Math.min(Math.abs(percentage), 1));\n}\n"],"mappings":"AA0BA;;;;;;;;;AASA,OAAM,SAAUA,aAAaA,CAACC,EAKP;MAJrBC,GAAG,GAAAD,EAAA,CAAAC,GAAA;IACHC,GAAG,GAAAF,EAAA,CAAAE,GAAA;IACHC,KAAK,GAAAH,EAAA,CAAAG,KAAA;IACLC,EAAA,GAAAJ,EAAA,CAAAK,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAEf,IAAIC,QAAQ,EAAE;IACZ,IAAIJ,GAAG,IAAIC,GAAG,EAAE;MACd,MAAM,IAAII,UAAU,CAClB,yDAAyD,CAC1D;;IAGH,IAAIH,KAAK,GAAGD,GAAG,IAAIC,KAAK,GAAGF,GAAG,EAAE;MAC9B,MAAM,IAAIK,UAAU,CAAC,gDAAgD,CAAC;;;EAI1E,IAAMC,KAAK,GAAGL,GAAG,GAAGD,GAAG;EACvB,IAAMO,KAAK,GAAGL,KAAK,GAAGF,GAAG;EACzB,IAAMQ,UAAU,GAAGD,KAAK,GAAGD,KAAK;EAChC,OAAOG,IAAI,CAACR,GAAG,CAAC,CAAC,EAAEQ,IAAI,CAACT,GAAG,CAACS,IAAI,CAACC,GAAG,CAACF,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}