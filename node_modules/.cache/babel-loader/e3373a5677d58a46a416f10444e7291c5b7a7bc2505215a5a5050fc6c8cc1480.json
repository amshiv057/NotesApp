{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n/**\n * Simple hook to use an timeout with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param cb - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultStarted - Boolean if the timeout should be started immediately.\n * @returns a list containing a function to start the timeout, a function to\n * stop the timeout, and a function to restart the timeout.\n */\nexport function useTimeout(cb, delay, defaultStarted) {\n  if (defaultStarted === void 0) {\n    defaultStarted = false;\n  }\n  var cbRef = useRefCache(cb);\n  var delayRef = useRefCache(delay);\n  var timeoutRef = useRef();\n  var _a = __read(useToggle(defaultStarted), 3),\n    enabled = _a[0],\n    start = _a[1],\n    disable = _a[2];\n  var clearTimeout = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }, []);\n  /* eslint-disable react-hooks/exhaustive-deps */\n  // these are all guaranteed to not change since using refs or non-updating\n  // callbacks\n  var restart = useCallback(function () {\n    clearTimeout();\n    timeoutRef.current = window.setTimeout(function () {\n      cbRef.current();\n      disable();\n    }, delayRef.current);\n  }, []);\n  var stop = useCallback(function () {\n    clearTimeout();\n    disable();\n  }, []);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    timeoutRef.current = window.setTimeout(function () {\n      cbRef.current();\n      disable();\n    }, delay);\n    return function () {\n      clearTimeout();\n    };\n  }, [enabled, delay, disable]);\n  return [start, stop, restart];\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useRefCache","useToggle","useTimeout","cb","delay","defaultStarted","cbRef","delayRef","timeoutRef","_a","__read","enabled","start","disable","clearTimeout","window","current","undefined","restart","setTimeout","stop"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\useTimeout.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from \"react\";\n\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n\ntype StartTimeout = () => void;\ntype StopTimeout = () => void;\ntype RestartTimeout = () => void;\ntype ReturnValue = [StartTimeout, StopTimeout, RestartTimeout];\n\n/**\n * Simple hook to use an timeout with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param cb - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultStarted - Boolean if the timeout should be started immediately.\n * @returns a list containing a function to start the timeout, a function to\n * stop the timeout, and a function to restart the timeout.\n */\nexport function useTimeout(\n  cb: () => void,\n  delay: number,\n  defaultStarted: boolean | (() => boolean) = false\n): ReturnValue {\n  const cbRef = useRefCache(cb);\n  const delayRef = useRefCache(delay);\n  const timeoutRef = useRef<number>();\n  const [enabled, start, disable] = useToggle(defaultStarted);\n\n  const clearTimeout = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }, []);\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  // these are all guaranteed to not change since using refs or non-updating\n  // callbacks\n  const restart = useCallback(() => {\n    clearTimeout();\n    timeoutRef.current = window.setTimeout(() => {\n      cbRef.current();\n      disable();\n    }, delayRef.current);\n  }, []);\n\n  const stop = useCallback(() => {\n    clearTimeout();\n    disable();\n  }, []);\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    timeoutRef.current = window.setTimeout(() => {\n      cbRef.current();\n      disable();\n    }, delay);\n    return () => {\n      clearTimeout();\n    };\n  }, [enabled, delay, disable]);\n\n  return [start, stop, restart];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEtD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,aAAa;AAOvC;;;;;;;;;;;AAWA,OAAM,SAAUC,UAAUA,CACxBC,EAAc,EACdC,KAAa,EACbC,cAAiD;EAAjD,IAAAA,cAAA;IAAAA,cAAA,QAAiD;EAAA;EAEjD,IAAMC,KAAK,GAAGN,WAAW,CAACG,EAAE,CAAC;EAC7B,IAAMI,QAAQ,GAAGP,WAAW,CAACI,KAAK,CAAC;EACnC,IAAMI,UAAU,GAAGT,MAAM,EAAU;EAC7B,IAAAU,EAAA,GAAAC,MAAA,CAA4BT,SAAS,CAACI,cAAc,CAAC;IAApDM,OAAO,GAAAF,EAAA;IAAEG,KAAK,GAAAH,EAAA;IAAEI,OAAO,GAAAJ,EAAA,GAA6B;EAE3D,IAAMK,YAAY,GAAGjB,WAAW,CAAC;IAC/BkB,MAAM,CAACD,YAAY,CAACN,UAAU,CAACQ,OAAO,CAAC;IACvCR,UAAU,CAACQ,OAAO,GAAGC,SAAS;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN;EACA;EACA;EACA,IAAMC,OAAO,GAAGrB,WAAW,CAAC;IAC1BiB,YAAY,EAAE;IACdN,UAAU,CAACQ,OAAO,GAAGD,MAAM,CAACI,UAAU,CAAC;MACrCb,KAAK,CAACU,OAAO,EAAE;MACfH,OAAO,EAAE;IACX,CAAC,EAAEN,QAAQ,CAACS,OAAO,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMI,IAAI,GAAGvB,WAAW,CAAC;IACvBiB,YAAY,EAAE;IACdD,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC;IACR,IAAI,CAACa,OAAO,EAAE;MACZ;;IAGFH,UAAU,CAACQ,OAAO,GAAGD,MAAM,CAACI,UAAU,CAAC;MACrCb,KAAK,CAACU,OAAO,EAAE;MACfH,OAAO,EAAE;IACX,CAAC,EAAET,KAAK,CAAC;IACT,OAAO;MACLU,YAAY,EAAE;IAChB,CAAC;EACH,CAAC,EAAE,CAACH,OAAO,EAAEP,KAAK,EAAES,OAAO,CAAC,CAAC;EAE7B,OAAO,CAACD,KAAK,EAAEQ,IAAI,EAAEF,OAAO,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}