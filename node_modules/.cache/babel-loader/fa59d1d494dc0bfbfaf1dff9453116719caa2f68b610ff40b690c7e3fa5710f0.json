{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nvar block = bem(\"rmd-textarea\");\nvar container = bem(\"rmd-textarea-container\");\nvar PADDING_VARIABLES = \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\";\n// this is the default of 1.5rem line-height in the styles\nvar DEFAULT_LINE_HEIGHT = \"24\";\nexport var TextArea = forwardRef(function TextArea(_a, forwardedRef) {\n  var style = _a.style,\n    className = _a.className,\n    areaStyle = _a.areaStyle,\n    areaClassName = _a.areaClassName,\n    containerRef = _a.containerRef,\n    containerProps = _a.containerProps,\n    label = _a.label,\n    labelStyle = _a.labelStyle,\n    labelClassName = _a.labelClassName,\n    _b = _a.rows,\n    rows = _b === void 0 ? 2 : _b,\n    _c = _a.maxRows,\n    maxRows = _c === void 0 ? -1 : _c,\n    _d = _a.resize,\n    resize = _d === void 0 ? \"auto\" : _d,\n    propTheme = _a.theme,\n    _e = _a.dense,\n    dense = _e === void 0 ? false : _e,\n    _f = _a.inline,\n    propInline = _f === void 0 ? false : _f,\n    _g = _a.error,\n    error = _g === void 0 ? false : _g,\n    _h = _a.stretch,\n    stretch = _h === void 0 ? false : _h,\n    _j = _a.disabled,\n    disabled = _j === void 0 ? false : _j,\n    _k = _a.animate,\n    animate = _k === void 0 ? true : _k,\n    _l = _a.isLeftAddon,\n    isLeftAddon = _l === void 0 ? true : _l,\n    _m = _a.isRightAddon,\n    isRightAddon = _m === void 0 ? true : _m,\n    propUnderlineDirection = _a.underlineDirection,\n    propOnBlur = _a.onBlur,\n    propOnFocus = _a.onFocus,\n    propOnChange = _a.onChange,\n    leftChildren = _a.leftChildren,\n    rightChildren = _a.rightChildren,\n    props = __rest(_a, [\"style\", \"className\", \"areaStyle\", \"areaClassName\", \"containerRef\", \"containerProps\", \"label\", \"labelStyle\", \"labelClassName\", \"rows\", \"maxRows\", \"resize\", \"theme\", \"dense\", \"inline\", \"error\", \"stretch\", \"disabled\", \"animate\", \"isLeftAddon\", \"isRightAddon\", \"underlineDirection\", \"onBlur\", \"onFocus\", \"onChange\", \"leftChildren\", \"rightChildren\"]);\n  var id = props.id,\n    value = props.value,\n    defaultValue = props.defaultValue;\n  var _o = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection\n    }),\n    theme = _o.theme,\n    underlineDirection = _o.underlineDirection;\n  var _p = __read(useState(), 2),\n    height = _p[0],\n    setHeight = _p[1];\n  useEffect(function () {\n    if (resize !== \"auto\" && typeof height === \"number\") {\n      setHeight(undefined);\n    }\n  }, [resize, height]);\n  var maskRef = useRef(null);\n  var _q = __read(useState(false), 2),\n    scrollable = _q[0],\n    setScrollable = _q[1];\n  var updateHeight = useCallback(function () {\n    var mask = maskRef.current;\n    /* istanbul ignore if */\n    if (!mask) {\n      return;\n    }\n    var nextHeight = mask.scrollHeight;\n    /* istanbul ignore if */\n    if (maxRows > 0) {\n      var lineHeight = parseFloat(window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT);\n      var maxHeight = maxRows * lineHeight;\n      nextHeight = Math.min(maxHeight, nextHeight);\n      // only want the textarea to be scrollable if there's a limit on the rows\n      // since it'll flash the scrollbar on most OS during the height transition\n      if (nextHeight === maxHeight && !scrollable) {\n        setScrollable(true);\n      } else if (nextHeight !== maxHeight && scrollable) {\n        setScrollable(false);\n      }\n    }\n    if (height !== nextHeight) {\n      setHeight(nextHeight);\n    }\n  }, [height, maxRows, scrollable]);\n  // the window can be resized while there is text inside the textarea so need to\n  // recalculate the height when the width changes as well.\n  var _r = __read(useResizeObserver(updateHeight, {\n      ref: maskRef,\n      disableHeight: true\n    }), 2),\n    maskRefHandler = _r[1];\n  var _s = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: function (event) {\n        var mask = maskRef.current;\n        if (propOnChange) {\n          propOnChange(event);\n        }\n        /* istanbul ignore if */\n        if (!mask || resize !== \"auto\") {\n          return;\n        }\n        // to get the height transition to work, you have to set the height on:\n        // - the main container element (including padding) that has the height\n        //    transition enabled\n        // - a child div wrapper (without padding) that has the height transition\n        //    enabled\n        // - the textarea element (without padding) and without a height transition\n        //\n        // if it isn't done this way, the height transition will look weird since\n        // the text will be fixed to the bottom of the area and more text at the top\n        // will become visible as the height transition completes. applying the\n        // transition on the two parent elements work because:\n        // - the height is set immediately on the text field so it expands to show all\n        //    the text\n        // - the height is correctly applied to both parent elements, but their height\n        //    haven't fully been adjusted due to the animation\n        // - the parent divs have overflow visible by default, so the textarea's text\n        //    will expand past the boundaries of the divs and not cause the upwards\n        //    animation weirdness.\n        mask.value = event.currentTarget.value;\n        updateHeight();\n      },\n      value: value,\n      defaultValue: defaultValue\n    }),\n    valued = _s.valued,\n    focused = _s.focused,\n    onBlur = _s.onBlur,\n    onFocus = _s.onFocus,\n    onChange = _s.onChange;\n  var _t = __read(useEnsuredRef(forwardedRef), 2),\n    ref = _t[0],\n    refHandler = _t[1];\n  // the container element adds some padding so that the content can scroll and\n  // not be covered by the floating label. unfortunately, this means that the entire\n  // container is no longer clickable to focus the input. This is used to add that\n  // functionality back.\n  var handleClick = useCallback(function (event) {\n    if (ref.current && event.target === event.currentTarget) {\n      ref.current.focus();\n    }\n  }, [ref]);\n  var area = _jsx(\"textarea\", __assign({}, props, {\n    ref: refHandler,\n    rows: rows,\n    disabled: disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    style: __assign(__assign({}, areaStyle), {\n      height: height !== null && height !== void 0 ? height : areaStyle === null || areaStyle === void 0 ? void 0 : areaStyle.height\n    }),\n    className: cn(block({\n      scrollable: scrollable || resize === \"none\",\n      floating: label && theme !== \"none\",\n      rh: resize === \"horizontal\",\n      rv: resize === \"vertical\",\n      rn: resize === \"auto\" || resize === \"none\"\n    }), areaClassName)\n  }));\n  var children = area;\n  if (resize === \"auto\") {\n    children = _jsxs(\"div\", __assign({\n      style: {\n        height: height\n      },\n      className: container(\"inner\", {\n        animate: animate\n      })\n    }, {\n      children: [area, _jsx(\"textarea\", {\n        \"aria-hidden\": true,\n        defaultValue: value || defaultValue,\n        id: \"\".concat(id, \"-mask\"),\n        ref: maskRefHandler,\n        readOnly: true,\n        rows: rows,\n        tabIndex: -1,\n        style: areaStyle,\n        className: cn(block({\n          rn: true,\n          mask: true,\n          floating: label && theme !== \"none\"\n        }), areaClassName)\n      })]\n    }));\n  }\n  var inline = propInline;\n  if (resize === \"horizontal\" || resize === \"both\") {\n    // have to force it inline or else you won't be able to resize\n    // it horizontally.\n    inline = true;\n  }\n  return _jsxs(TextFieldContainer, __assign({}, containerProps, {\n    style: __assign(__assign({}, style), {\n      height: height ? \"calc(\".concat(PADDING_VARIABLES, \" + \").concat(height, \"px)\") : style === null || style === void 0 ? void 0 : style.height\n    }),\n    className: cn(container({\n      animate: animate && resize === \"auto\",\n      cursor: !disabled\n    }), className),\n    ref: containerRef,\n    theme: theme,\n    error: error,\n    active: focused,\n    label: !!label,\n    dense: dense,\n    inline: inline,\n    stretch: stretch,\n    disabled: disabled,\n    isLeftAddon: isLeftAddon,\n    isRightAddon: isRightAddon,\n    leftChildren: leftChildren,\n    rightChildren: rightChildren,\n    underlineDirection: underlineDirection,\n    onClick: !disabled ? handleClick : undefined\n  }, {\n    children: [_jsx(FloatingLabel, __assign({\n      style: labelStyle,\n      className: labelClassName,\n      htmlFor: id,\n      error: error,\n      active: focused,\n      floating: focused || valued,\n      valued: valued,\n      dense: dense,\n      disabled: disabled\n    }, {\n      children: label\n    })), children]\n  }));\n});","map":{"version":3,"names":["forwardRef","useCallback","useEffect","useRef","useState","cn","bem","useEnsuredRef","useResizeObserver","useFormTheme","FloatingLabel","useFieldStates","TextFieldContainer","block","container","PADDING_VARIABLES","DEFAULT_LINE_HEIGHT","TextArea","_a","forwardedRef","style","className","areaStyle","areaClassName","containerRef","containerProps","label","labelStyle","labelClassName","_b","rows","_c","maxRows","_d","resize","propTheme","theme","_e","dense","_f","inline","propInline","_g","error","_h","stretch","_j","disabled","_k","animate","_l","isLeftAddon","_m","isRightAddon","propUnderlineDirection","underlineDirection","propOnBlur","onBlur","propOnFocus","onFocus","propOnChange","onChange","leftChildren","rightChildren","props","__rest","id","value","defaultValue","_o","_p","__read","height","setHeight","undefined","maskRef","_q","scrollable","setScrollable","updateHeight","mask","current","nextHeight","scrollHeight","lineHeight","parseFloat","window","getComputedStyle","maxHeight","Math","min","_r","ref","disableHeight","maskRefHandler","_s","event","currentTarget","valued","focused","_t","refHandler","handleClick","target","focus","area","_jsx","__assign","floating","rh","rv","rn","children","_jsxs","concat","readOnly","tabIndex","cursor","active","onClick","htmlFor"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\text-field\\TextArea.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  Ref,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\n\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport type { TextFieldContainerOptions } from \"./TextFieldContainer\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\n\nexport type TextAreaResize =\n  | \"none\"\n  | \"auto\"\n  | \"horizontal\"\n  | \"vertical\"\n  | \"both\";\n\nexport interface TextAreaProps\n  extends TextareaHTMLAttributes<HTMLTextAreaElement>,\n    TextFieldContainerOptions {\n  /**\n   * An id to apply to the text area. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * The value to use for the text field. This will make the component\n   * controlled and require the `onChange` prop to be provided as well otherwise\n   * this will act as a read only text field.\n   */\n  value?: string;\n\n  /**\n   * The default value for the text field which will make it uncontrolled.  If\n   * you manually change the `defaultValue` prop, the input's value **will not\n   * change** unless you provide a different `key` as well. Use the `value` prop\n   * instead for a controlled input.\n   */\n  defaultValue?: string;\n\n  /**\n   * An optional floating label to use for the text field. This should really\n   * only be used when the `theme` prop is not set to `\"none\"`. This will be\n   * wrapped in the `<Label>` component itself and automatically apply the\n   * `htmlFor` prop for this text field.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the label wrapper.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the label wrapper.\n   */\n  labelClassName?: string;\n\n  /**\n   * An optional style to apply to the textarea element. The base `style` prop\n   * is applied to the surrounding `div` instead.\n   */\n  areaStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the textarea element. The base `style`\n   * prop is applied to the surrounding `div` instead.\n   */\n  areaClassName?: string;\n\n  /**\n   * The number of rows to display by default. The textarea will automatically\n   * update and animate its height when the users types if the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  rows?: number;\n\n  /**\n   * The maximum number of rows that are allowed. When this is set to `-1`, it\n   * will infinitely expand based on the text content.\n   */\n  maxRows?: number;\n\n  /**\n   * Updates the resize ability for the textarea. Native textareas are resizable\n   * both horizontally and vertically, but this component will prevent resizing\n   * by default and instead animate height changes as the user types.\n   */\n  resize?: TextAreaResize;\n\n  /**\n   * Boolean if the height changes should be animated when the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  animate?: boolean;\n\n  /**\n   * An optional ref to apply to the text field's container div element. The\n   * default ref is forwarded on to the `input` element.\n   */\n  containerRef?: Ref<HTMLDivElement>;\n\n  /**\n   * Any additional html attributes that should be applied to the main container\n   * div. This is probably only going to be used internally so that additional\n   * accessibility can be added to text fields for more complex widgets.\n   *\n   * @remarks \\@since 2.5.2\n   */\n  containerProps?: Omit<HTMLAttributes<HTMLDivElement>, \"style\" | \"className\">;\n}\n\nconst block = bem(\"rmd-textarea\");\nconst container = bem(\"rmd-textarea-container\");\nconst PADDING_VARIABLES =\n  \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\";\n\n// this is the default of 1.5rem line-height in the styles\nconst DEFAULT_LINE_HEIGHT = \"24\";\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  function TextArea(\n    {\n      style,\n      className,\n      areaStyle,\n      areaClassName,\n      containerRef,\n      containerProps,\n      label,\n      labelStyle,\n      labelClassName,\n      rows = 2,\n      maxRows = -1,\n      resize = \"auto\",\n      theme: propTheme,\n      dense = false,\n      inline: propInline = false,\n      error = false,\n      stretch = false,\n      disabled = false,\n      animate = true,\n      isLeftAddon = true,\n      isRightAddon = true,\n      underlineDirection: propUnderlineDirection,\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      leftChildren,\n      rightChildren,\n      ...props\n    },\n    forwardedRef\n  ): ReactElement {\n    const { id, value, defaultValue } = props;\n    const { theme, underlineDirection } = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection,\n    });\n\n    const [height, setHeight] = useState<number>();\n    useEffect(() => {\n      if (resize !== \"auto\" && typeof height === \"number\") {\n        setHeight(undefined);\n      }\n    }, [resize, height]);\n\n    const maskRef = useRef<HTMLTextAreaElement | null>(null);\n    const [scrollable, setScrollable] = useState(false);\n    const updateHeight = useCallback(() => {\n      const mask = maskRef.current;\n      /* istanbul ignore if */\n      if (!mask) {\n        return;\n      }\n\n      let nextHeight = mask.scrollHeight;\n      /* istanbul ignore if */\n      if (maxRows > 0) {\n        const lineHeight = parseFloat(\n          window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT\n        );\n        const maxHeight = maxRows * lineHeight;\n        nextHeight = Math.min(maxHeight, nextHeight);\n\n        // only want the textarea to be scrollable if there's a limit on the rows\n        // since it'll flash the scrollbar on most OS during the height transition\n        if (nextHeight === maxHeight && !scrollable) {\n          setScrollable(true);\n        } else if (nextHeight !== maxHeight && scrollable) {\n          setScrollable(false);\n        }\n      }\n\n      if (height !== nextHeight) {\n        setHeight(nextHeight);\n      }\n    }, [height, maxRows, scrollable]);\n\n    // the window can be resized while there is text inside the textarea so need to\n    // recalculate the height when the width changes as well.\n    const [, maskRefHandler] = useResizeObserver(updateHeight, {\n      ref: maskRef,\n      disableHeight: true,\n    });\n    const { valued, focused, onBlur, onFocus, onChange } = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: (event) => {\n        const mask = maskRef.current;\n        if (propOnChange) {\n          propOnChange(event);\n        }\n\n        /* istanbul ignore if */\n        if (!mask || resize !== \"auto\") {\n          return;\n        }\n\n        // to get the height transition to work, you have to set the height on:\n        // - the main container element (including padding) that has the height\n        //    transition enabled\n        // - a child div wrapper (without padding) that has the height transition\n        //    enabled\n        // - the textarea element (without padding) and without a height transition\n        //\n        // if it isn't done this way, the height transition will look weird since\n        // the text will be fixed to the bottom of the area and more text at the top\n        // will become visible as the height transition completes. applying the\n        // transition on the two parent elements work because:\n        // - the height is set immediately on the text field so it expands to show all\n        //    the text\n        // - the height is correctly applied to both parent elements, but their height\n        //    haven't fully been adjusted due to the animation\n        // - the parent divs have overflow visible by default, so the textarea's text\n        //    will expand past the boundaries of the divs and not cause the upwards\n        //    animation weirdness.\n        mask.value = event.currentTarget.value;\n        updateHeight();\n      },\n      value,\n      defaultValue,\n    });\n\n    const [ref, refHandler] = useEnsuredRef(forwardedRef);\n\n    // the container element adds some padding so that the content can scroll and\n    // not be covered by the floating label. unfortunately, this means that the entire\n    // container is no longer clickable to focus the input. This is used to add that\n    // functionality back.\n    const handleClick = useCallback(\n      (event: React.MouseEvent<HTMLDivElement>) => {\n        if (ref.current && event.target === event.currentTarget) {\n          ref.current.focus();\n        }\n      },\n      [ref]\n    );\n\n    const area = (\n      <textarea\n        {...props}\n        ref={refHandler}\n        rows={rows}\n        disabled={disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={onChange}\n        style={{ ...areaStyle, height: height ?? areaStyle?.height }}\n        className={cn(\n          block({\n            scrollable: scrollable || resize === \"none\",\n            floating: label && theme !== \"none\",\n            rh: resize === \"horizontal\",\n            rv: resize === \"vertical\",\n            rn: resize === \"auto\" || resize === \"none\",\n          }),\n          areaClassName\n        )}\n      />\n    );\n\n    let children = area;\n    if (resize === \"auto\") {\n      children = (\n        <div style={{ height }} className={container(\"inner\", { animate })}>\n          {area}\n          <textarea\n            aria-hidden\n            defaultValue={value || defaultValue}\n            id={`${id}-mask`}\n            ref={maskRefHandler}\n            readOnly\n            rows={rows}\n            tabIndex={-1}\n            style={areaStyle}\n            className={cn(\n              block({\n                rn: true,\n                mask: true,\n                floating: label && theme !== \"none\",\n              }),\n              areaClassName\n            )}\n          />\n        </div>\n      );\n    }\n\n    let inline = propInline;\n    if (resize === \"horizontal\" || resize === \"both\") {\n      // have to force it inline or else you won't be able to resize\n      // it horizontally.\n      inline = true;\n    }\n\n    return (\n      <TextFieldContainer\n        {...containerProps}\n        style={{\n          ...style,\n          height: height\n            ? `calc(${PADDING_VARIABLES} + ${height}px)`\n            : style?.height,\n        }}\n        className={cn(\n          container({\n            animate: animate && resize === \"auto\",\n            cursor: !disabled,\n          }),\n          className\n        )}\n        ref={containerRef}\n        theme={theme}\n        error={error}\n        active={focused}\n        label={!!label}\n        dense={dense}\n        inline={inline}\n        stretch={stretch}\n        disabled={disabled}\n        isLeftAddon={isLeftAddon}\n        isRightAddon={isRightAddon}\n        leftChildren={leftChildren}\n        rightChildren={rightChildren}\n        underlineDirection={underlineDirection}\n        onClick={!disabled ? handleClick : undefined}\n      >\n        <FloatingLabel\n          style={labelStyle}\n          className={labelClassName}\n          htmlFor={id}\n          error={error}\n          active={focused}\n          floating={focused || valued}\n          valued={valued}\n          dense={dense}\n          disabled={disabled}\n        >\n          {label}\n        </FloatingLabel>\n        {children}\n      </TextFieldContainer>\n    );\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}