{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-avatar\");\n/**\n * An `Avatar` is generally used to represent objects or people within your app.\n * The avatar can consist of an image, an icon, or some text to display. When\n * the avatar is not an image, different themes can be applied to make the\n * avatar more unique.\n */\nexport var Avatar = forwardRef(function Avatar(_a, ref) {\n  var _b;\n  var className = _a.className,\n    children = _a.children,\n    src = _a.src,\n    _c = _a.alt,\n    alt = _c === void 0 ? \"\" : _c,\n    _d = _a.color,\n    color = _d === void 0 ? \"\" : _d,\n    imgProps = _a.imgProps,\n    referrerPolicy = _a.referrerPolicy,\n    props = __rest(_a, [\"className\", \"children\", \"src\", \"alt\", \"color\", \"imgProps\", \"referrerPolicy\"]);\n  var img;\n  if (src || imgProps) {\n    img = _jsx(\"img\", __assign({\n      src: src,\n      alt: alt,\n      referrerPolicy: referrerPolicy\n    }, imgProps, {\n      className: cn(block(\"image\"), imgProps === null || imgProps === void 0 ? void 0 : imgProps.className)\n    }));\n  }\n  return _jsxs(\"span\", __assign({}, props, {\n    ref: ref,\n    className: cn(block((_b = {}, _b[color] = color, _b)), className)\n  }, {\n    children: [img, children]\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","bem","block","Avatar","_a","ref","className","children","src","_c","alt","_d","color","imgProps","referrerPolicy","props","__rest","img","_jsx","__assign","_jsxs","_b"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\avatar\\src\\Avatar.tsx"],"sourcesContent":["import type { HTMLAttributes, ImgHTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { PropsWithRef } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\ntype ImgAttributes = ImgHTMLAttributes<HTMLImageElement>;\n\nexport interface AvatarProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * This should be an image `src` attribute to create an avatar from. When this\n   * prop is defined, you should not add any children to the avatar as the\n   * positioning will break.\n   */\n  src?: string;\n\n  /**\n   * An optional alt tag to display on the `<img>` when the `src` prop is also\n   * applied.\n   *\n   * For accessibility and screen readers, you normally do not want to actually\n   * provide this prop. This should only be used if the `Avatar` is not\n   * accompanied by some other component or main content as it will be extra\n   * noise for screen readers.\n   */\n  alt?: string;\n\n  /**\n   * An optional `referrerPolicy` to provide to the `<img>` element if the `src`\n   * or `imgProps` props are provided.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-referrerpolicy|Referrer Policy}\n   *\n   * @remarks \\@since 2.2.0\n   */\n  referrerPolicy?: ImgAttributes[\"referrerPolicy\"];\n\n  /**\n   * An optional object of image props and ref that can be used to create an\n   * image within the `Avatar`. This can be useful to add a custom `style`\n   * or`className` to the `<img>` element if that additional customization is\n   * needed.\n   *\n   * Note: The values in this object will override the `src`, `alt`, and\n   * `referrerPolicy` root level avatar props if they exist on this object.\n   *\n   * @remarks \\@since 2.2.0\n   */\n  imgProps?: PropsWithRef<ImgAttributes, HTMLImageElement>;\n\n  /**\n   * An optional color to apply to the avatar. This will apply a className of\n   * `rmd-avatar--${color}`, so only the keys from the `$rmd-avatar-colors` Map\n   * are supported by default. It is recommended to create custom colors using\n   * the `rmd-avatar-theme-update-var` mixin with custom class names if the\n   * default colors aren't extensive enough.\n   */\n  color?: string;\n}\n\nconst block = bem(\"rmd-avatar\");\n\n/**\n * An `Avatar` is generally used to represent objects or people within your app.\n * The avatar can consist of an image, an icon, or some text to display. When\n * the avatar is not an image, different themes can be applied to make the\n * avatar more unique.\n */\nexport const Avatar = forwardRef<HTMLSpanElement, AvatarProps>(function Avatar(\n  {\n    className,\n    children,\n    src,\n    alt = \"\",\n    color = \"\",\n    imgProps,\n    referrerPolicy,\n    ...props\n  },\n  ref\n) {\n  let img;\n  if (src || imgProps) {\n    img = (\n      <img\n        src={src}\n        alt={alt}\n        referrerPolicy={referrerPolicy}\n        {...imgProps}\n        className={cn(block(\"image\"), imgProps?.className)}\n      />\n    );\n  }\n\n  return (\n    <span\n      {...props}\n      ref={ref}\n      className={cn(block({ [color]: color }), className)}\n    >\n      {img}\n      {children}\n    </span>\n  );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,GAAG,QAAQ,iBAAiB;AAwDrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,YAAY,CAAC;AAE/B;;;;;;AAMA,OAAO,IAAME,MAAM,GAAGJ,UAAU,CAA+B,SAASI,MAAMA,CAC5EC,EASC,EACDC,GAAG;;EATD,IAAAC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IACTC,QAAQ,GAAAH,EAAA,CAAAG,QAAA;IACRC,GAAG,GAAAJ,EAAA,CAAAI,GAAA;IACHC,EAAA,GAAAL,EAAA,CAAAM,GAAQ;IAARA,GAAG,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACRE,EAAA,GAAAP,EAAA,CAAAQ,KAAU;IAAVA,KAAK,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACVE,QAAQ,GAAAT,EAAA,CAAAS,QAAA;IACRC,cAAc,GAAAV,EAAA,CAAAU,cAAA;IACXC,KAAK,GAAAC,MAAA,CAAAZ,EAAA,EARV,8EASC,CADS;EAIV,IAAIa,GAAG;EACP,IAAIT,GAAG,IAAIK,QAAQ,EAAE;IACnBI,GAAG,GACDC,IAAA,QAAAC,QAAA;MACEX,GAAG,EAAEA,GAAG;MACRE,GAAG,EAAEA,GAAG;MACRI,cAAc,EAAEA;IAAc,GAC1BD,QAAQ;MACZP,SAAS,EAAEN,EAAE,CAACE,KAAK,CAAC,OAAO,CAAC,EAAEW,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEP,SAAS;IAAC,GAErD;;EAGH,OACEc,KAAA,SAAAD,QAAA,KACMJ,KAAK;IACTV,GAAG,EAAEA,GAAG;IACRC,SAAS,EAAEN,EAAE,CAACE,KAAK,EAAAmB,EAAA,OAAGA,EAAA,CAACT,KAAK,IAAGA,KAAK,EAAAS,EAAA,EAAG,EAAEf,SAAS;EAAC;IAAAC,QAAA,GAElDU,GAAG,EACHV,QAAQ;EAAA,GACJ;AAEX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}