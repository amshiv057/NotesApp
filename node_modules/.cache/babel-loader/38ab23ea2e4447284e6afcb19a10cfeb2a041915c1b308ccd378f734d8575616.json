{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-icon-rotator\");\n/**\n * The `IconRotator` is a simple component that is used to rotate an icon from a\n * one degrees to another.\n */\nexport var IconRotator = forwardRef(function IconRotator(_a, ref) {\n  var style = _a.style,\n    propClassName = _a.className,\n    _b = _a.animate,\n    animate = _b === void 0 ? true : _b,\n    rotated = _a.rotated,\n    children = _a.children,\n    _c = _a.forceIconWrap,\n    forceIconWrap = _c === void 0 ? false : _c,\n    props = __rest(_a, [\"style\", \"className\", \"animate\", \"rotated\", \"children\", \"forceIconWrap\"]);\n  var className = cn(block({\n    animate: animate,\n    rotated: rotated\n  }), propClassName);\n  if (!forceIconWrap && isValidElement(children)) {\n    var child = Children.only(children);\n    return cloneElement(child, {\n      className: cn(className, child.props.className)\n    });\n  }\n  return _jsx(\"span\", __assign({}, props, {\n    style: style,\n    className: className,\n    ref: ref\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"names":["Children","cloneElement","forwardRef","isValidElement","cn","bem","block","IconRotator","_a","ref","style","propClassName","className","_b","animate","rotated","children","_c","forceIconWrap","props","__rest","child","only","_jsx","__assign"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\icon\\src\\IconRotator.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, ReactNode } from \"react\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport type { ClassNameCloneableChild } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface IconRotatorBaseProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * An optional style to apply to the surrounding span when the `forceIconWrap`\n   * prop is enabled or the children is not a single react element.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className to apply.\n   */\n  className?: string;\n\n  /**\n   * Boolean if the rotation should be animated instead of static.\n   */\n  animate?: boolean;\n\n  /**\n   * Boolean if the icon is currently rotated.\n   */\n  rotated: boolean;\n\n  /**\n   * Boolean if the child icon should be \"forcefully\" wrapped in a `<span>`\n   * element. This should be enabled if you have a custom icon that does not\n   * pass the `className` prop down.\n   */\n  forceIconWrap?: boolean;\n}\n\nexport interface IconRotatorProps extends IconRotatorBaseProps {\n  /**\n   * The icon that should be rotated. If this is a valid React Element, the\n   * class names will be cloned into that icon, otherwise the icon will be\n   * wrapped in a span with the correct class names applied.\n   */\n  children: ReactNode;\n}\n\nconst block = bem(\"rmd-icon-rotator\");\n\n/**\n * The `IconRotator` is a simple component that is used to rotate an icon from a\n * one degrees to another.\n */\nexport const IconRotator = forwardRef<HTMLSpanElement, IconRotatorProps>(\n  function IconRotator(\n    {\n      style,\n      className: propClassName,\n      animate = true,\n      rotated,\n      children,\n      forceIconWrap = false,\n      ...props\n    },\n    ref\n  ) {\n    const className = cn(block({ animate, rotated }), propClassName);\n    if (!forceIconWrap && isValidElement(children)) {\n      const child = Children.only<ClassNameCloneableChild>(children);\n      return cloneElement(child, {\n        className: cn(className, child.props.className),\n      });\n    }\n\n    return (\n      <span {...props} style={style} className={className} ref={ref}>\n        {children}\n      </span>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAEC,cAAc,QAAQ,OAAO;AAC1E,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,GAAG,QAAQ,iBAAiB;AAyCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,kBAAkB,CAAC;AAErC;;;;AAIA,OAAO,IAAME,WAAW,GAAGL,UAAU,CACnC,SAASK,WAAWA,CAClBC,EAQC,EACDC,GAAG;EARD,IAAAC,KAAK,GAAAF,EAAA,CAAAE,KAAA;IACMC,aAAa,GAAAH,EAAA,CAAAI,SAAA;IACxBC,EAAA,GAAAL,EAAA,CAAAM,OAAc;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACdE,OAAO,GAAAP,EAAA,CAAAO,OAAA;IACPC,QAAQ,GAAAR,EAAA,CAAAQ,QAAA;IACRC,EAAA,GAAAT,EAAA,CAAAU,aAAqB;IAArBA,aAAa,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IAClBE,KAAK,GAAAC,MAAA,CAAAZ,EAAA,EAPV,yEAQC,CADS;EAIV,IAAMI,SAAS,GAAGR,EAAE,CAACE,KAAK,CAAC;IAAEQ,OAAO,EAAAA,OAAA;IAAEC,OAAO,EAAAA;EAAA,CAAE,CAAC,EAAEJ,aAAa,CAAC;EAChE,IAAI,CAACO,aAAa,IAAIf,cAAc,CAACa,QAAQ,CAAC,EAAE;IAC9C,IAAMK,KAAK,GAAGrB,QAAQ,CAACsB,IAAI,CAA0BN,QAAQ,CAAC;IAC9D,OAAOf,YAAY,CAACoB,KAAK,EAAE;MACzBT,SAAS,EAAER,EAAE,CAACQ,SAAS,EAAES,KAAK,CAACF,KAAK,CAACP,SAAS;KAC/C,CAAC;;EAGJ,OACEW,IAAA,SAAAC,QAAA,KAAUL,KAAK;IAAET,KAAK,EAAEA,KAAK;IAAEE,SAAS,EAAEA,SAAS;IAAEH,GAAG,EAAEA;EAAG;IAAAO,QAAA,EAC1DA;EAAQ,GACJ;AAEX,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}