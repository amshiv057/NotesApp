{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\tabs\\src\\types.ts"],"sourcesContent":["import type { CSSProperties, ReactNode } from \"react\";\n\n/**\n * The supported types of alignments for the tabs.\n */\nexport type TabsAlignment = \"left\" | \"center\" | \"right\";\n\nexport interface TabsConfig {\n  /**\n   * The alignment to use for the tabs.\n   *\n   * @defaultValue `\"left\"`\n   */\n  align?: TabsAlignment;\n\n  /**\n   * Boolean if the tab should automatically become active when the user\n   * navigates to the tab with the arrow keys.\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus\n   * @defaultValue `false`\n   */\n  automatic?: boolean;\n\n  /**\n   * The orientation for the tabs. When this is set to vertical, the keyboard\n   * movement will be updated to use Up and Down arrow keys instead of Left and\n   * Right.\n   *\n   * @defaultValue `\"horizontal\"`\n   */\n  orientation?: \"horizontal\" | \"vertical\";\n\n  /**\n   * Boolean if you know that the tabs will be scrollable which will add some\n   * additional padding before the first tab to help users know that there's\n   * additional tabs.\n   *\n   * @defaultValue `false`\n   */\n  padded?: boolean;\n}\n\nexport interface TabConfig {\n  /**\n   * An optional id to use for the tab if the default generated ids are not to\n   * your liking.\n   */\n  id?: string;\n\n  /**\n   * An optional style to apply to the tab.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className to apply to the tab.\n   */\n  className?: string;\n\n  /**\n   * An optional icon to render in the `Tab` along with the normal text. If you\n   * want to have an icon only tab, you should not use this prop and instead\n   * just provide the icon as the tab's children.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Boolean if the icon should appear after the text instead of before. When\n   * the `stacked` prop is also enabled, it will cause the icon to appear below\n   * the text instead of above.\n   */\n  iconAfter?: boolean;\n\n  /**\n   * Boolean if the icon and text should be stacked instead of rendered inline.\n   * This is only valid when the `icon` prop has been provided.\n   */\n  stacked?: boolean;\n\n  /**\n   * Boolean if the tab should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * An optional style to apply to the `<span>` surrounding the `children` of\n   * the `Tab`. You _probably_ won't need to use this.\n   */\n  contentStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the `<span>` surrounding the `children`\n   * of the `Tab`. You _probably_ won't need to use this.\n   */\n  contentClassName?: string;\n\n  /**\n   * The children to display in the tab. This is required and should normally\n   * just be text or an icon.\n   */\n  children?: ReactNode;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}