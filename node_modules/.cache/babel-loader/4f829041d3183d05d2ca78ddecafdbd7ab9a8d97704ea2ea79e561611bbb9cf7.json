{"ast":null,"code":"import { createContext, useContext } from \"react\";\nvar context = createContext({\n  header: false,\n  hAlign: \"left\",\n  vAlign: \"middle\",\n  lineWrap: false,\n  disableHover: false,\n  disableBorders: false\n});\n/**\n * An internal hook for getting the current table configuration in child\n * components for the table. This will use the inherited table configuration\n * context if the prop value is `undefined`.\n *\n * @internal\n */\nexport function useTableConfig(options) {\n  var _a, _b, _c, _d, _e, _f;\n  var inherited = useContext(context);\n  var header = (_a = options.header) !== null && _a !== void 0 ? _a : inherited.header;\n  var hAlign = (_b = options.hAlign) !== null && _b !== void 0 ? _b : inherited.hAlign;\n  var vAlign = (_c = options.vAlign) !== null && _c !== void 0 ? _c : inherited.vAlign;\n  var lineWrap = (_d = options.lineWrap) !== null && _d !== void 0 ? _d : inherited.lineWrap;\n  var disableHover = (_e = options.disableHover) !== null && _e !== void 0 ? _e : inherited.disableHover;\n  var disableBorders = (_f = options.disableBorders) !== null && _f !== void 0 ? _f : inherited.disableBorders;\n  return {\n    header: header,\n    hAlign: hAlign,\n    vAlign: vAlign,\n    lineWrap: lineWrap,\n    disableHover: disableHover,\n    disableBorders: disableBorders\n  };\n}\n/**\n * @internal\n */\nexport var TableConfigProvider = context.Provider;","map":{"version":3,"names":["createContext","useContext","context","header","hAlign","vAlign","lineWrap","disableHover","disableBorders","useTableConfig","options","inherited","_a","_b","_c","_d","_e","_f","TableConfigProvider","Provider"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\table\\src\\config.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\n// interfaces that are \"public\" should be the full word `Configuration` while\n// the private/internal should just be `Config`. \"Great\" naming convention!\n\nexport interface TableRowConfiguration {\n  /**\n   * Boolean if the rows should no longer applied a different background color\n   * when hovered.\n   */\n  disableHover?: boolean;\n\n  /**\n   * Boolean if the table should no longer have a border-bottom applied to each\n   * row within the `<tbody>`.\n   */\n  disableBorders?: boolean;\n}\n\n/**\n * The horizontal alignment for the content within a cell.\n *\n * Note: Table default behavior is to align to the left.\n */\nexport type TableCellHorizontalAlignment = \"left\" | \"center\" | \"right\";\n\n/**\n * The vertical alignment for the content within a cell.\n *\n * Note: When this is set to `\"top\"` or `\"bottom\"`, `padding-top` or\n * `padding-bottom` will also be applied due to how styling tables work. This\n * padding can be configured with the `$rmd-table-cell-vertical-padding` or\n * `$rmd-table-cell-vertical-alignments` variables.\n */\nexport type TableCellVerticalAlignment = \"top\" | \"middle\" | \"bottom\";\n\nexport interface TableCellConfiguration {\n  /** {@inheritDoc TableCellHorizontalAlignment} */\n  hAlign?: TableCellHorizontalAlignment;\n  /** {@inheritDoc TableCellVerticalAlignment} */\n  vAlign?: TableCellVerticalAlignment;\n\n  /**\n   * Boolean if the `<td>` and `<th>` cells should support line wrapping. This\n   * is disabled by default since you _normally_ don't want line wrapping in\n   * tables unless it provides additional descriptions or other content.\n   *\n   * If this is set to the string `\"padded\"`, line wrapping will be enabled\n   * along with adding some additional vertical padding to each cell.\n   */\n  lineWrap?: boolean | \"padded\";\n}\n\n/**\n * This is the public table configuration that can be used.\n */\nexport interface TableConfiguration\n  extends TableRowConfiguration,\n    TableCellConfiguration {\n  /**\n   * Boolean if the table should use the dense spec to reduce the height of each\n   * cell.\n   */\n  dense?: boolean;\n\n  /**\n   * Boolean if the `<table>` element should span the entire width of the\n   * container `<div>` element instead of having its width be determined by the\n   * table's contents.\n   *\n   * Note: There will always be horizontal overflow if the table is too wide.\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * @internal\n */\nexport interface TableCellConfig extends TableCellConfiguration {\n  /**\n   * Boolean if all the `TableCell` components should be rendered as a `<th>`\n   * instead of a `<td>`. This is really just a convenience prop for the\n   * `TableHeader` component so the user of `react-md` doesn't need to keep\n   * setting the `type=\"th\"` fot the `TableCell` if using the low-level\n   * components.\n   *\n   * @internal\n   */\n  header?: boolean;\n}\n\nexport interface TableConfig extends TableRowConfiguration, TableCellConfig {}\nexport type TableConfigContext = Required<TableConfig>;\n\nconst context = createContext<TableConfigContext>({\n  header: false,\n  hAlign: \"left\",\n  vAlign: \"middle\",\n  lineWrap: false,\n  disableHover: false,\n  disableBorders: false,\n});\n\n/**\n * An internal hook for getting the current table configuration in child\n * components for the table. This will use the inherited table configuration\n * context if the prop value is `undefined`.\n *\n * @internal\n */\nexport function useTableConfig(options: TableConfig): TableConfigContext {\n  const inherited = useContext(context);\n  const header = options.header ?? inherited.header;\n  const hAlign = options.hAlign ?? inherited.hAlign;\n  const vAlign = options.vAlign ?? inherited.vAlign;\n  const lineWrap = options.lineWrap ?? inherited.lineWrap;\n  const disableHover = options.disableHover ?? inherited.disableHover;\n  const disableBorders = options.disableBorders ?? inherited.disableBorders;\n\n  return {\n    header,\n    hAlign,\n    vAlign,\n    lineWrap,\n    disableHover,\n    disableBorders,\n  };\n}\n\n/**\n * @internal\n */\nexport const { Provider: TableConfigProvider } = context;\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AA8FjD,IAAMC,OAAO,GAAGF,aAAa,CAAqB;EAChDG,MAAM,EAAE,KAAK;EACbC,MAAM,EAAE,MAAM;EACdC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,KAAK;EACfC,YAAY,EAAE,KAAK;EACnBC,cAAc,EAAE;CACjB,CAAC;AAEF;;;;;;;AAOA,OAAM,SAAUC,cAAcA,CAACC,OAAoB;;EACjD,IAAMC,SAAS,GAAGV,UAAU,CAACC,OAAO,CAAC;EACrC,IAAMC,MAAM,GAAG,CAAAS,EAAA,GAAAF,OAAO,CAACP,MAAM,cAAAS,EAAA,cAAAA,EAAA,GAAID,SAAS,CAACR,MAAM;EACjD,IAAMC,MAAM,GAAG,CAAAS,EAAA,GAAAH,OAAO,CAACN,MAAM,cAAAS,EAAA,cAAAA,EAAA,GAAIF,SAAS,CAACP,MAAM;EACjD,IAAMC,MAAM,GAAG,CAAAS,EAAA,GAAAJ,OAAO,CAACL,MAAM,cAAAS,EAAA,cAAAA,EAAA,GAAIH,SAAS,CAACN,MAAM;EACjD,IAAMC,QAAQ,GAAG,CAAAS,EAAA,GAAAL,OAAO,CAACJ,QAAQ,cAAAS,EAAA,cAAAA,EAAA,GAAIJ,SAAS,CAACL,QAAQ;EACvD,IAAMC,YAAY,GAAG,CAAAS,EAAA,GAAAN,OAAO,CAACH,YAAY,cAAAS,EAAA,cAAAA,EAAA,GAAIL,SAAS,CAACJ,YAAY;EACnE,IAAMC,cAAc,GAAG,CAAAS,EAAA,GAAAP,OAAO,CAACF,cAAc,cAAAS,EAAA,cAAAA,EAAA,GAAIN,SAAS,CAACH,cAAc;EAEzE,OAAO;IACLL,MAAM,EAAAA,MAAA;IACNC,MAAM,EAAAA,MAAA;IACNC,MAAM,EAAAA,MAAA;IACNC,QAAQ,EAAAA,QAAA;IACRC,YAAY,EAAAA,YAAA;IACZC,cAAc,EAAAA;GACf;AACH;AAEA;;;AAGA,OAAe,IAAUU,mBAAmB,GAAKhB,OAAO,CAAAiB,QAAZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}