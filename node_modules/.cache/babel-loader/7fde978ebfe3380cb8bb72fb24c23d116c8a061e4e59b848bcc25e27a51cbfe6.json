{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useEnsuredRef } from \"@react-md/utils\";\nimport { useTransition } from \"./useTransition\";\nimport { getElementSizing, getTransitionTimeout } from \"./utils\";\n/**\n * @remarks \\@since 2.0.0\n */\nexport var DEFAULT_COLLAPSE_MIN_HEIGHT = 0;\n/**\n * @remarks \\@since 2.0.0\n */\nexport var DEFAULT_COLLAPSE_MIN_PADDING_TOP = 0;\n/**\n * @remarks \\@since 2.0.0\n */\nexport var DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = 0;\n/**\n * @remarks \\@since 2.0.0\n */\nexport var DEFAULT_COLLAPSE_TIMEOUT = {\n  enter: 250,\n  exit: 200\n};\n/**\n * This hook is used to create a transition to collapse and expand an element\n * **inline** with other content like an accordion by animating the\n * `max-height`, `padding-top`, and `padding-bottom` CSS properties. The default\n * behavior is to hide the element completely while collapsed, but providing the\n * `minHeight`, `minPaddingTop`, and `minPaddingBottom` options can make this\n * work like a \"See More\"/\"Preview\" type of element\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps, rendered } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       // If the collapsible element should maintain state by not unmounting\n *       // while collapsed, uncomment this next line\n *       // temporary: false,\n *     });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps}>\n *           <Typography>Stuff that should be collapsed</Typography>\n *           <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * See More Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { IconRotator } from \"@react-md/icon\";\n * import { KeyboardArrowDownSVGIcon } from \"@react-md/material-icons\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * import styles from \"./Example.module.scss\";\n * // pretend styles:\n * //\n * // .container {\n * //   padding: 1rem;\n * //   position: relative;\n * // }\n * //\n * // .button {\n * //   position: absolute;\n * //   right: 0;\n * //   top: 0;\n * // }\n *\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       minHeight: 120,\n *       minPaddingTop: 16,\n *       className: styles.container,\n *     });\n *\n *   return (\n *     <div {...elementProps}>\n *       <Button\n *         aria-expanded={!collapsed}\n *         aria-label=\"Expand\"\n *         onClick={() => setCollapsed(!collapsed)}\n *         buttonType=\"icon\"\n *         className={styles.button}\n *       >\n *         <IconRotator rotated={!collapsed}>\n *           <KeyboardArrowDownSVGIcon />\n *         </IconRotator>\n *       </Button>\n *       <SomeComponentWithALotOfContent />\n *     </div>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCollapseTransition(_a) {\n  var propNodeRef = _a.nodeRef,\n    propStyle = _a.style,\n    className = _a.className,\n    transitionIn = _a.transitionIn,\n    _b = _a.timeout,\n    timeout = _b === void 0 ? DEFAULT_COLLAPSE_TIMEOUT : _b,\n    _c = _a.minHeight,\n    minHeight = _c === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _c,\n    _d = _a.minPaddingTop,\n    minPaddingTop = _d === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _d,\n    _e = _a.minPaddingBottom,\n    minPaddingBottom = _e === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _e,\n    _f = _a.temporary,\n    temporary = _f === void 0 ? minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0 : _f,\n    _g = _a.appear,\n    appear = _g === void 0 ? false : _g,\n    _h = _a.enter,\n    enter = _h === void 0 ? true : _h,\n    _j = _a.exit,\n    exit = _j === void 0 ? true : _j,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited;\n  var _k = __read(useEnsuredRef(propNodeRef), 2),\n    nodeRef = _k[0],\n    refCallback = _k[1];\n  var _l = __read(useState(function () {\n      if (transitionIn) {\n        return undefined;\n      }\n      return {\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom\n      };\n    }), 2),\n    style = _l[0],\n    setStyle = _l[1];\n  var transitionTimeout = getTransitionTimeout({\n    timeout: timeout,\n    appear: appear,\n    enter: enter,\n    exit: exit\n  });\n  var _m = useTransition({\n      nodeRef: refCallback,\n      timeout: timeout,\n      transitionIn: transitionIn,\n      reflow: true,\n      appear: appear,\n      enter: enter,\n      exit: exit,\n      temporary: temporary,\n      onEnter: function (appearing) {\n        onEnter === null || onEnter === void 0 ? void 0 : onEnter(appearing);\n        setStyle({\n          maxHeight: minHeight,\n          paddingTop: minPaddingTop,\n          paddingBottom: minPaddingBottom\n        });\n      },\n      onEntering: function (appearing) {\n        onEntering === null || onEntering === void 0 ? void 0 : onEntering(appearing);\n        var _a = getElementSizing(nodeRef.current),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n        var duration = appearing ? transitionTimeout.appear : transitionTimeout.enter;\n        setStyle({\n          maxHeight: maxHeight,\n          paddingTop: paddingTop,\n          paddingBottom: paddingBottom,\n          transitionDuration: \"\".concat(duration, \"ms\")\n        });\n      },\n      onEntered: function (appearing) {\n        onEntered === null || onEntered === void 0 ? void 0 : onEntered(appearing);\n        setStyle(undefined);\n      },\n      onExit: function () {\n        onExit === null || onExit === void 0 ? void 0 : onExit();\n        var _a = getElementSizing(nodeRef.current),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n        setStyle({\n          maxHeight: maxHeight,\n          paddingTop: paddingTop,\n          paddingBottom: paddingBottom,\n          transitionDuration: \"\".concat(transitionTimeout.exit, \"ms\")\n        });\n      },\n      onExiting: function () {\n        onExiting === null || onExiting === void 0 ? void 0 : onExiting();\n        setStyle({\n          maxHeight: minHeight,\n          paddingTop: minPaddingTop,\n          paddingBottom: minPaddingBottom,\n          transitionDuration: \"\".concat(transitionTimeout.exit, \"ms\")\n        });\n      },\n      onExited: function () {\n        onExited === null || onExited === void 0 ? void 0 : onExited();\n        setStyle({\n          maxHeight: minHeight,\n          paddingTop: minPaddingTop,\n          paddingBottom: minPaddingBottom\n        });\n      }\n    }),\n    appearing = _m.appearing,\n    rendered = _m.rendered,\n    ref = _m.ref,\n    stage = _m.stage,\n    transitionTo = _m.transitionTo;\n  var entering = stage === \"enter\" || stage === \"entering\";\n  var exiting = stage === \"exit\" || stage === \"exiting\";\n  var collapsible = transitionTimeout.enter !== 0 || transitionTimeout.exit !== 0;\n  var elementProps = {\n    ref: ref,\n    style: __assign(__assign({}, style), propStyle),\n    className: cn({\n      \"rmd-collapse\": collapsible,\n      \"rmd-collapse--enter\": entering,\n      \"rmd-collapse--leave\": exiting,\n      \"rmd-collapse--no-overflow\": !transitionIn || style\n    }, className) || undefined,\n    hidden: !transitionIn && rendered && stage === \"exited\" && !temporary && minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0\n  };\n  return __assign(__assign({}, elementProps), {\n    stage: stage,\n    rendered: rendered,\n    appearing: appearing,\n    elementProps: elementProps,\n    transitionTo: transitionTo\n  });\n}","map":{"version":3,"names":["useState","cn","useEnsuredRef","useTransition","getElementSizing","getTransitionTimeout","DEFAULT_COLLAPSE_MIN_HEIGHT","DEFAULT_COLLAPSE_MIN_PADDING_TOP","DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM","DEFAULT_COLLAPSE_TIMEOUT","enter","exit","useCollapseTransition","_a","propNodeRef","nodeRef","propStyle","style","className","transitionIn","_b","timeout","_c","minHeight","_d","minPaddingTop","_e","minPaddingBottom","_f","temporary","_g","appear","_h","_j","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_k","__read","refCallback","_l","undefined","maxHeight","paddingTop","paddingBottom","setStyle","transitionTimeout","_m","reflow","appearing","current","duration","transitionDuration","concat","rendered","ref","stage","transitionTo","entering","exiting","collapsible","elementProps","__assign","hidden"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\transition\\src\\useCollapseTransition.ts"],"sourcesContent":["import type { CSSProperties } from \"react\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useEnsuredRef } from \"@react-md/utils\";\n\nimport type {\n  CSSTransitionElementProps,\n  CSSTransitionHookReturnValue,\n  PreconfiguredCSSTransitionOptions,\n  TransitionTimeout,\n  TransitionTimeoutObject,\n} from \"./types\";\nimport { useTransition } from \"./useTransition\";\nimport { getElementSizing, getTransitionTimeout } from \"./utils\";\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_HEIGHT = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_PADDING_TOP = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_TIMEOUT: Readonly<TransitionTimeoutObject> = {\n  enter: 250,\n  exit: 200,\n};\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseConfigurationStyle {\n  /**\n   * The minimum height that the collapsed element can be which defaults to `0`.\n   * This can either be a number of pixels or a string CSS height value.\n   *\n   * Setting this value to any non-zero value will allow for the element to\n   * shrink to the defined min-height, and then expand to the full height once\n   * no longer collapsed.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_HEIGHT}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_HEIGHT`\n   */\n  minHeight?: number | string;\n\n  /**\n   * The minimum padding-top that the collapsed element can be which defaults to\n   * `0`. This can either be a number of pixels or a string CSS `padding-top`\n   * value.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_PADDING_TOP}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_PADDING_TOP`\n   */\n  minPaddingTop?: number | string;\n\n  /**\n   * The minimum padding-bottom that the collapsed element can be which defaults\n   * to `0`. This can either be a number of pixels or a string CSS\n   * `padding-bottom` value.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM`\n   */\n  minPaddingBottom?: number | string;\n}\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseStyle extends CollapseConfigurationStyle {\n  /**\n   * This will only be set when the {@link TransitionStage} is `\"entering\"` or\n   * `\"exiting\"` as `\"${timeout}ms\"`.\n   */\n  transitionDuration?: string;\n}\n\n/**\n * These props (and `ref`) **must** be passed to a DOM element for the collapse\n * transition to work.\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseElementProps<E extends HTMLElement>\n  extends CSSTransitionElementProps<E> {\n  /**\n   * A merged styled object required for the collapse transition to work.\n   *\n   * @see {@link CollapseStyle}\n   * @see {@link CollapseTransitionHookOptions.style}\n   */\n  style: CSSProperties;\n\n  /**\n   * This will be set to true when the element is fully collapsed and the\n   * {@link CollapseTransitionHookOptions.temporary} is set to `false`. This\n   * should be applied as the `hidden` attribute to a DOM node.\n   */\n  hidden: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseTransitionHookOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionOptions<E>,\n    CollapseConfigurationStyle {\n  /**\n   * An optional style to merge with the required collapse transition styles.\n   *\n   * If any keys from the {@link CollapseStyle} are included in this object,\n   * these styles will override and possibly break the collapse transition.\n   */\n  style?: CSSProperties;\n\n  /**\n   *\n   * @see {@link DEFAULT_COLLAPSE_TIMEOUT}\n   * @defaultValue `DEFAULT_COLLAPSE_TIMEOUT`\n   */\n  timeout?: TransitionTimeout;\n\n  /**\n   *\n   * @defaultValue `minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0`\n   */\n  temporary?: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseTransitionHookReturnValue<E extends HTMLElement>\n  extends CSSTransitionHookReturnValue<E>,\n    CollapseElementProps<E> {\n  /**\n   * This is just a convenience object so that you don't need to destructure as\n   * many variables to pass to an element.\n   *\n   * @example\n   * Simple Usage\n   * ```tsx\n   * const { elementProps, rendered } = useCollapseTransition({\n   *   // ...options\n   *   transitionIn,\n   * });\n   *\n   * if (!rendered) {\n   *   return null\n   * }\n   *\n   * return <div {...elementProps}>{children}</div>;\n   *\n   * // This is the long-hand version\n   * const { ref, style, className, hidden, rendered } = useCollapseTransition({\n   *   // ...options\n   *   transitionIn,\n   * });\n   *\n   * if (!rendered) {\n   *   return null\n   * }\n   *\n   * return (\n   *   <div\n   *     ref={ref}\n   *     style={style}\n   *     className={className}\n   *     hidden={hidden}\n   *   >\n   *     {children}\n   *   </div>\n   * );\n   * ```\n   */\n  elementProps: Readonly<CollapseElementProps<E>>;\n}\n\n/**\n * This hook is used to create a transition to collapse and expand an element\n * **inline** with other content like an accordion by animating the\n * `max-height`, `padding-top`, and `padding-bottom` CSS properties. The default\n * behavior is to hide the element completely while collapsed, but providing the\n * `minHeight`, `minPaddingTop`, and `minPaddingBottom` options can make this\n * work like a \"See More\"/\"Preview\" type of element\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps, rendered } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       // If the collapsible element should maintain state by not unmounting\n *       // while collapsed, uncomment this next line\n *       // temporary: false,\n *     });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps}>\n *           <Typography>Stuff that should be collapsed</Typography>\n *           <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * See More Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { IconRotator } from \"@react-md/icon\";\n * import { KeyboardArrowDownSVGIcon } from \"@react-md/material-icons\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * import styles from \"./Example.module.scss\";\n * // pretend styles:\n * //\n * // .container {\n * //   padding: 1rem;\n * //   position: relative;\n * // }\n * //\n * // .button {\n * //   position: absolute;\n * //   right: 0;\n * //   top: 0;\n * // }\n *\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       minHeight: 120,\n *       minPaddingTop: 16,\n *       className: styles.container,\n *     });\n *\n *   return (\n *     <div {...elementProps}>\n *       <Button\n *         aria-expanded={!collapsed}\n *         aria-label=\"Expand\"\n *         onClick={() => setCollapsed(!collapsed)}\n *         buttonType=\"icon\"\n *         className={styles.button}\n *       >\n *         <IconRotator rotated={!collapsed}>\n *           <KeyboardArrowDownSVGIcon />\n *         </IconRotator>\n *       </Button>\n *       <SomeComponentWithALotOfContent />\n *     </div>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCollapseTransition<E extends HTMLElement>({\n  nodeRef: propNodeRef,\n  style: propStyle,\n  className,\n  transitionIn,\n  timeout = DEFAULT_COLLAPSE_TIMEOUT,\n  minHeight = DEFAULT_COLLAPSE_MIN_HEIGHT,\n  minPaddingTop = DEFAULT_COLLAPSE_MIN_PADDING_TOP,\n  minPaddingBottom = DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM,\n  temporary = minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0,\n  appear = false,\n  enter = true,\n  exit = true,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n}: CollapseTransitionHookOptions<E>): CollapseTransitionHookReturnValue<E> {\n  const [nodeRef, refCallback] = useEnsuredRef(propNodeRef);\n  const [style, setStyle] = useState<CSSProperties | undefined>(() => {\n    if (transitionIn) {\n      return undefined;\n    }\n\n    return {\n      maxHeight: minHeight,\n      paddingTop: minPaddingTop,\n      paddingBottom: minPaddingBottom,\n    };\n  });\n\n  const transitionTimeout = getTransitionTimeout({\n    timeout,\n    appear,\n    enter,\n    exit,\n  });\n\n  const { appearing, rendered, ref, stage, transitionTo } = useTransition({\n    nodeRef: refCallback,\n    timeout,\n    transitionIn,\n    reflow: true,\n    appear,\n    enter,\n    exit,\n    temporary,\n    onEnter(appearing) {\n      onEnter?.(appearing);\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n      });\n    },\n    onEntering(appearing) {\n      onEntering?.(appearing);\n      const { maxHeight, paddingTop, paddingBottom } = getElementSizing(\n        nodeRef.current\n      );\n\n      const duration = appearing\n        ? transitionTimeout.appear\n        : transitionTimeout.enter;\n\n      setStyle({\n        maxHeight,\n        paddingTop,\n        paddingBottom,\n        transitionDuration: `${duration}ms`,\n      });\n    },\n    onEntered(appearing) {\n      onEntered?.(appearing);\n      setStyle(undefined);\n    },\n    onExit() {\n      onExit?.();\n      const { maxHeight, paddingTop, paddingBottom } = getElementSizing(\n        nodeRef.current\n      );\n\n      setStyle({\n        maxHeight,\n        paddingTop,\n        paddingBottom,\n        transitionDuration: `${transitionTimeout.exit}ms`,\n      });\n    },\n    onExiting() {\n      onExiting?.();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n        transitionDuration: `${transitionTimeout.exit}ms`,\n      });\n    },\n    onExited() {\n      onExited?.();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n      });\n    },\n  });\n  const entering = stage === \"enter\" || stage === \"entering\";\n  const exiting = stage === \"exit\" || stage === \"exiting\";\n  const collapsible =\n    transitionTimeout.enter !== 0 || transitionTimeout.exit !== 0;\n\n  const elementProps: CollapseElementProps<E> = {\n    ref,\n    style: { ...style, ...propStyle },\n    className:\n      cn(\n        {\n          \"rmd-collapse\": collapsible,\n          \"rmd-collapse--enter\": entering,\n          \"rmd-collapse--leave\": exiting,\n          \"rmd-collapse--no-overflow\": !transitionIn || style,\n        },\n        className\n      ) || undefined,\n    hidden:\n      !transitionIn &&\n      rendered &&\n      stage === \"exited\" &&\n      !temporary &&\n      minHeight === 0 &&\n      minPaddingTop === 0 &&\n      minPaddingBottom === 0,\n  };\n\n  return {\n    ...elementProps,\n    stage,\n    rendered,\n    appearing,\n    elementProps,\n    transitionTo,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}