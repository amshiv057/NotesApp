{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from \"react\";\nimport { AddMessageContext, MessageQueueActionsContext, MessageQueueContext, MessageVisibilityContext } from \"./MessageQueueContext\";\nimport { SnackbarQueue } from \"./SnackbarQueue\";\nimport { useMessageQueue } from \"./useMessageQueue\";\n/**\n * This component is used to be able to create a queue of messages with the\n * `Snackbar` and `Toast` components with a _fairly_ decent API out of the box.\n */\nexport function MessageQueue(_a) {\n  var _b = _a.timeout,\n    timeout = _b === void 0 ? 5000 : _b,\n    _c = _a.duplicates,\n    duplicates = _c === void 0 ? \"allow\" : _c,\n    _d = _a.defaultQueue,\n    defaultQueue = _d === void 0 ? [] : _d,\n    children = _a.children,\n    props = __rest(_a, [\"timeout\", \"duplicates\", \"defaultQueue\", \"children\"]);\n  var _e = useMessageQueue({\n      timeout: timeout,\n      duplicates: duplicates,\n      defaultQueue: defaultQueue\n    }),\n    queue = _e.queue,\n    visible = _e.visible,\n    hideMessage = _e.hideMessage,\n    startTimer = _e.startTimer,\n    stopTimer = _e.stopTimer,\n    restartTimer = _e.restartTimer,\n    addMessage = _e.addMessage,\n    popMessage = _e.popMessage,\n    resetQueue = _e.resetQueue;\n  var actions = useMemo(function () {\n    return {\n      popMessage: popMessage,\n      hideMessage: hideMessage,\n      startTimer: startTimer,\n      stopTimer: stopTimer,\n      resetQueue: resetQueue,\n      restartTimer: restartTimer\n    };\n  }, [popMessage, hideMessage, startTimer, stopTimer, restartTimer, resetQueue]);\n  return _jsx(AddMessageContext.Provider, __assign({\n    value: addMessage\n  }, {\n    children: _jsx(MessageQueueActionsContext.Provider, __assign({\n      value: actions\n    }, {\n      children: _jsxs(MessageVisibilityContext.Provider, __assign({\n        value: visible\n      }, {\n        children: [_jsx(MessageQueueContext.Provider, __assign({\n          value: queue\n        }, {\n          children: children\n        })), _jsx(SnackbarQueue, __assign({}, props, {\n          queue: queue\n        }))]\n      }))\n    }))\n  }));\n}","map":{"version":3,"names":["useMemo","AddMessageContext","MessageQueueActionsContext","MessageQueueContext","MessageVisibilityContext","SnackbarQueue","useMessageQueue","MessageQueue","_a","_b","timeout","_c","duplicates","_d","defaultQueue","children","props","__rest","_e","queue","visible","hideMessage","startTimer","stopTimer","restartTimer","addMessage","popMessage","resetQueue","actions","_jsx","Provider","__assign","value","_jsxs"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\alert\\src\\MessageQueue.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useMemo } from \"react\";\n\nimport type { AddMessage, Message, ToastMessage } from \"./MessageQueueContext\";\nimport {\n  AddMessageContext,\n  MessageQueueActionsContext,\n  MessageQueueContext,\n  MessageVisibilityContext,\n} from \"./MessageQueueContext\";\nimport type { SnackbarProps } from \"./Snackbar\";\nimport type { ActionEventHandler } from \"./SnackbarQueue\";\nimport { SnackbarQueue } from \"./SnackbarQueue\";\nimport type { MessageQueueOptions } from \"./useMessageQueue\";\nimport { useMessageQueue } from \"./useMessageQueue\";\n\nexport interface MessageQueueProps<M extends ToastMessage>\n  extends MessageQueueOptions<M>,\n    SnackbarProps {\n  /**\n   * The children are required in this component since the message queue relies\n   * on setting up React Context and provide hooks to add a message to the\n   * queue. If there are no children, the message queue will not work.\n   */\n  children: ReactNode;\n\n  /**\n   * An optional function to call when the action button is clicked. This will\n   * be applied to **all** toasts that appear in this message queue. You will\n   * be provided the current message followed by the click event.\n   */\n  onActionClick?: ActionEventHandler<M>;\n}\n\n/**\n * This component is used to be able to create a queue of messages with the\n * `Snackbar` and `Toast` components with a _fairly_ decent API out of the box.\n */\nexport function MessageQueue<M extends ToastMessage = ToastMessage>({\n  timeout = 5000,\n  duplicates = \"allow\",\n  defaultQueue = [],\n  children,\n  ...props\n}: MessageQueueProps<M>): ReactElement {\n  const {\n    queue,\n    visible,\n    hideMessage,\n    startTimer,\n    stopTimer,\n    restartTimer,\n    addMessage,\n    popMessage,\n    resetQueue,\n  } = useMessageQueue<M>({ timeout, duplicates, defaultQueue });\n  const actions = useMemo(\n    () => ({\n      popMessage,\n      hideMessage,\n      startTimer,\n      stopTimer,\n      resetQueue,\n      restartTimer,\n    }),\n    [popMessage, hideMessage, startTimer, stopTimer, restartTimer, resetQueue]\n  );\n\n  return (\n    <AddMessageContext.Provider value={addMessage as AddMessage<Message>}>\n      <MessageQueueActionsContext.Provider value={actions}>\n        <MessageVisibilityContext.Provider value={visible}>\n          <MessageQueueContext.Provider value={queue}>\n            {children}\n          </MessageQueueContext.Provider>\n          <SnackbarQueue {...props} queue={queue} />\n        </MessageVisibilityContext.Provider>\n      </MessageQueueActionsContext.Provider>\n    </AddMessageContext.Provider>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,OAAO,QAAQ,OAAO;AAG/B,SACEC,iBAAiB,EACjBC,0BAA0B,EAC1BC,mBAAmB,EACnBC,wBAAwB,QACnB,uBAAuB;AAG9B,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,eAAe,QAAQ,mBAAmB;AAoBnD;;;;AAIA,OAAM,SAAUC,YAAYA,CAAwCC,EAM7C;EALrB,IAAAC,EAAA,GAAAD,EAAA,CAAAE,OAAc;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACdE,EAAA,GAAAH,EAAA,CAAAI,UAAoB;IAApBA,UAAU,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA;IACpBE,EAAA,GAAAL,EAAA,CAAAM,YAAiB;IAAjBA,YAAY,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACjBE,QAAQ,GAAAP,EAAA,CAAAO,QAAA;IACLC,KAAK,GAAAC,MAAA,CAAAT,EAAA,EAL0D,qDAMnE,CADS;EAEF,IAAAU,EAAA,GAUFZ,eAAe,CAAI;MAAEI,OAAO,EAAAA,OAAA;MAAEE,UAAU,EAAAA,UAAA;MAAEE,YAAY,EAAAA;IAAA,CAAE,CAAC;IAT3DK,KAAK,GAAAD,EAAA,CAAAC,KAAA;IACLC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IACPC,WAAW,GAAAH,EAAA,CAAAG,WAAA;IACXC,UAAU,GAAAJ,EAAA,CAAAI,UAAA;IACVC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IACTC,YAAY,GAAAN,EAAA,CAAAM,YAAA;IACZC,UAAU,GAAAP,EAAA,CAAAO,UAAA;IACVC,UAAU,GAAAR,EAAA,CAAAQ,UAAA;IACVC,UAAU,GAAAT,EAAA,CAAAS,UACiD;EAC7D,IAAMC,OAAO,GAAG5B,OAAO,CACrB;IAAM,OAAC;MACL0B,UAAU,EAAAA,UAAA;MACVL,WAAW,EAAAA,WAAA;MACXC,UAAU,EAAAA,UAAA;MACVC,SAAS,EAAAA,SAAA;MACTI,UAAU,EAAAA,UAAA;MACVH,YAAY,EAAAA;KACb;EAPK,CAOJ,EACF,CAACE,UAAU,EAAEL,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,YAAY,EAAEG,UAAU,CAAC,CAC3E;EAED,OACEE,IAAA,CAAC5B,iBAAiB,CAAC6B,QAAQ,EAAAC,QAAA;IAACC,KAAK,EAAEP;EAAiC;IAAAV,QAAA,EAClEc,IAAA,CAAC3B,0BAA0B,CAAC4B,QAAQ,EAAAC,QAAA;MAACC,KAAK,EAAEJ;IAAO;MAAAb,QAAA,EACjDkB,KAAA,CAAC7B,wBAAwB,CAAC0B,QAAQ,EAAAC,QAAA;QAACC,KAAK,EAAEZ;MAAO;QAAAL,QAAA,GAC/Cc,IAAA,CAAC1B,mBAAmB,CAAC2B,QAAQ,EAAAC,QAAA;UAACC,KAAK,EAAEb;QAAK;UAAAJ,QAAA,EACvCA;QAAQ,GACoB,EAC/Bc,IAAA,CAACxB,aAAa,EAAA0B,QAAA,KAAKf,KAAK;UAAEG,KAAK,EAAEA;QAAK,GAAI;MAAA;IACR;EACA,GACX;AAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}