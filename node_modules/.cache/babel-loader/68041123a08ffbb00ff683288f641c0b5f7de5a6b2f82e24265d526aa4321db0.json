{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-link\");\n/**\n * The `Link` component is used to render links within your app with a basic\n * styles applied and some additional \"security\" built-in if using the\n * `rel=\"_blank\"`. This can be used with a browser routing library like\n * `react-router` or `reach-router` by providing the `Link` as the\n * `linkComponent` prop.\n */\nexport var Link = forwardRef(function Link(_a, ref) {\n  var propClassName = _a.className,\n    _b = _a.component,\n    Component = _b === void 0 ? \"a\" : _b,\n    propHref = _a.href,\n    children = _a.children,\n    propRel = _a.rel,\n    _c = _a.flexCentered,\n    flexCentered = _c === void 0 ? false : _c,\n    _d = _a.preventMaliciousTarget,\n    preventMaliciousTarget = _d === void 0 ? true : _d,\n    props = __rest(_a, [\"className\", \"component\", \"href\", \"children\", \"rel\", \"flexCentered\", \"preventMaliciousTarget\"]);\n  var target = props.target;\n  var href = propHref === \"\" ? undefined : propHref;\n  var className = cn(block({\n    \"flex-centered\": flexCentered\n  }), propClassName);\n  var rel = propRel;\n  if (preventMaliciousTarget && typeof rel !== \"string\" && target === \"_blank\") {\n    rel = \"noopener noreferrer\";\n  }\n  return _jsx(Component, __assign({}, props, {\n    className: className,\n    ref: ref,\n    rel: rel,\n    href: href\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","bem","block","Link","_a","ref","propClassName","className","_b","component","Component","propHref","href","children","propRel","rel","_c","flexCentered","_d","preventMaliciousTarget","props","__rest","target","undefined","_jsx","__assign"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\link\\src\\Link.tsx"],"sourcesContent":["import type { AnchorHTMLAttributes, ElementType } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface LinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  /**\n   * An optional component to render as. This should really only be used if you\n   * are using a router library like\n   * {@link https://github.com/ReactTraining/react-router|react-router} or\n   * {@link https://github.com/reach/router|@reach/router}. This will call\n   * `createElement` with this value and provide all props and class name.\n   */\n  component?: ElementType;\n\n  /**\n   * An optional href to apply to the link. If this value is set to the empty\n   * string and the `component` prop is not provided, the link will basically be\n   * disabled.\n   */\n  href?: string;\n\n  /**\n   * An optional target for the link to be opened in. It is recommended to keep\n   * this undefined in most cases. If this is not `_blank`, `_parent`, `_self`,\n   * or `_top`, it should be the frame name that the link should be rendered in\n   * if using frames.\n   */\n  target?: \"_blank\" | \"_parent\" | \"_self\" | \"_top\" | string;\n\n  /**\n   * An optional `rel` to apply to the link. This should be a combination of 1\n   * to many of:\n   * - \"alternate\"\n   * - \"author\"\n   * - \"bookmark\"\n   * - \"external\"\n   * - \"help\"\n   * - \"license\"\n   * - \"next\"\n   * - \"nofollow\"\n   * - \"noreferrer\"\n   * - \"noopener\"\n   * - \"prev\"\n   * - \"search\"\n   * - \"tag\"\n   *\n   * This is really just used to override the default behavior of the\n   * `preventMaliciousTarget` prop.\n   */\n  rel?: string;\n\n  /**\n   * Boolean if the link should automatically be updated to apply\n   * `rel=noopener noreferrer` when the `target` prop is set to `\"_blank\"`. This\n   * is recommended to have enabled by default, but can be disabled by setting\n   * this prop to `false` or specifying a `rel` prop yourself. You can read\n   * more about the reason for this\n   * {@link https://mathiasbynens.github.io/rel-noopener/|here}.\n   */\n  preventMaliciousTarget?: boolean;\n\n  /**\n   * Boolean if the Link should be positioned with a flexbox and align the items\n   * centered. This is disabled by default but can be useful when rendering\n   * icons within the link.\n   */\n  flexCentered?: boolean;\n}\n\nexport interface LinkWithComponentProps extends LinkProps {\n  /**\n   * I'm not really sure of a good way to implement this, but when the\n   * `component` prop is provided, all valid props from that component should\n   * also be allowed.\n   */\n  [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  component: ElementType;\n}\n\nconst block = bem(\"rmd-link\");\n\n/**\n * The `Link` component is used to render links within your app with a basic\n * styles applied and some additional \"security\" built-in if using the\n * `rel=\"_blank\"`. This can be used with a browser routing library like\n * `react-router` or `reach-router` by providing the `Link` as the\n * `linkComponent` prop.\n */\nexport const Link = forwardRef<\n  HTMLAnchorElement | ElementType,\n  LinkProps | LinkWithComponentProps\n>(function Link(\n  {\n    className: propClassName,\n    component: Component = \"a\",\n    href: propHref,\n    children,\n    rel: propRel,\n    flexCentered = false,\n    preventMaliciousTarget = true,\n    ...props\n  },\n  ref\n) {\n  const { target } = props;\n  const href = propHref === \"\" ? undefined : propHref;\n  const className = cn(block({ \"flex-centered\": flexCentered }), propClassName);\n\n  let rel = propRel;\n  if (\n    preventMaliciousTarget &&\n    typeof rel !== \"string\" &&\n    target === \"_blank\"\n  ) {\n    rel = \"noopener noreferrer\";\n  }\n\n  return (\n    <Component {...props} className={className} ref={ref} rel={rel} href={href}>\n      {children}\n    </Component>\n  );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AA6ErC,IAAMC,KAAK,GAAGD,GAAG,CAAC,UAAU,CAAC;AAE7B;;;;;;;AAOA,OAAO,IAAME,IAAI,GAAGJ,UAAU,CAG5B,SAASI,IAAIA,CACbC,EASC,EACDC,GAAG;EATD,IAAWC,aAAa,GAAAF,EAAA,CAAAG,SAAA;IACxBC,EAAA,GAAAJ,EAAA,CAAAK,SAA0B;IAAfC,SAAS,GAAAF,EAAA,cAAG,GAAG,GAAAA,EAAA;IACpBG,QAAQ,GAAAP,EAAA,CAAAQ,IAAA;IACdC,QAAQ,GAAAT,EAAA,CAAAS,QAAA;IACHC,OAAO,GAAAV,EAAA,CAAAW,GAAA;IACZC,EAAA,GAAAZ,EAAA,CAAAa,YAAoB;IAApBA,YAAY,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACpBE,EAAA,GAAAd,EAAA,CAAAe,sBAA6B;IAA7BA,sBAAsB,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAC1BE,KAAK,GAAAC,MAAA,CAAAjB,EAAA,EARV,+FASC,CADS;EAIF,IAAAkB,MAAM,GAAKF,KAAK,CAAAE,MAAV;EACd,IAAMV,IAAI,GAAGD,QAAQ,KAAK,EAAE,GAAGY,SAAS,GAAGZ,QAAQ;EACnD,IAAMJ,SAAS,GAAGP,EAAE,CAACE,KAAK,CAAC;IAAE,eAAe,EAAEe;EAAY,CAAE,CAAC,EAAEX,aAAa,CAAC;EAE7E,IAAIS,GAAG,GAAGD,OAAO;EACjB,IACEK,sBAAsB,IACtB,OAAOJ,GAAG,KAAK,QAAQ,IACvBO,MAAM,KAAK,QAAQ,EACnB;IACAP,GAAG,GAAG,qBAAqB;;EAG7B,OACES,IAAA,CAACd,SAAS,EAAAe,QAAA,KAAKL,KAAK;IAAEb,SAAS,EAAEA,SAAS;IAAEF,GAAG,EAAEA,GAAG;IAAEU,GAAG,EAAEA,GAAG;IAAEH,IAAI,EAAEA;EAAI;IAAAC,QAAA,EACvEA;EAAQ,GACC;AAEhB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}