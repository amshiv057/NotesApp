{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\nvar context = createContext({\n  theme: \"outline\",\n  underlineDirection: \"left\"\n});\n/**\n * Gets the current theme values for a form component by inheriting the current\n * form theme via context. If you provide an object of theme props, the returned\n * value will use any defined values from the theme props and fallback to the\n * context value.\n *\n * Example:\n * ```ts\n * // everything is inherited\n * const formTheme = useFormTheme();\n *\n * // theme will be set to \"underline\" while the others will be inherited\n * const formTheme = useFormTheme({ theme: \"underline\" });\n * ```\n */\nexport function useFormTheme(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var formTheme = useContext(context);\n  var theme = options.theme,\n    underlineDirection = options.underlineDirection;\n  theme = theme !== null && theme !== void 0 ? theme : formTheme.theme;\n  underlineDirection = underlineDirection !== null && underlineDirection !== void 0 ? underlineDirection : formTheme.underlineDirection;\n  return {\n    theme: theme,\n    underlineDirection: underlineDirection\n  };\n}\nvar Provider = context.Provider;\n/**\n * Since you'll normally want all of your form components to use the same theme,\n * this is a simple way to provide the same theme to all components without\n * needing all the prop-drilling/copying.\n */\nexport function FormThemeProvider(_a) {\n  var _b = _a.theme,\n    theme = _b === void 0 ? \"outline\" : _b,\n    _c = _a.underlineDirection,\n    underlineDirection = _c === void 0 ? \"left\" : _c,\n    children = _a.children;\n  var value = useMemo(function () {\n    return {\n      theme: theme,\n      underlineDirection: underlineDirection\n    };\n  }, [theme, underlineDirection]);\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"names":["createContext","useContext","useMemo","context","theme","underlineDirection","useFormTheme","options","formTheme","Provider","FormThemeProvider","_a","_b","_c","children","value","_jsx","__assign"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\FormThemeProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\n\n/**\n * The supported themes for the `TextField`, `TextArea`, and `Select`\n * components.\n *\n * - \"none\" - display as an unstyled text field without any border or background\n *   colors.\n * - \"underline\" - display with only an underline that gains the form active\n *   color and animates from the left or right to the other side when the field\n *   is focused.\n * - \"filled\" - an extension of the `\"underline\"` state that will also have a\n *   slightly dark background applied.\n * - \"outline\" - outlines the entire text field in a border and applies the\n *   active color as box shadow when the field is focused.\n */\nexport type FormTheme = \"none\" | \"underline\" | \"filled\" | \"outline\";\n\n/**\n * The direction that the underline should appear from when the theme is\n * `\"underline\"` or `\"filled\"`.\n */\nexport type FormUnderlineDirection = \"left\" | \"center\" | \"right\";\n\nexport interface FormThemeOptions {\n  /**\n   * The current theme type.\n   */\n  theme?: FormTheme;\n\n  /**\n   * The current underline direction.\n   */\n  underlineDirection?: FormUnderlineDirection;\n}\n\nexport type FormThemeContext = Required<FormThemeOptions>;\n\nconst context = createContext<FormThemeContext>({\n  theme: \"outline\",\n  underlineDirection: \"left\",\n});\n\n/**\n * Gets the current theme values for a form component by inheriting the current\n * form theme via context. If you provide an object of theme props, the returned\n * value will use any defined values from the theme props and fallback to the\n * context value.\n *\n * Example:\n * ```ts\n * // everything is inherited\n * const formTheme = useFormTheme();\n *\n * // theme will be set to \"underline\" while the others will be inherited\n * const formTheme = useFormTheme({ theme: \"underline\" });\n * ```\n */\nexport function useFormTheme(options: FormThemeOptions = {}): FormThemeContext {\n  const formTheme = useContext(context);\n  let { theme, underlineDirection } = options;\n  theme = theme ?? formTheme.theme;\n  underlineDirection = underlineDirection ?? formTheme.underlineDirection;\n\n  return {\n    theme,\n    underlineDirection,\n  };\n}\n\nconst { Provider } = context;\n\nexport interface FormThemeProviderProps extends FormThemeOptions {\n  children: ReactNode;\n}\n\n/**\n * Since you'll normally want all of your form components to use the same theme,\n * this is a simple way to provide the same theme to all components without\n * needing all the prop-drilling/copying.\n */\nexport function FormThemeProvider({\n  theme = \"outline\",\n  underlineDirection = \"left\",\n  children,\n}: FormThemeProviderProps): ReactElement {\n  const value = useMemo(\n    () => ({ theme, underlineDirection }),\n    [theme, underlineDirection]\n  );\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"],"mappings":";;;;;;;;;;;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAsC1D,IAAMC,OAAO,GAAGH,aAAa,CAAmB;EAC9CI,KAAK,EAAE,SAAS;EAChBC,kBAAkB,EAAE;CACrB,CAAC;AAEF;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,YAAYA,CAACC,OAA8B;EAA9B,IAAAA,OAAA;IAAAA,OAAA,KAA8B;EAAA;EACzD,IAAMC,SAAS,GAAGP,UAAU,CAACE,OAAO,CAAC;EAC/B,IAAAC,KAAK,GAAyBG,OAAO,CAAAH,KAAhC;IAAEC,kBAAkB,GAAKE,OAAO,CAAAF,kBAAZ;EAC/BD,KAAK,GAAGA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAII,SAAS,CAACJ,KAAK;EAChCC,kBAAkB,GAAGA,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAIG,SAAS,CAACH,kBAAkB;EAEvE,OAAO;IACLD,KAAK,EAAAA,KAAA;IACLC,kBAAkB,EAAAA;GACnB;AACH;AAEQ,IAAAI,QAAQ,GAAKN,OAAO,CAAAM,QAAZ;AAMhB;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAACC,EAIT;MAHvBC,EAAA,GAAAD,EAAA,CAAAP,KAAiB;IAAjBA,KAAK,GAAAQ,EAAA,cAAG,SAAS,GAAAA,EAAA;IACjBC,EAAA,GAAAF,EAAA,CAAAN,kBAA2B;IAA3BA,kBAAkB,GAAAQ,EAAA,cAAG,MAAM,GAAAA,EAAA;IAC3BC,QAAQ,GAAAH,EAAA,CAAAG,QAAA;EAER,IAAMC,KAAK,GAAGb,OAAO,CACnB;IAAM,OAAC;MAAEE,KAAK,EAAAA,KAAA;MAAEC,kBAAkB,EAAAA;IAAA,CAAE;EAA9B,CAA+B,EACrC,CAACD,KAAK,EAAEC,kBAAkB,CAAC,CAC5B;EAED,OAAOW,IAAA,CAACP,QAAQ,EAAAQ,QAAA;IAACF,KAAK,EAAEA;EAAK;IAAAD,QAAA,EAAGA;EAAQ,GAAY;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}