{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * A small hook that can be used for controlling the state of a single Checkbox\n * component.\n *\n * @param defaultChecked - Boolean if the input should be checked by default.\n * Changing this value will not update the state after initial render.\n * @param onChange - An optional change event handler to also call when the\n * checked state changes.\n * @returns a list containing the checked state, a change event handler, and\n * then a manual set checked action.\n */\nexport function useChecked(defaultChecked, onChange) {\n  var _a = __read(useState(defaultChecked), 2),\n    checked = _a[0],\n    setChecked = _a[1];\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n    setChecked(event.currentTarget.checked);\n  }, [onChange]);\n  return [checked, handleChange, setChecked];\n}","map":{"version":3,"names":["useCallback","useState","useChecked","defaultChecked","onChange","_a","__read","checked","setChecked","handleChange","event","currentTarget"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\toggle\\useChecked.ts"],"sourcesContent":["import type { Dispatch, SetStateAction } from \"react\";\nimport { useCallback, useState } from \"react\";\n\ntype ChangeEventHandler = React.ChangeEventHandler<HTMLInputElement>;\ntype SetChecked = Dispatch<SetStateAction<boolean>>;\n\n/**\n * A small hook that can be used for controlling the state of a single Checkbox\n * component.\n *\n * @param defaultChecked - Boolean if the input should be checked by default.\n * Changing this value will not update the state after initial render.\n * @param onChange - An optional change event handler to also call when the\n * checked state changes.\n * @returns a list containing the checked state, a change event handler, and\n * then a manual set checked action.\n */\nexport function useChecked(\n  defaultChecked: boolean | (() => boolean),\n  onChange?: ChangeEventHandler\n): [boolean, ChangeEventHandler, SetChecked] {\n  const [checked, setChecked] = useState(defaultChecked);\n\n  const handleChange = useCallback<ChangeEventHandler>(\n    (event) => {\n      if (onChange) {\n        onChange(event);\n      }\n\n      setChecked(event.currentTarget.checked);\n    },\n    [onChange]\n  );\n\n  return [checked, handleChange, setChecked];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAK7C;;;;;;;;;;;AAWA,OAAM,SAAUC,UAAUA,CACxBC,cAAyC,EACzCC,QAA6B;EAEvB,IAAAC,EAAA,GAAAC,MAAA,CAAwBL,QAAQ,CAACE,cAAc,CAAC;IAA/CI,OAAO,GAAAF,EAAA;IAAEG,UAAU,GAAAH,EAAA,GAA4B;EAEtD,IAAMI,YAAY,GAAGT,WAAW,CAC9B,UAACU,KAAK;IACJ,IAAIN,QAAQ,EAAE;MACZA,QAAQ,CAACM,KAAK,CAAC;;IAGjBF,UAAU,CAACE,KAAK,CAACC,aAAa,CAACJ,OAAO,CAAC;EACzC,CAAC,EACD,CAACH,QAAQ,CAAC,CACX;EAED,OAAO,CAACG,OAAO,EAAEE,YAAY,EAAED,UAAU,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}