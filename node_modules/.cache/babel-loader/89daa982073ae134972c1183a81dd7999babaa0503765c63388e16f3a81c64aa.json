{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { List } from \"@react-md/list\";\nimport { useCollapseTransition } from \"@react-md/transition\";\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\nexport var TreeGroup = forwardRef(function TreeGroup(_a, nodeRef) {\n  var style = _a.style,\n    className = _a.className,\n    collapsed = _a.collapsed,\n    minHeight = _a.minHeight,\n    minPaddingBottom = _a.minPaddingBottom,\n    minPaddingTop = _a.minPaddingTop,\n    timeout = _a.timeout,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    children = _a.children,\n    temporary = _a.temporary,\n    props = __rest(_a, [\"style\", \"className\", \"collapsed\", \"minHeight\", \"minPaddingBottom\", \"minPaddingTop\", \"timeout\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"children\", \"temporary\"]);\n  var _b = useCollapseTransition({\n      style: style,\n      className: cn(\"rmd-tree-group\", className),\n      nodeRef: nodeRef,\n      minHeight: minHeight,\n      minPaddingBottom: minPaddingBottom,\n      minPaddingTop: minPaddingTop,\n      timeout: timeout,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      temporary: temporary,\n      transitionIn: !collapsed\n    }),\n    elementProps = _b.elementProps,\n    rendered = _b.rendered;\n  if (!rendered) {\n    return null;\n  }\n  return _jsx(List, __assign({}, props, elementProps, {\n    role: \"group\"\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","List","useCollapseTransition","TreeGroup","_a","nodeRef","style","className","collapsed","minHeight","minPaddingBottom","minPaddingTop","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited","children","temporary","props","__rest","_b","transitionIn","elementProps","rendered","_jsx","__assign","role"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\tree\\src\\TreeGroup.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ListElement, ListProps } from \"@react-md/list\";\nimport { List } from \"@react-md/list\";\nimport type { CollapseProps } from \"@react-md/transition\";\nimport { useCollapseTransition } from \"@react-md/transition\";\n\nexport interface TreeGroupProps\n  extends ListProps,\n    Omit<CollapseProps<ListElement>, \"children\"> {}\n\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\nexport const TreeGroup = forwardRef<ListElement, TreeGroupProps>(\n  function TreeGroup(\n    {\n      style,\n      className,\n      collapsed,\n      minHeight,\n      minPaddingBottom,\n      minPaddingTop,\n      timeout,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      children,\n      temporary,\n      ...props\n    },\n    nodeRef\n  ) {\n    const { elementProps, rendered } = useCollapseTransition({\n      style,\n      className: cn(\"rmd-tree-group\", className),\n      nodeRef,\n      minHeight,\n      minPaddingBottom,\n      minPaddingTop,\n      timeout,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      temporary,\n      transitionIn: !collapsed,\n    });\n\n    if (!rendered) {\n      return null;\n    }\n\n    return (\n      <List {...props} {...elementProps} role=\"group\">\n        {children}\n      </List>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,IAAI,QAAQ,gBAAgB;AAErC,SAASC,qBAAqB,QAAQ,sBAAsB;AAM5D;;;;;;AAMA,OAAO,IAAMC,SAAS,GAAGJ,UAAU,CACjC,SAASI,SAASA,CAChBC,EAiBC,EACDC,OAAO;EAjBL,IAAAC,KAAK,GAAAF,EAAA,CAAAE,KAAA;IACLC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IACTC,SAAS,GAAAJ,EAAA,CAAAI,SAAA;IACTC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IACTC,gBAAgB,GAAAN,EAAA,CAAAM,gBAAA;IAChBC,aAAa,GAAAP,EAAA,CAAAO,aAAA;IACbC,OAAO,GAAAR,EAAA,CAAAQ,OAAA;IACPC,OAAO,GAAAT,EAAA,CAAAS,OAAA;IACPC,UAAU,GAAAV,EAAA,CAAAU,UAAA;IACVC,SAAS,GAAAX,EAAA,CAAAW,SAAA;IACTC,MAAM,GAAAZ,EAAA,CAAAY,MAAA;IACNC,SAAS,GAAAb,EAAA,CAAAa,SAAA;IACTC,QAAQ,GAAAd,EAAA,CAAAc,QAAA;IACRC,QAAQ,GAAAf,EAAA,CAAAe,QAAA;IACRC,SAAS,GAAAhB,EAAA,CAAAgB,SAAA;IACNC,KAAK,GAAAC,MAAA,CAAAlB,EAAA,EAhBV,kMAiBC,CADS;EAIJ,IAAAmB,EAAA,GAA6BrB,qBAAqB,CAAC;MACvDI,KAAK,EAAAA,KAAA;MACLC,SAAS,EAAEP,EAAE,CAAC,gBAAgB,EAAEO,SAAS,CAAC;MAC1CF,OAAO,EAAAA,OAAA;MACPI,SAAS,EAAAA,SAAA;MACTC,gBAAgB,EAAAA,gBAAA;MAChBC,aAAa,EAAAA,aAAA;MACbC,OAAO,EAAAA,OAAA;MACPC,OAAO,EAAAA,OAAA;MACPC,UAAU,EAAAA,UAAA;MACVC,SAAS,EAAAA,SAAA;MACTC,MAAM,EAAAA,MAAA;MACNC,SAAS,EAAAA,SAAA;MACTC,QAAQ,EAAAA,QAAA;MACRE,SAAS,EAAAA,SAAA;MACTI,YAAY,EAAE,CAAChB;KAChB,CAAC;IAhBMiB,YAAY,GAAAF,EAAA,CAAAE,YAAA;IAAEC,QAAQ,GAAAH,EAAA,CAAAG,QAgB5B;EAEF,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb,OACEC,IAAA,CAAC1B,IAAI,EAAA2B,QAAA,KAAKP,KAAK,EAAMI,YAAY;IAAEI,IAAI,EAAC;EAAO;IAAAV,QAAA,EAC5CA;EAAQ,GACJ;AAEX,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}