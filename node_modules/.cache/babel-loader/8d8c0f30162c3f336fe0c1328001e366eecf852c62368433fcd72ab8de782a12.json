{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\slider\\types.ts"],"sourcesContent":["import type {\n  Dispatch,\n  HTMLAttributes,\n  ReactNode,\n  SetStateAction,\n} from \"react\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type ThumbIndex = 0 | 1;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderThumbIndex = ThumbIndex | null;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderDragEvent =\n  | MouseEvent\n  | TouchEvent\n  | React.MouseEvent\n  | React.TouchEvent;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderDraggingBy = \"mouse\" | \"touch\" | null;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderValue = number;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderDefaultValue = SliderValue | (() => SliderValue);\n\n/**\n * An object containing the functions required to update the `Slider`'s value\n * when the user interacts with the slider. These functions are provided by the\n * `useSlider` hook.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\nexport interface SliderControls {\n  persist(): void;\n  minimum(): void;\n  maximum(): void;\n  increment(): void;\n  incrementJump(): void;\n  decrement(): void;\n  decrementJump(): void;\n  setValue: Dispatch<SetStateAction<SliderValue>>;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type RangeSliderValue = readonly [number, number];\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type RangeSliderDefaultValue =\n  | RangeSliderValue\n  | (() => RangeSliderValue);\n\n/**\n * An object containing the functions required to update the `RangeSlider`'s\n * value when the user interacts with the slider. These functions are provided by\n * the `useRangeSlider` hook.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\nexport interface RangeSliderControls {\n  persist(): void;\n  minimum(index: ThumbIndex): void;\n  maximum(index: ThumbIndex): void;\n  increment(index: ThumbIndex): void;\n  incrementJump(index: ThumbIndex): void;\n  decrement(index: ThumbIndex): void;\n  decrementJump(index: ThumbIndex): void;\n  setValue: Dispatch<SetStateAction<RangeSliderValue>>;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderValueOptions {\n  /**\n   * The min value for the slider.\n   */\n  min?: number;\n\n  /**\n   * The max value for the slider.\n   */\n  max?: number;\n\n  /**\n   * A positive number representing the value to \"jump\" while incrementing or\n   * decrementing the slider's value. This should normally stay as the default\n   * value of `1`, but can also be decimal values if needed.\n   */\n  step?: number;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderStepOptions extends SliderValueOptions {\n  /**\n   * An optional amount to jump by when using the `PageUp` or `PageDown` keys.\n   * When this is omitted, it will try to default to 10% of the full range to\n   * the nearest step\n   */\n  jump?: number;\n\n  /**\n   * Determines when the `value` should be updated from the `useSlider` and\n   * `useRangeSlider` hooks. When this is set to `\"change\"`, the `value` will\n   * update immediately as the user interacts with the slider. When this is set\n   * to `\"blur\"`, the `value` will only be updated once the user has tabbed away\n   * from the slider or completed the drag via mouse/touch.\n   *\n   * It is recommended to set this to `\"blur\"` when the value does not need to\n   * be used immediately.\n   */\n  updateOn?: \"change\" | \"blur\";\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderPresentation {\n  /**\n   * Boolean if the slider is rendered vertically instead of horizontally.\n   */\n  vertical?: boolean;\n\n  /**\n   * Boolean if the slider is disabled and the values cannot be changed.\n   */\n  disabled?: boolean;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderThumbPresentation {\n  /**\n   * Boolean if the slider should act as a discrete slider which will render a\n   * tooltip above the thumb while dragging to visualize the current value for\n   * the slider.\n   */\n  discrete?: boolean;\n\n  /**\n   * The duration that it takes for the slider animation to complete for a new\n   * value. This is just used to help make things look smoother while dragging\n   * compared to jumping to new values.\n   */\n  animationDuration?: number;\n\n  /**\n   * A function that is used to help with accessibility by creating a better\n   * value string if just a number isn't representative enough of your range.\n   *\n   * Example:\n   *\n   * ```tsx\n   * const [value, controls] = useSlider(0, {\n   *   // format to be `$100`, etc\n   *   getValueText: value => `$${value}`,\n   * });\n   *\n   * return <Slider baseId=\"price-slider\" label=\"Price\" {...controls} />;\n   * ```\n   */\n  getValueText?(value: number): string;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderThumbOptions\n  extends Omit<SliderValueOptions, \"step\">,\n    SliderPresentation,\n    SliderThumbPresentation {}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type DefinedSliderValueOptions = Required<SliderValueOptions>;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderEventHandlerNames =\n  | \"onBlur\"\n  | \"onKeyDown\"\n  | \"onMouseDown\"\n  | \"onTouchStart\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderEventHandlers = Pick<\n  HTMLAttributes<HTMLSpanElement>,\n  SliderEventHandlerNames\n>;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderAddons {\n  /**\n   * An optional addon to render before the slider's track. This can be anything\n   * and will be wrapped in the `TextIconSpacing` component from\n   * `@react-md/icon`.\n   *\n   * When the `vertical` prop is enabled, the addon will appear underneath the\n   * track.\n   */\n  beforeAddon?: ReactNode;\n\n  /**\n   * An optional addon to render after the slider's track. This can be anything\n   * and will be wrapped in the `TextIconSpacing` component from\n   * `@react-md/icon`.\n   *\n   * When the `vertical` prop is enabled, the addon will appear above the track.\n   */\n  afterAddon?: ReactNode;\n}\n\n/**\n * These are the shared and common props required for both the `Slider` and\n * `RangeSlider` components.\n *\n * @remarks \\@since 2.5.0\n */\nexport interface BaseSliderProps\n  extends HTMLAttributes<HTMLDivElement>,\n    SliderAddons,\n    SliderLabelProps,\n    SliderPresentation,\n    SliderThumbPresentation {\n  /**\n   * An id for the slider and different parts which is required for a11y.\n   */\n  baseId: string;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderLabelProps {\n  /**\n   * An optional label to display with the slider. This should normally be a\n   * short (1-4 word) description for this slider.\n   */\n  label?: ReactNode;\n\n  /**\n   * Optional props to pass to the component wrapping the `label` content.\n   */\n  labelProps?: PropsWithRef<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}