{"ast":null,"code":"var _jsxFileName = \"E:\\\\WebDevelop\\\\React\\\\Project 07\\\\movies-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Sidebar from \"./Components/Sider\";\nimport Editor from \"./Components/Editor\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport React from \"react\";\nimport { data } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // const [notes, setNotes] = React\n  //   .useState\n  //   // () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  //   ();\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown notes title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n  function updateNote(text) {\n    setNotes(oldNotes => oldNotes.map(oldNote => {\n      return oldNote.id === currentNoteId ? {\n        ...oldNote,\n        body: text\n      } : oldNote;\n    }));\n  }\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNotes: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1L5VFteLJa4GoqyUC8220CBDJnQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Sidebar","Editor","Split","nanoid","React","data","jsxDEV","_jsxDEV","App","_s","currentNoteId","setCurrentNoteId","useState","notes","id","useEffect","localStorage","setItem","JSON","stringify","createNewNote","newNote","body","setNotes","prevNotes","updateNote","text","oldNotes","map","oldNote","findCurrentNote","find","note","children","length","sizes","direction","className","currentNotes","fileName","_jsxFileName","lineNumber","columnNumber","currentNote","onClick","_c","$RefreshReg$"],"sources":["E:/WebDevelop/React/Project 07/movies-app/src/App.js"],"sourcesContent":["import Sidebar from \"./Components/Sider\";\nimport Editor from \"./Components/Editor\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport React from \"react\";\nimport { data } from \"./data\";\nexport default function App() {\n  // const [notes, setNotes] = React\n  //   .useState\n  //   // () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  //   ();\n  const [currentNoteId, setCurrentNoteId] = React.useState(\n    (notes[0] && notes[0].id) || \"\"\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown notes title here\",\n    };\n    setNotes((prevNotes) => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n  function updateNote(text) {\n    setNotes((oldNotes) =>\n      oldNotes.map((oldNote) => {\n        return oldNote.id === currentNoteId\n          ? { ...oldNote, body: text }\n          : oldNote;\n      })\n    );\n  }\n\n  function findCurrentNote() {\n    return (\n      notes.find((note) => {\n        return note.id === currentNoteId;\n      }) || notes[0]\n    );\n  }\n  return (\n    <main>\n      {notes.length > 0 ? (\n        <Split sizes={[30, 70]} direction=\"horizontal\" className=\"split\">\n          <Sidebar\n            notes={notes}\n            currentNotes={findCurrentNote()}\n            setCurrentNoteId={setCurrentNoteId}\n            newNote={createNewNote}\n          />\n          {currentNoteId && notes.length > 0 && (\n            <Editor currentNote={findCurrentNote()} updateNote={updateNote} />\n          )}\n        </Split>\n      ) : (\n        <div className=\"no-notes\">\n          <h1>You have no notes</h1>\n          <button className=\"first-note\" onClick={createNewNote}>\n            Create one now\n          </button>\n        </div>\n      )}\n    </main>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}