{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { createContext, useCallback, useContext, useState } from \"react\";\nimport cn from \"classnames\";\nimport { useResizeObserver } from \"../sizing/useResizeObserver\";\nimport { useEnsuredRef } from \"../useEnsuredRef\";\nimport { scrollbarSize } from \"./scrollbarSize\";\n/**\n * This is the css variable that is used store the current size of each cell.\n */\nexport var CELL_SIZE_VAR = \"--rmd-cell-size\";\n/**\n * This is the css variable that is used store the current margin of each cell.\n */\nexport var CELL_MARGIN_VAR = \"--rmd-cell-margin\";\n/**\n * @remarks \\@since 2.3.0\n */\nexport var DEFAULT_GRID_LIST_MAX_CELL_SIZE = 150;\n/**\n * @remarks \\@since 2.3.0\n */\nexport var DEFAULT_GRID_LIST_PADDING = 16;\nvar context = createContext({\n  columns: -1,\n  cellWidth: -1\n});\n/**\n * @remarks \\@since 2.3.0\n */\nexport var GridListSizeProvider = context.Provider;\nif (process.env.NODE_ENV !== \"production\") {\n  context.displayName = \"GridListSizeProvider\";\n}\n/**\n * Gets the current size of each cell within the `GridList` component. If this\n * is used without a parent `GridList` component, `-1` is returned instead.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridListSize() {\n  return useContext(context);\n}\n/**\n * The `useGridList` hook allows you to get all the grid and sizing\n * functionality of the `GridList` component without needing to wrap your\n * children in a `<div>` element.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps] = useGridList({\n *   cellMargin: 16,\n *   maxCellSize: 300,\n *   containerPadding: 4,\n * });\n *\n * return <div {...gridListProps}>{children}</div>;\n * ```\n *\n * Note: You must manually provide the `gridSize` to the `GridListSizeProvider`\n * component that was added in 2.3.0 if you want to use the `useGridSize` hook.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps, gridSize] = useGridList()\n *\n * return (\n *   <GridListSizeProvider value={gridSize}>\n *     <MyComponent {...gridListProps} />\n *   </GridListSizeProvider>\n * );\n * ```\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridList(_a) {\n  var _b;\n  var _c = _a === void 0 ? {} : _a,\n    propRef = _c.ref,\n    style = _c.style,\n    className = _c.className,\n    cellMargin = _c.cellMargin,\n    defaultSize = _c.defaultSize,\n    _d = _c.maxCellSize,\n    maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d,\n    _e = _c.disableHeight,\n    disableHeight = _e === void 0 ? false : _e,\n    _f = _c.disableWidth,\n    disableWidth = _f === void 0 ? false : _f,\n    _g = _c.containerPadding,\n    containerPadding = _g === void 0 ? DEFAULT_GRID_LIST_PADDING : _g;\n  var _h = __read(useEnsuredRef(propRef), 2),\n    ref = _h[0],\n    mergedRef = _h[1];\n  var _j = __read(useState(defaultSize || {\n      columns: -1,\n      cellWidth: maxCellSize\n    }), 2),\n    gridSize = _j[0],\n    setGridSize = _j[1];\n  var recalculate = useCallback(function () {\n    var target = ref.current;\n    if (!target) {\n      return;\n    }\n    // need to use rect instead of offsetWidth since we need decimal precision\n    // for the width since offsetWidth is basically Math.ceil(width). the\n    // calculations for max columns will be off on high-pixel-density monitors\n    // or some zoom levels.\n    var width = target.getBoundingClientRect().width;\n    width -= containerPadding;\n    // just need to see if there is a scrollbar visible and subtract that width.\n    // don't need decimal precision here since both values will be rounded\n    if (target.offsetHeight < target.scrollHeight) {\n      width -= scrollbarSize(\"width\");\n    }\n    var columns = Math.ceil(width / maxCellSize);\n    setGridSize({\n      cellWidth: width / columns,\n      columns: columns\n    });\n  }, [containerPadding, maxCellSize, ref]);\n  var _k = __read(useResizeObserver(recalculate, {\n      ref: mergedRef,\n      disableHeight: disableHeight,\n      disableWidth: disableWidth\n    }), 2),\n    refHandler = _k[1];\n  var mergedStyle = __assign(__assign({}, style), (_b = {}, _b[CELL_SIZE_VAR] = \"\".concat(gridSize.cellWidth, \"px\"), _b));\n  if (cellMargin) {\n    mergedStyle[CELL_MARGIN_VAR] = cellMargin;\n  }\n  return [{\n    ref: refHandler,\n    style: mergedStyle,\n    className: cn(\"rmd-grid-list\", className)\n  }, gridSize];\n}","map":{"version":3,"names":["createContext","useCallback","useContext","useState","cn","useResizeObserver","useEnsuredRef","scrollbarSize","CELL_SIZE_VAR","CELL_MARGIN_VAR","DEFAULT_GRID_LIST_MAX_CELL_SIZE","DEFAULT_GRID_LIST_PADDING","context","columns","cellWidth","GridListSizeProvider","Provider","process","env","NODE_ENV","displayName","useGridListSize","useGridList","_a","_c","propRef","ref","style","className","cellMargin","defaultSize","_d","maxCellSize","_e","disableHeight","_f","disableWidth","_g","containerPadding","_h","__read","mergedRef","_j","gridSize","setGridSize","recalculate","target","current","width","getBoundingClientRect","offsetHeight","scrollHeight","Math","ceil","_k","refHandler","mergedStyle","__assign","_b","concat"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\layout\\useGridList.ts"],"sourcesContent":["import type { RefCallback } from \"react\";\nimport { createContext, useCallback, useContext, useState } from \"react\";\nimport cn from \"classnames\";\n\nimport { useResizeObserver } from \"../sizing/useResizeObserver\";\nimport type { PropsWithRef } from \"../types\";\nimport { useEnsuredRef } from \"../useEnsuredRef\";\nimport { scrollbarSize } from \"./scrollbarSize\";\n\n/**\n * This is the css variable that is used store the current size of each cell.\n */\nexport const CELL_SIZE_VAR = \"--rmd-cell-size\";\n\n/**\n * This is the css variable that is used store the current margin of each cell.\n */\nexport const CELL_MARGIN_VAR = \"--rmd-cell-margin\";\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport const DEFAULT_GRID_LIST_MAX_CELL_SIZE = 150;\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport const DEFAULT_GRID_LIST_PADDING = 16;\n\nexport interface GridListSize {\n  /**\n   * The current number of columns in the `GridList`.\n   */\n  columns: number;\n\n  /**\n   * The current width of each cell within the grid.\n   */\n  cellWidth: number;\n}\n\nconst context = createContext<GridListSize>({\n  columns: -1,\n  cellWidth: -1,\n});\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport const { Provider: GridListSizeProvider } = context;\n\nif (process.env.NODE_ENV !== \"production\") {\n  context.displayName = \"GridListSizeProvider\";\n}\n\n/**\n * Gets the current size of each cell within the `GridList` component. If this\n * is used without a parent `GridList` component, `-1` is returned instead.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridListSize(): GridListSize {\n  return useContext(context);\n}\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport interface UseGridListOptions {\n  /**\n   * An optional style object to merge with the grid custom css properties\n   * object.\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * An optional className to merge with the grid list class name\n   */\n  className?: string;\n\n  /**\n   * Boolean if the recalculation of grid sizing should not happen for height\n   * changes.\n   */\n  disableHeight?: boolean;\n\n  /**\n   * Boolean if the recalculation of grid sizing should not happen for width\n   * changes.\n   */\n  disableWidth?: boolean;\n\n  /**\n   * An optional margin to apply to each cell as the `CELL_MARGIN_VAR` css\n   * variable only when it is defined. This has to be a number string with a\n   * `px`, `em`, `rem` or `%` suffix or else the grid will break.\n   */\n  cellMargin?: string;\n\n  /**\n   * The max size that each cell can be.\n   */\n  maxCellSize?: number;\n\n  /**\n   * Since the `GridList` requires being fully rendered in the DOM to be able to\n   * correctly calculate the number of `columns` and `cellWidth`, this _might_\n   * cause problems when server-side rendering when using the children renderer\n   * to create a grid list dynamically based on the number of columns. If the\n   * number of columns and default `cellWidth` can be guessed server-side, you\n   * should provide this prop. Otherwise it will be:\n   * `{ cellSize; maxCellSize, columns: -1 }`\n   */\n  defaultSize?: GridListSize | (() => GridListSize);\n\n  /**\n   * This is _normally_ the amount of padding on the grid list item itself to\n   * subtract from the `offsetWidth` since `padding`, `border`, and vertical\n   * scrollbars will be included.  If you add a border or change the padding or\n   * add borders to this component, you'll need to update the `containerPadding`\n   * to be the new number.\n   */\n  containerPadding?: number;\n}\n\nexport interface ProvidedGridListProps<E extends HTMLElement> {\n  ref: RefCallback<E | null>;\n  style: CSSProperties;\n  className: string;\n}\n\ntype CSSProperties = React.CSSProperties & {\n  [CELL_SIZE_VAR]: string;\n  [CELL_MARGIN_VAR]?: string;\n};\n\nexport type UseGridListReturnValue<E extends HTMLElement> = readonly [\n  ProvidedGridListProps<E>,\n  GridListSize\n];\n\n/**\n * The `useGridList` hook allows you to get all the grid and sizing\n * functionality of the `GridList` component without needing to wrap your\n * children in a `<div>` element.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps] = useGridList({\n *   cellMargin: 16,\n *   maxCellSize: 300,\n *   containerPadding: 4,\n * });\n *\n * return <div {...gridListProps}>{children}</div>;\n * ```\n *\n * Note: You must manually provide the `gridSize` to the `GridListSizeProvider`\n * component that was added in 2.3.0 if you want to use the `useGridSize` hook.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps, gridSize] = useGridList()\n *\n * return (\n *   <GridListSizeProvider value={gridSize}>\n *     <MyComponent {...gridListProps} />\n *   </GridListSizeProvider>\n * );\n * ```\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridList<E extends HTMLElement>({\n  ref: propRef,\n  style,\n  className,\n  cellMargin,\n  defaultSize,\n  maxCellSize = DEFAULT_GRID_LIST_MAX_CELL_SIZE,\n  disableHeight = false,\n  disableWidth = false,\n  containerPadding = DEFAULT_GRID_LIST_PADDING,\n}: PropsWithRef<UseGridListOptions, E> = {}): UseGridListReturnValue<E> {\n  const [ref, mergedRef] = useEnsuredRef(propRef);\n  const [gridSize, setGridSize] = useState(\n    defaultSize || { columns: -1, cellWidth: maxCellSize }\n  );\n  const recalculate = useCallback(() => {\n    const target = ref.current;\n    if (!target) {\n      return;\n    }\n\n    // need to use rect instead of offsetWidth since we need decimal precision\n    // for the width since offsetWidth is basically Math.ceil(width). the\n    // calculations for max columns will be off on high-pixel-density monitors\n    // or some zoom levels.\n    let { width } = target.getBoundingClientRect();\n    width -= containerPadding;\n\n    // just need to see if there is a scrollbar visible and subtract that width.\n    // don't need decimal precision here since both values will be rounded\n    if (target.offsetHeight < target.scrollHeight) {\n      width -= scrollbarSize(\"width\");\n    }\n\n    const columns = Math.ceil(width / maxCellSize);\n    setGridSize({ cellWidth: width / columns, columns });\n  }, [containerPadding, maxCellSize, ref]);\n  const [, refHandler] = useResizeObserver(recalculate, {\n    ref: mergedRef,\n    disableHeight,\n    disableWidth,\n  });\n\n  const mergedStyle: CSSProperties = {\n    ...style,\n    [CELL_SIZE_VAR]: `${gridSize.cellWidth}px`,\n  };\n  if (cellMargin) {\n    mergedStyle[CELL_MARGIN_VAR] = cellMargin;\n  }\n\n  return [\n    {\n      ref: refHandler,\n      style: mergedStyle,\n      className: cn(\"rmd-grid-list\", className),\n    },\n    gridSize,\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}