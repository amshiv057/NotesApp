{"ast":null,"code":"import { useAppSize } from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\nexport function MobileOnly(_a) {\n  var children = _a.children,\n    _b = _a.fallback,\n    fallback = _b === void 0 ? null : _b;\n  var _c = useAppSize(),\n    isPhone = _c.isPhone,\n    isTablet = _c.isTablet;\n  if (isPhone || isTablet) {\n    return children;\n  }\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\nexport function PhoneOnly(_a) {\n  var children = _a.children,\n    _b = _a.fallback,\n    fallback = _b === void 0 ? null : _b;\n  var isPhone = useAppSize().isPhone;\n  if (isPhone) {\n    return children;\n  }\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\nexport function TabletOnly(_a) {\n  var children = _a.children,\n    _b = _a.fallback,\n    fallback = _b === void 0 ? null : _b;\n  var isTablet = useAppSize().isTablet;\n  if (isTablet) {\n    return children;\n  }\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\nexport function DesktopOnly(_a) {\n  var children = _a.children,\n    _b = _a.fallback,\n    fallback = _b === void 0 ? null : _b;\n  var isDesktop = useAppSize().isDesktop;\n  if (isDesktop) {\n    return children;\n  }\n  return fallback;\n}","map":{"version":3,"names":["useAppSize","MobileOnly","_a","children","_b","fallback","_c","isPhone","isTablet","PhoneOnly","TabletOnly","DesktopOnly","isDesktop"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\sizing\\MediaOnly.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\n\nimport { useAppSize } from \"./useAppSize\";\n\nexport interface MediaOnlyProps {\n  /**\n   * The children to display.\n   */\n  children: ReactElement | null;\n\n  /**\n   * An optional fallback element to show when the media queries do not match.\n   */\n  fallback?: ReactElement | null;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\nexport function MobileOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isPhone, isTablet } = useAppSize();\n  if (isPhone || isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\nexport function PhoneOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isPhone } = useAppSize();\n  if (isPhone) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\nexport function TabletOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isTablet } = useAppSize();\n  if (isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\nexport function DesktopOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isDesktop } = useAppSize();\n  if (isDesktop) {\n    return children;\n  }\n\n  return fallback;\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,cAAc;AAczC;;;;;AAKA,OAAM,SAAUC,UAAUA,CAACC,EAGV;MAFfC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAET,IAAAE,EAAA,GAAwBN,UAAU,EAAE;IAAlCO,OAAO,GAAAD,EAAA,CAAAC,OAAA;IAAEC,QAAQ,GAAAF,EAAA,CAAAE,QAAiB;EAC1C,IAAID,OAAO,IAAIC,QAAQ,EAAE;IACvB,OAAOL,QAAQ;;EAGjB,OAAOE,QAAQ;AACjB;AAEA;;;;AAIA,OAAM,SAAUI,SAASA,CAACP,EAGT;MAFfC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAEP,IAAAG,OAAO,GAAKP,UAAU,EAAE,CAAAO,OAAjB;EACf,IAAIA,OAAO,EAAE;IACX,OAAOJ,QAAQ;;EAGjB,OAAOE,QAAQ;AACjB;AAEA;;;;AAIA,OAAM,SAAUK,UAAUA,CAACR,EAGV;MAFfC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAEP,IAAAI,QAAQ,GAAKR,UAAU,EAAE,CAAAQ,QAAjB;EAChB,IAAIA,QAAQ,EAAE;IACZ,OAAOL,QAAQ;;EAGjB,OAAOE,QAAQ;AACjB;AAEA;;;;AAIA,OAAM,SAAUM,WAAWA,CAACT,EAGX;MAFfC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAEP,IAAAQ,SAAS,GAAKZ,UAAU,EAAE,CAAAY,SAAjB;EACjB,IAAIA,SAAS,EAAE;IACb,OAAOT,QAAQ;;EAGjB,OAAOE,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}