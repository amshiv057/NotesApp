{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useUserInteractionMode } from \"../mode\";\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport { DEFAULT_HOVER_MODE_EXIT_TIME } from \"./constants\";\nimport { useHoverModeContext } from \"./useHoverModeContext\";\n/**\n * This hook is used to add the hover mode functionality to any component.\n *\n * @example\n * Displaying a Color Preview when hovering a Hex Code\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { CSSTransition } from \"@react-md/transition\";\n * import { useHoverMode } from \"@react-md/utils\";\n *\n * interface Props {\n *   value: string;\n * }\n *\n * export default function Color({ value }: Props): ReactElement {\n *   const { visible, onMouseEnter, onMouseLeave } =\n *     useHoverMode({ exitVisibilityDelay: 0 });\n *\n *   return (\n *     <>\n *       <span\n *         onMouseEnter={onMouseEnter}\n *         onMouseLeave={onMouseLeave}\n *         style={{\n *           // pretend styles\n *         }}\n *       >\n *         {value}\n *       </span>\n *       <CSSTransition\n *         transitionIn={visible}\n *         classNames=\"opacity-change\"\n *         timeout={150}\n *         temporary\n *       >\n *         <span\n *           style={{\n *             backgroundColor: value,\n *             // other styles\n *           }}\n *         />\n *      </CSSTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Sticky Usage with a Fixed Dialog\n * ```tsx\n * const {\n *   stuck,\n *   active,\n *   visible,\n *   setVisible,\n *   handlers,\n *   hoverHandlers,\n * } = useHoverMode();\n * const buttonRef = useRef<HTMLButtonElement>(null);\n *\n * return (\n *   <>\n *     <Button {...handlers} ref={buttonRef}>\n *       Click Me\n *     </Button>\n *     <FixedDialog\n *       {...hoverHandlers}\n *       aria-labelledby=\"dialog-title-id\"\n *       id=\"dialog-id\"\n *       visible={visible}\n *       onRequestClose={() => setVisible(false)}\n *       fixedTo={buttonRef}\n *       anchor={BELOW_CENTER_ANCHOR}\n *       options={{ preventOverlap: true }}\n *       // this allows the close on outside click\"\" behavior\" to work\n *       overlay={!stuck && active ? false : undefined}\n *       disableScrollLock={active}\n *     >\n *       <YourDialogContent />\n *    </FixedDialog>\n *   </>\n * );\n * ```\n *\n * @remarks \\@since 2.8.0\n * @remarks \\@since 5.0.0 This hook no longer returns `handlers` or\n * `stickyHandlers` and does not hide when an element on the page is clicked.\n * @param options - An optional object of options to use. See\n * {@link HoverModeOptions} for more details.\n * @returns either the {@link HoverModeReturnValue} or {@link HoverModeReturnValue}\n */\nexport function useHoverMode(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.disabled,\n    disabled = _c === void 0 ? false : _c,\n    _d = _b.defaultVisible,\n    defaultVisible = _d === void 0 ? false : _d,\n    _e = _b.exitVisibilityDelay,\n    exitVisibilityDelay = _e === void 0 ? DEFAULT_HOVER_MODE_EXIT_TIME : _e;\n  var mode = useUserInteractionMode();\n  var isTouch = mode === \"touch\";\n  var _f = __read(useState(defaultVisible), 2),\n    visible = _f[0],\n    setVisible = _f[1];\n  var _g = __read(useState(false), 2),\n    stuck = _g[0],\n    setStuck = _g[1];\n  var timeoutRef = useRef();\n  var _h = useHoverModeContext(),\n    visibleInTime = _h.visibleInTime,\n    enableHoverMode = _h.enableHoverMode,\n    disableHoverMode = _h.disableHoverMode,\n    startDisableTimer = _h.startDisableTimer;\n  var active = visibleInTime === 0;\n  useEffect(function () {\n    if (!visible) {\n      setStuck(false);\n    }\n  }, [visible]);\n  useOnUnmount(function () {\n    window.clearTimeout(timeoutRef.current);\n  });\n  var clearHoverTimeout = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n  }, []);\n  var onMouseEnter = useCallback(function (event) {\n    if (stuck || disabled || isTouch || event.isPropagationStopped()) {\n      return;\n    }\n    clearHoverTimeout();\n    if (visibleInTime === 0) {\n      enableHoverMode();\n      setVisible(true);\n      return;\n    }\n    timeoutRef.current = window.setTimeout(function () {\n      enableHoverMode();\n      setVisible(true);\n    }, visibleInTime);\n  }, [clearHoverTimeout, disabled, enableHoverMode, isTouch, stuck, visibleInTime]);\n  var onMouseLeave = useCallback(function (event) {\n    if (stuck || disabled || isTouch || event.isPropagationStopped()) {\n      return;\n    }\n    startDisableTimer();\n    clearHoverTimeout();\n    if (exitVisibilityDelay === 0) {\n      setVisible(false);\n      return;\n    }\n    timeoutRef.current = window.setTimeout(function () {\n      setVisible(false);\n    }, exitVisibilityDelay);\n  }, [clearHoverTimeout, disabled, exitVisibilityDelay, isTouch, startDisableTimer, stuck]);\n  var onClick = useCallback(function (event) {\n    if (event.isPropagationStopped()) {\n      return;\n    }\n    // If the hover mode functionality is disabled, just allow this to behave\n    // like a toggle visibility handler.\n    if (!stuck && !disabled) {\n      setStuck(true);\n      setVisible(true);\n    } else {\n      setStuck(false);\n      setVisible(function (prevVisible) {\n        return !prevVisible;\n      });\n    }\n  }, [disabled, stuck]);\n  return {\n    active: active,\n    stuck: stuck,\n    visible: visible,\n    setVisible: setVisible,\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    enableHoverMode: enableHoverMode,\n    disableHoverMode: disableHoverMode,\n    startDisableTimer: startDisableTimer,\n    clearHoverTimeout: clearHoverTimeout,\n    handlers: {\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    },\n    hoverHandlers: {\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    }\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useUserInteractionMode","useOnUnmount","DEFAULT_HOVER_MODE_EXIT_TIME","useHoverModeContext","useHoverMode","_a","_b","_c","disabled","_d","defaultVisible","_e","exitVisibilityDelay","mode","isTouch","_f","__read","visible","setVisible","_g","stuck","setStuck","timeoutRef","_h","visibleInTime","enableHoverMode","disableHoverMode","startDisableTimer","active","window","clearTimeout","current","clearHoverTimeout","onMouseEnter","event","isPropagationStopped","setTimeout","onMouseLeave","onClick","prevVisible","handlers","hoverHandlers"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\hover\\useHoverMode.ts"],"sourcesContent":["import type { Dispatch, MouseEvent, SetStateAction } from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { useUserInteractionMode } from \"../mode\";\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport { DEFAULT_HOVER_MODE_EXIT_TIME } from \"./constants\";\nimport type { HoverModeActions } from \"./useHoverModeContext\";\nimport { useHoverModeContext } from \"./useHoverModeContext\";\n\n/** @remarks \\@since 5.0.0 */\nexport interface HoverModeHoverEventHandlers {\n  /**\n   * An optional event handler to merge with the hover mode visibility handler.\n   * If this function calls `event.stopPropagation()`, the hover mode behavior\n   * will be disabled.\n   */\n  onMouseEnter<E extends HTMLElement>(event: MouseEvent<E>): void;\n\n  /**\n   * An optional event handler to merge with the hover mode visibility handler.\n   * If this function calls `event.stopPropagation()`, the hover mode behavior\n   * will be disabled.\n   */\n  onMouseLeave<E extends HTMLElement>(event: MouseEvent<E>): void;\n}\n\n/**\n * An object of event handlers that should be provided to a component to enable\n * and disable the visibility of a temporary element while hovering over that\n * component.\n *\n * @remarks \\@since 2.8.0\n * @remarks \\@since 5.0.0 The `HTMLElement` type will be correctly inferred when\n * using them on multiple components.\n */\nexport interface HoverModeEventHandlers extends HoverModeHoverEventHandlers {\n  /**\n   * An optional event handler to merge with the hover mode visibility handler.\n   * If this function calls `event.stopPropagation()`, the hover mode behavior\n   * will be disabled.\n   */\n  onClick<E extends HTMLElement>(event: MouseEvent<E>): void;\n}\n\n/**\n * @remarks \\@since 2.8.0\n * @remarks \\@since 5.0.0 No longer has event handlers or a separate \"sticky\" API.\n */\nexport interface HoverModeOptions {\n  /**\n   * Boolean if the hover mode functionality should be disabled.\n   *\n   * @defaultValue `false`\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the element should start visible.\n   *\n   * @defaultValue `false`\n   */\n  defaultVisible?: boolean;\n\n  /**\n   * The amount of time to wait once the mouse has left the element before\n   * setting the visibility to `false`.\n   *\n   * @defaultValue {@link DEFAULT_HOVER_MODE_EXIT_TIME}\n   */\n  exitVisibilityDelay?: number;\n}\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface HoverModeHookReturnValue\n  extends HoverModeActions,\n    HoverModeEventHandlers {\n  /**\n   * Boolean if the hover mode is currently working.\n   */\n  active: boolean;\n\n  /**\n   * Boolean if the the `visible` state is `true` because the user clicked an\n   * element.\n   */\n  stuck: boolean;\n\n  /**\n   * Boolean if the temporary element should be visible.\n   */\n  visible: boolean;\n\n  /**\n   * A function to manually set the visibility state if you need even more\n   * custom behavior.\n   */\n  setVisible: Dispatch<SetStateAction<boolean>>;\n\n  /**\n   * A convenience prop that allows you to spread all the hover mode event\n   * handlers onto a single component if no custom functionality is required.\n   *\n   * @remarks \\@since 5.0.0\n   */\n  handlers: Readonly<HoverModeEventHandlers>;\n\n  /**\n   * A convenience prop that allows you to spread only the `onMouseEnter` and\n   * `onMouseLeave` the hover mode event handlers onto a single component if no\n   * custom functionality is required.\n   *\n   * @remarks \\@since 5.0.0\n   */\n  hoverHandlers: Readonly<HoverModeHoverEventHandlers>;\n\n  /**\n   * Clears the current `onMouseEnter` visibility timer.\n   *\n   * @remarks \\@since 5.0.0\n   */\n  clearHoverTimeout(): void;\n}\n\n/**\n * This hook is used to add the hover mode functionality to any component.\n *\n * @example\n * Displaying a Color Preview when hovering a Hex Code\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { CSSTransition } from \"@react-md/transition\";\n * import { useHoverMode } from \"@react-md/utils\";\n *\n * interface Props {\n *   value: string;\n * }\n *\n * export default function Color({ value }: Props): ReactElement {\n *   const { visible, onMouseEnter, onMouseLeave } =\n *     useHoverMode({ exitVisibilityDelay: 0 });\n *\n *   return (\n *     <>\n *       <span\n *         onMouseEnter={onMouseEnter}\n *         onMouseLeave={onMouseLeave}\n *         style={{\n *           // pretend styles\n *         }}\n *       >\n *         {value}\n *       </span>\n *       <CSSTransition\n *         transitionIn={visible}\n *         classNames=\"opacity-change\"\n *         timeout={150}\n *         temporary\n *       >\n *         <span\n *           style={{\n *             backgroundColor: value,\n *             // other styles\n *           }}\n *         />\n *      </CSSTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Sticky Usage with a Fixed Dialog\n * ```tsx\n * const {\n *   stuck,\n *   active,\n *   visible,\n *   setVisible,\n *   handlers,\n *   hoverHandlers,\n * } = useHoverMode();\n * const buttonRef = useRef<HTMLButtonElement>(null);\n *\n * return (\n *   <>\n *     <Button {...handlers} ref={buttonRef}>\n *       Click Me\n *     </Button>\n *     <FixedDialog\n *       {...hoverHandlers}\n *       aria-labelledby=\"dialog-title-id\"\n *       id=\"dialog-id\"\n *       visible={visible}\n *       onRequestClose={() => setVisible(false)}\n *       fixedTo={buttonRef}\n *       anchor={BELOW_CENTER_ANCHOR}\n *       options={{ preventOverlap: true }}\n *       // this allows the close on outside click\"\" behavior\" to work\n *       overlay={!stuck && active ? false : undefined}\n *       disableScrollLock={active}\n *     >\n *       <YourDialogContent />\n *    </FixedDialog>\n *   </>\n * );\n * ```\n *\n * @remarks \\@since 2.8.0\n * @remarks \\@since 5.0.0 This hook no longer returns `handlers` or\n * `stickyHandlers` and does not hide when an element on the page is clicked.\n * @param options - An optional object of options to use. See\n * {@link HoverModeOptions} for more details.\n * @returns either the {@link HoverModeReturnValue} or {@link HoverModeReturnValue}\n */\nexport function useHoverMode({\n  disabled = false,\n  defaultVisible = false,\n  exitVisibilityDelay = DEFAULT_HOVER_MODE_EXIT_TIME,\n}: HoverModeOptions = {}): HoverModeHookReturnValue {\n  const mode = useUserInteractionMode();\n  const isTouch = mode === \"touch\";\n  const [visible, setVisible] = useState(defaultVisible);\n  const [stuck, setStuck] = useState(false);\n  const timeoutRef = useRef<number>();\n  const {\n    visibleInTime,\n    enableHoverMode,\n    disableHoverMode,\n    startDisableTimer,\n  } = useHoverModeContext();\n  const active = visibleInTime === 0;\n\n  useEffect(() => {\n    if (!visible) {\n      setStuck(false);\n    }\n  }, [visible]);\n\n  useOnUnmount(() => {\n    window.clearTimeout(timeoutRef.current);\n  });\n\n  const clearHoverTimeout = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n  }, []);\n\n  const onMouseEnter = useCallback(\n    <E extends HTMLElement>(event: MouseEvent<E>) => {\n      if (stuck || disabled || isTouch || event.isPropagationStopped()) {\n        return;\n      }\n\n      clearHoverTimeout();\n      if (visibleInTime === 0) {\n        enableHoverMode();\n        setVisible(true);\n        return;\n      }\n\n      timeoutRef.current = window.setTimeout(() => {\n        enableHoverMode();\n        setVisible(true);\n      }, visibleInTime);\n    },\n    [\n      clearHoverTimeout,\n      disabled,\n      enableHoverMode,\n      isTouch,\n      stuck,\n      visibleInTime,\n    ]\n  );\n\n  const onMouseLeave = useCallback(\n    <E extends HTMLElement>(event: MouseEvent<E>) => {\n      if (stuck || disabled || isTouch || event.isPropagationStopped()) {\n        return;\n      }\n\n      startDisableTimer();\n      clearHoverTimeout();\n      if (exitVisibilityDelay === 0) {\n        setVisible(false);\n        return;\n      }\n\n      timeoutRef.current = window.setTimeout(() => {\n        setVisible(false);\n      }, exitVisibilityDelay);\n    },\n    [\n      clearHoverTimeout,\n      disabled,\n      exitVisibilityDelay,\n      isTouch,\n      startDisableTimer,\n      stuck,\n    ]\n  );\n\n  const onClick = useCallback(\n    <E extends HTMLElement>(event: MouseEvent<E>) => {\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      // If the hover mode functionality is disabled, just allow this to behave\n      // like a toggle visibility handler.\n      if (!stuck && !disabled) {\n        setStuck(true);\n        setVisible(true);\n      } else {\n        setStuck(false);\n        setVisible((prevVisible) => !prevVisible);\n      }\n    },\n    [disabled, stuck]\n  );\n\n  return {\n    active,\n    stuck,\n    visible,\n    setVisible,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    enableHoverMode,\n    disableHoverMode,\n    startDisableTimer,\n    clearHoverTimeout,\n    handlers: {\n      onClick,\n      onMouseEnter,\n      onMouseLeave,\n    },\n    hoverHandlers: {\n      onMouseEnter,\n      onMouseLeave,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}