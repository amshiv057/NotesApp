{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-expansion-panel\");\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\nexport var ExpansionPanelHeader = forwardRef(function ExpansionPanelHeader(_a, ref) {\n  var propIcon = _a.icon,\n    expanded = _a.expanded,\n    children = _a.children,\n    className = _a.className,\n    _b = _a.disableTransition,\n    disableTransition = _b === void 0 ? false : _b,\n    props = __rest(_a, [\"icon\", \"expanded\", \"children\", \"className\", \"disableTransition\"]);\n  var icon = useIcon(\"expander\", propIcon);\n  return _jsxs(UnstyledButton, __assign({}, props, {\n    ref: ref,\n    \"aria-expanded\": expanded || undefined,\n    className: cn(block(\"header\"), className)\n  }, {\n    children: [children, icon && _jsx(\"span\", __assign({\n      className: block(\"icon\")\n    }, {\n      children: _jsx(IconRotator, __assign({\n        animate: !disableTransition,\n        rotated: expanded\n      }, {\n        children: icon\n      }))\n    }))]\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","UnstyledButton","IconRotator","useIcon","bem","block","ExpansionPanelHeader","_a","ref","propIcon","icon","expanded","children","className","_b","disableTransition","props","__rest","_jsxs","__assign","undefined","_jsx","animate","rotated"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\expansion-panel\\src\\ExpansionPanelHeader.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, MouseEventHandler, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface ExpansionPanelHeaderProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The id for the header. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * The icon to use for the expander icon.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Boolean if the panel is currently expanded. This is just used to rotate the\n   * icon as needed.\n   */\n  expanded: boolean;\n\n  /**\n   * The click handler that should attempt to toggle the expansion state of the\n   * panel.\n   */\n  onClick: MouseEventHandler<HTMLButtonElement>;\n\n  /**\n   * The children to display within the header.\n   *\n   * Reminder: Since this is a `<button>`, only `inline` elements should be\n   * rendered within (so use `<span>` instead of `<div>` for children).\n   */\n  children: ReactNode;\n\n  /**\n   * Boolean if the icon rotation transition should be disabled.\n   */\n  disableTransition?: boolean;\n}\n\nconst block = bem(\"rmd-expansion-panel\");\n\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\nexport const ExpansionPanelHeader = forwardRef<\n  HTMLButtonElement,\n  ExpansionPanelHeaderProps\n>(function ExpansionPanelHeader(\n  {\n    icon: propIcon,\n    expanded,\n    children,\n    className,\n    disableTransition = false,\n    ...props\n  },\n  ref\n) {\n  const icon = useIcon(\"expander\", propIcon);\n\n  return (\n    <UnstyledButton\n      {...props}\n      ref={ref}\n      aria-expanded={expanded || undefined}\n      className={cn(block(\"header\"), className)}\n    >\n      {children}\n      {icon && (\n        <span className={block(\"icon\")}>\n          <IconRotator animate={!disableTransition} rotated={expanded}>\n            {icon}\n          </IconRotator>\n        </span>\n      )}\n    </UnstyledButton>\n  );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AACrD,SAASC,GAAG,QAAQ,iBAAiB;AAwCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,qBAAqB,CAAC;AAExC;;;;;;;AAOA,OAAO,IAAME,oBAAoB,GAAGP,UAAU,CAG5C,SAASO,oBAAoBA,CAC7BC,EAOC,EACDC,GAAG;EAPD,IAAMC,QAAQ,GAAAF,EAAA,CAAAG,IAAA;IACdC,QAAQ,GAAAJ,EAAA,CAAAI,QAAA;IACRC,QAAQ,GAAAL,EAAA,CAAAK,QAAA;IACRC,SAAS,GAAAN,EAAA,CAAAM,SAAA;IACTC,EAAA,GAAAP,EAAA,CAAAQ,iBAAyB;IAAzBA,iBAAiB,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACtBE,KAAK,GAAAC,MAAA,CAAAV,EAAA,EANV,kEAOC,CADS;EAIV,IAAMG,IAAI,GAAGP,OAAO,CAAC,UAAU,EAAEM,QAAQ,CAAC;EAE1C,OACES,KAAA,CAACjB,cAAc,EAAAkB,QAAA,KACTH,KAAK;IACTR,GAAG,EAAEA,GAAG;IAAA,iBACOG,QAAQ,IAAIS,SAAS;IACpCP,SAAS,EAAEb,EAAE,CAACK,KAAK,CAAC,QAAQ,CAAC,EAAEQ,SAAS;EAAC;IAAAD,QAAA,GAExCA,QAAQ,EACRF,IAAI,IACHW,IAAA,SAAAF,QAAA;MAAMN,SAAS,EAAER,KAAK,CAAC,MAAM;IAAC;MAAAO,QAAA,EAC5BS,IAAA,CAACnB,WAAW,EAAAiB,QAAA;QAACG,OAAO,EAAE,CAACP,iBAAiB;QAAEQ,OAAO,EAAEZ;MAAQ;QAAAC,QAAA,EACxDF;MAAI;IACO,GAEjB;EAAA,GACc;AAErB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}