{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\menu\\src\\types.ts"],"sourcesContent":["import type { ButtonProps } from \"@react-md/button\";\nimport type { IconRotatorProps, TextIconSpacingProps } from \"@react-md/icon\";\nimport type { ListElement, ListItemProps, ListProps } from \"@react-md/list\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport type {\n  SheetPosition,\n  SheetProps,\n  SheetVerticalSize,\n} from \"@react-md/sheet\";\nimport type {\n  FixedPositioningTransitionCallbacks,\n  ScaleTransitionHookOptions,\n  TransitionScrollCallback,\n} from \"@react-md/transition\";\nimport type {\n  CalculateFixedPositionOptions,\n  KeyboardFocusHookOptions,\n  LabelA11y,\n  PositionAnchor,\n  PropsWithRef,\n  RequireAtLeastOne,\n} from \"@react-md/utils\";\nimport type {\n  CSSProperties,\n  Dispatch,\n  HTMLAttributes,\n  KeyboardEventHandler,\n  MouseEventHandler,\n  ReactNode,\n  Ref,\n  RefObject,\n  SetStateAction,\n} from \"react\";\n\n/** @remarks \\@since 5.0.0 */\nexport type MenuTransitionProps = Omit<\n  ScaleTransitionHookOptions<HTMLDivElement>,\n  \"transitionIn\" | \"vertical\" | \"nodeRef\"\n>;\n\n/** @remarks \\@since 5.0.0 */\nexport interface MenuOrientationProps {\n  /**\n   * Boolean if the menu should be rendered horizontally instead of vertically.\n   * This will also update the `aria-orientation`.\n   *\n   * @defaultValue `false`\n   */\n  horizontal?: boolean;\n}\n\n/**\n * This allows the menu to be conditionally rendered as a `Sheet` instead of a\n * menu.\n *\n * - `false` - always render as a `Menu`\n * - `true` - always render as a `Sheet`\n * - `\"phone\"` - render as a sheet only when the {@link AppSize} is considered\n *   phone (`isPhone === true`).\n *\n * @defaultValue `false`\n * @remarks \\@since 5.0.0\n */\nexport type RenderMenuAsSheet = boolean | \"phone\";\n\n/** @remarks \\@since 5.0.0 */\nexport interface MenuConfiguration extends MenuOrientationProps {\n  /** {@inheritDoc RenderMenuAsSheet} */\n  renderAsSheet?: RenderMenuAsSheet;\n\n  /**\n   * @see {@link SheetPosition}\n   * @defaultValue `\"bottom\"`\n   */\n  sheetPosition?: SheetPosition;\n\n  /**\n   * @see {@link SheetVerticalSize}\n   * @defaultValue `\"touch\"`\n   */\n  sheetVerticalSize?: SheetVerticalSize;\n\n  /**\n   * Any children to render above the sheet's menu implementation. This would\n   * normally be something like a `<DialogHeader>` or `AppBar`.\n   *\n   * @defaultValue `null`\n   */\n  sheetHeader?: ReactNode;\n\n  /**\n   * Any children to render below the sheet's menu implementation. This would\n   * normally be something like a `<DialogFooter>`.\n   *\n   * @defaultValue `null`\n   */\n  sheetFooter?: ReactNode;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport type MenuConfigurationContext = Required<MenuConfiguration>;\n\n/** @remarks \\@since 5.0.0 */\nexport interface MenuWidgetProps\n  extends HTMLAttributes<HTMLDivElement>,\n    KeyboardFocusHookOptions<HTMLDivElement>,\n    MenuOrientationProps {\n  /**\n   * An id required for a11y.\n   */\n  id: string;\n\n  /**\n   * Boolean if the menu should not gain the elevation styles and should only be\n   * set to `true` when rendering within a `Sheet`.\n   *\n   * @defaultValue `false`\n   */\n  disableElevation?: boolean;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface MenuProps\n  extends RenderConditionalPortalProps,\n    MenuTransitionProps,\n    MenuWidgetProps,\n    MenuListProps {\n  /**\n   * Boolean if the menu is currently visible.\n   */\n  visible: boolean;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface DropdownMenuConfigurationProps {\n  /**\n   * An optional `aria-label` that should be applied to the `Menu` component. If\n   * this is `undefined`, an `aria-labelledby` will be provided to the `Menu`\n   * instead linking to the {@link id} of the `Button`.\n   */\n  menuLabel?: string;\n\n  /**\n   * The {@link PositionAnchor} to use for the menu. Here's the default value\n   * for the anchor:\n   *\n   * - horizontal - `BELOW_CENTER_ANCHOR`\n   * - a submenu - `TOP_RIGHT_ANCHOR`\n   * - default - `TOP_INNER_RIGHT_ANCHOR`\n   */\n  anchor?: PositionAnchor;\n\n  /** {@inheritDoc CalculateFixedPositionOptions} */\n  fixedPositionOptions?: Readonly<CalculateFixedPositionOptions>;\n\n  /**\n   * A function that can be used to get the\n   * {@link CalculateFixedPositionOptions} dynamically.\n   */\n  getFixedPositionOptions?(): Readonly<CalculateFixedPositionOptions>;\n\n  /**\n   * Boolean if the menu should close if the page is scrolled. The default\n   * behavior is to just update the position of the menu relative to the menu\n   * button until it can no longer be visible within the viewport.\n   *\n   * @defaultValue `false`\n   */\n  closeOnScroll?: boolean;\n\n  /**\n   * Boolean if the page should no longer be scrollable while the menu is\n   * visible.\n   *\n   * @defaultValue `false`\n   */\n  preventScroll?: boolean;\n\n  /**\n   * Boolean if the menu should close instead of repositioning itself if the\n   * browser window is resized.\n   *\n   * @defaultValue `false`\n   */\n  closeOnResize?: boolean;\n\n  /**\n   * Boolean if the menu component should not gain focus once it has mounted.\n   * This should really only be set to `true` if the enter transition has been\n   * disabled.\n   *\n   * @defaultValue `timeout === 0`\n   */\n  disableFocusOnMount?: boolean;\n\n  /**\n   * Boolean if the toggle element should no longer gain focus when the menu\n   * loses visibility.\n   *\n   * Note: The toggle element will not gain focus if:\n   * - the menu closed via resizing the browser window\n   * - the menu closes because the menu is no longer within the viewport\n   * - the current `document.activeElement` has moved outside of the menu\n   *   - this generally means the `MenuItem`'s action cause the focus to move\n   *     already\n   * - the current `document.activeElement` is an link (`<a href=\"\">`)\n   *   - links should generally handle focus behavior themselves\n   *\n   * @defaultValue `timeout === 0`\n   */\n  disableFocusOnUnmount?: boolean;\n}\n\n/**\n * Since the `useMenu` hook was designed to work with `react-md` components,\n * this is an object of props that should be passed to the {@link Menu}\n * component to get the correct menu functionality.\n *\n * @remarks \\@since 5.0.0\n */\nexport type ProvidedMenuProps = Required<\n  Pick<MenuProps, \"id\" | \"style\" | \"visible\" | \"onClick\" | \"onKeyDown\">\n> &\n  Required<FixedPositioningTransitionCallbacks> &\n  RequireAtLeastOne<LabelA11y>;\n\n/**\n * Props that should be passed to a `Button` or `MenuItem` component to toggle\n * the visibility of a {@link Menu}.\n *\n * @remarks \\@since 5.0.0\n */\nexport interface ProvidedMenuToggleProps<E extends HTMLElement> {\n  /**\n   * This will always be set to `\"menu\"`.\n   */\n  \"aria-haspopup\": HTMLAttributes<E>[\"aria-haspopup\"];\n\n  /**\n   * This will be set to `true` only while the menu is `visible`.\n   */\n  \"aria-expanded\": HTMLAttributes<E>[\"aria-expanded\"];\n\n  /**\n   * This will be set to `${baseId}-toggle` and is used for providing an\n   * accessible label to the menu if the {@link BaseMenuHookOptions.menuLabel}\n   * was not provided.\n   *\n   * @see {@link BaseMenuHookOptions.baseId}\n   */\n  id: string;\n\n  /**\n   * A click handler that will toggle the visibility of the menu.\n   *\n   * @see {@link HoverModeHookReturnValue.onClick}\n   */\n  onClick: MouseEventHandler<E>;\n\n  /**\n   * The event handler will allow the menu to become visible by with `ArrowUp`\n   * or `ArrowDown` for horizontal menus and `ArrowLeft` or `ArrowRight` for\n   * vertical menus. This will also allow the focus to move between menus within\n   * a `MenuBar` with the `ArrowLeft` and `ArrowRight` keys.\n   */\n  onKeyDown: KeyboardEventHandler<E>;\n\n  /**\n   * The event handler will allow a `Menu` within a `MenuBar` to gain\n   * visibility.\n   */\n  onMouseEnter: MouseEventHandler<E>;\n\n  /**\n   * This handler just cancels the `hoverTimeout` from the `MenuBar`.\n   */\n  onMouseLeave: MouseEventHandler<E>;\n}\n\n/**\n * This type was created since the `useContextMenu` only requires the menu\n * related props from the `useMenu` hook and I didn't want to duplicate the\n * information between the two.\n *\n * @remarks \\@since 5.0.0\n */\nexport interface BaseMenuHookOptions\n  extends DropdownMenuConfigurationProps,\n    MenuOrientationProps,\n    FixedPositioningTransitionCallbacks {\n  /**\n   * This is the `id` for the toggle element for a `DropdownMenu` that is\n   * required for a11y. This is used to also create the `Menu` component's `id`\n   * as `${baseId}-menu`.\n   */\n  baseId: string;\n\n  /**\n   * An optional style object to merge with the `Menu`'s fixed positioning\n   * style.\n   *\n   * @see {@link useFixedPositioning}\n   * @see {@link FixedPositionStyle}\n   */\n  style?: CSSProperties;\n\n  /**\n   * Boolean if the menu is currently visible.\n   */\n  visible: boolean;\n\n  /**\n   * This should be the second argument for the `useState` hook.\n   *\n   * ```ts\n   * const [visible, setVisible] = useState(false);\n   * ```\n   *\n   * This is used to update the visibility of the menu based on click and\n   * keyboard events.\n   */\n  setVisible: Dispatch<SetStateAction<boolean>>;\n\n  /**\n   * Boolean if the menu is being rendered as a menuitem instead of a button.\n   * Setting this to `true` implements the\n   * {@link ProvidedMenuToggleProps.onKeyDown} functionality.\n   *\n   * @defaultValue `false`\n   */\n  menuitem?: boolean;\n\n  /** {@inheritDoc TransitionScrollCallback} */\n  onFixedPositionScroll?: TransitionScrollCallback<HTMLElement, HTMLDivElement>;\n\n  /**\n   * An optional function to call if the page resizes while the menu is visible.\n   */\n  onFixedPositionResize?: EventListener;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface BaseMenuHookReturnValue {\n  /**\n   * Maybe don't need to provide.\n   */\n  menuRef: Ref<HTMLDivElement>;\n\n  /**\n   * An object of props that should be provided to the {@link Menu} component.\n   */\n  menuProps: ProvidedMenuProps;\n\n  /**\n   * A ref containing the menu DivHTMLElement if you need access to it for your\n   * use case.\n   */\n  menuNodeRef: RefObject<HTMLDivElement>;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport type MenuButtonTextIconSpacingProps = Pick<\n  TextIconSpacingProps,\n  \"icon\" | \"iconAfter\"\n>;\n\n/** @remarks \\@since 5.0.0 */\nexport type MenuButtonIconRotatorProps = Omit<\n  IconRotatorProps,\n  \"children\" | \"rotated\"\n>;\n\n/** @remarks \\@since 5.0.0 */\nexport interface BaseMenuButtonProps\n  extends ButtonProps,\n    MenuButtonTextIconSpacingProps {\n  /**\n   * An id required for accessibility and will be passed to the `<Button>`\n   * component.\n   *\n   * @see {@link BaseMenuHookOptions.baseId}\n   */\n  id: string;\n\n  /**\n   * Boolean if the dropdown icon should be included with the button children.\n   *\n   * @defaultValue `buttonType === \"icon\"`\n   */\n  disableDropdownIcon?: boolean;\n\n  /**\n   * Any additional props to pass to the {@link IconRotator} component that\n   * surrounds the {@link buttonChildren}\n   */\n  iconRotatorProps?: Readonly<MenuButtonIconRotatorProps>;\n\n  /**\n   * Any additional props to pass to the {@link TextIconSpacing} component that\n   * surrounds the optional dropdown icon.\n   */\n  textIconSpacingProps?: Readonly<\n    Omit<\n      TextIconSpacingProps,\n      \"children\" | keyof MenuButtonTextIconSpacingProps\n    >\n  >;\n}\n\n/** @remarks \\@since 5.1.0 */\nexport interface MenuListProps {\n  /**\n   * An optional style to provide to the `List` component that surrounds the\n   * `MenuItem` within a `Menu`.\n   */\n  listStyle?: CSSProperties;\n\n  /**\n   * An optional className to provide to the `List` component that surrounds the\n   * `MenuItem` within a `Menu`.\n   */\n  listClassName?: string;\n\n  /**\n   * Any additional props to pass to the `List` component that surrounds the\n   * `Menu`'s `MenuItem`s.\n   */\n  listProps?: Readonly<\n    PropsWithRef<Omit<ListProps, \"horizontal\">, ListElement>\n  >;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface BaseMenuRendererProps\n  extends RenderConditionalPortalProps,\n    MenuConfiguration {\n  /**\n   * Any additional props that should be passed to the {@link Menu} component.\n   *\n   * Note: use the {@link menuStyle} and {@link menuClassName} props instead of\n   * including `style` or `className` here.\n   */\n  menuProps?: Readonly<Omit<MenuWidgetProps, \"id\" | \"children\">>;\n\n  /**\n   * An optional style object that should be merged with the menu's fixed\n   * positioning styles.\n   */\n  menuStyle?: CSSProperties;\n\n  /**\n   * An optional className that should be passed to the menu component.\n   */\n  menuClassName?: string;\n\n  /**\n   * Any additional props that should be passed to the {@link Sheet} component.\n   *\n   * Note: use the {@link sheetStyle} and {@link sheetClassName} props instead\n   * of including `style` or `className` here.\n   */\n  sheetProps?: Readonly<\n    Omit<SheetProps, \"id\" | \"visible\" | \"onRequestClose\" | \"children\">\n  >;\n\n  /**\n   * An optional style object that should be passed to the sheet.\n   */\n  sheetStyle?: CSSProperties;\n\n  /**\n   * An optional className that should be passed to the sheet component.\n   */\n  sheetClassName?: string;\n\n  /**\n   * Any additional props that should be added to the sheet's menu\n   * implementation. You probably won't ever need to use this.\n   */\n  sheetMenuProps?: HTMLAttributes<HTMLDivElement>;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface BaseDropdownMenuProps\n  extends DropdownMenuConfigurationProps,\n    BaseMenuRendererProps,\n    MenuTransitionProps {}\n\n/** @remarks \\@since 5.0.0 */\nexport interface DropdownMenuButtonProps\n  extends BaseMenuButtonProps,\n    BaseDropdownMenuProps,\n    MenuButtonTextIconSpacingProps,\n    MenuListProps {\n  /**\n   * The children to display in the button. This should normally be text or an\n   * icon.\n   *\n   * Note: If this is an icon, set the {@link buttonType} to `\"icon\"` to get the\n   * correct styling and remove the dropdown icon.\n   */\n  buttonChildren: ReactNode;\n}\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface MenuItemProps extends Omit<ListItemProps, \"role\"> {\n  /**\n   * An optional id for the menu item. This is generally recommended, but it can\n   * be ignored.\n   */\n  id?: string;\n\n  /**\n   * The current role for the menu item. This will eventually be updated for\n   * some of the other `menuitem*` widgets.\n   *\n   * @defaultValue `\"menuitem\"`\n   */\n  role?: \"menuitem\";\n\n  /**\n   * The tab index for the menu item. This should always stay at `-1`.\n   */\n  tabIndex?: number;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface BaseMenuItemButtonProps extends MenuItemProps {\n  /**\n   * An id required for accessibility and will be passed to the `<MenuItem>`\n   * component.\n   *\n   * @see {@link BaseMenuHookOptions.baseId}\n   */\n  id: string;\n\n  /**\n   * Boolean if the dropdown icon should be set to the\n   * {@link ListItemProps.rightAddon}.\n   *\n   * @defaultValue `typeof rightAddon !== \"undefined\"`\n   */\n  disableDropdownIcon?: boolean;\n\n  /**\n   * Any additional props to pass to the {@link IconRotator} component that\n   * surrounds the {@link buttonChildren}\n   */\n  iconRotatorProps?: Readonly<MenuButtonIconRotatorProps>;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface DropdownMenuItemProps\n  extends BaseDropdownMenuProps,\n    BaseMenuItemButtonProps,\n    MenuListProps {\n  /**\n   * The children to display in the menuitem acting as a button.\n   */\n  buttonChildren: ReactNode;\n}\n\n/**\n * I couldn't really figure out a nice way to have the type inferred\n * automatically based on parent menus, so this is the \"best\" way to allow\n * some type-safety and autocompletion I could think of for `DropdownMenu`s.\n *\n * All this type will do is make sure you don't apply both button specific props\n * with menu item specific props at the same time but won't catch any errors\n * around providing button props to a menuitem or menuitem props to a button.\n *\n * @remarks \\@since 5.0.0\n */\nexport type DropdownMenuProps = DropdownMenuButtonProps | DropdownMenuItemProps;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}