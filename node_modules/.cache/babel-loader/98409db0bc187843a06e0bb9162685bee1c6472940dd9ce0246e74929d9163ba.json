{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { CircularProgress, getProgressA11y } from \"@react-md/progress\";\nimport { Switch } from \"./Switch\";\n// this is used while the loading state is enabled to \"disable\" the switch\n// toggle. If we disable the entire switch, keyboard focus is lost which is not\n// desired.\nvar noop = function () {\n  // do nothing\n};\n/**\n * This component will create an async switch that will show a loading indicator\n * and prevent the switch from being toggled while the loading state is true.\n */\nexport var AsyncSwitch = forwardRef(function AsyncSwitch(_a, ref) {\n  var id = _a.id,\n    disabled = _a.disabled,\n    className = _a.className,\n    progressStyle = _a.progressStyle,\n    progressClassName = _a.progressClassName,\n    loading = _a.loading,\n    onChange = _a.onChange,\n    props = __rest(_a, [\"id\", \"disabled\", \"className\", \"progressStyle\", \"progressClassName\", \"loading\", \"onChange\"]);\n  var progressId = \"\".concat(id, \"-loading\");\n  return _jsx(Switch, __assign({}, props, getProgressA11y(progressId, loading), {\n    id: id,\n    ref: ref,\n    disabled: disabled,\n    className: cn(\"rmd-switch--async\", className),\n    labelDisabled: disabled || false,\n    onChange: loading ? noop : onChange\n  }, {\n    children: loading && _jsx(CircularProgress, {\n      id: progressId,\n      style: progressStyle,\n      className: cn(\"rmd-switch__progress\", progressClassName),\n      centered: false\n    })\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","CircularProgress","getProgressA11y","Switch","noop","AsyncSwitch","_a","ref","id","disabled","className","progressStyle","progressClassName","loading","onChange","props","__rest","progressId","concat","_jsx","__assign","labelDisabled","children","style","centered"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\toggle\\AsyncSwitch.tsx"],"sourcesContent":["import type { CSSProperties } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { CircularProgress, getProgressA11y } from \"@react-md/progress\";\n\nimport type { SwitchProps } from \"./Switch\";\nimport { Switch } from \"./Switch\";\n\nexport interface AsyncSwitchProps extends SwitchProps {\n  /**\n   * Boolean if the switch is still loading. This will \"disable\" the switch and\n   * add the circular progress indicator in the switch's ball until it is set\n   * back to false.\n   */\n  loading: boolean;\n\n  /**\n   * An optional style to apply to the progress bar while the loading state is\n   * enabled.\n   */\n  progressStyle?: CSSProperties;\n\n  /**\n   * An optional class name to apply to the progress bar while the loading state\n   * is enabled.\n   */\n  progressClassName?: string;\n}\n\n// this is used while the loading state is enabled to \"disable\" the switch\n// toggle. If we disable the entire switch, keyboard focus is lost which is not\n// desired.\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * This component will create an async switch that will show a loading indicator\n * and prevent the switch from being toggled while the loading state is true.\n */\nexport const AsyncSwitch = forwardRef<HTMLInputElement, AsyncSwitchProps>(\n  function AsyncSwitch(\n    {\n      id,\n      disabled,\n      className,\n      progressStyle,\n      progressClassName,\n      loading,\n      onChange,\n      ...props\n    },\n    ref\n  ) {\n    const progressId = `${id}-loading`;\n    return (\n      <Switch\n        {...props}\n        {...getProgressA11y(progressId, loading)}\n        id={id}\n        ref={ref}\n        disabled={disabled}\n        className={cn(\"rmd-switch--async\", className)}\n        labelDisabled={disabled || false}\n        onChange={loading ? noop : onChange}\n      >\n        {loading && (\n          <CircularProgress\n            id={progressId}\n            style={progressStyle}\n            className={cn(\"rmd-switch__progress\", progressClassName)}\n            centered={false}\n          />\n        )}\n      </Switch>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,oBAAoB;AAGtE,SAASC,MAAM,QAAQ,UAAU;AAuBjC;AACA;AACA;AACA,IAAMC,IAAI,GAAG,SAAAA,CAAA;EACX;AAAA,CACD;AAED;;;;AAIA,OAAO,IAAMC,WAAW,GAAGN,UAAU,CACnC,SAASM,WAAWA,CAClBC,EASC,EACDC,GAAG;EATD,IAAAC,EAAE,GAAAF,EAAA,CAAAE,EAAA;IACFC,QAAQ,GAAAH,EAAA,CAAAG,QAAA;IACRC,SAAS,GAAAJ,EAAA,CAAAI,SAAA;IACTC,aAAa,GAAAL,EAAA,CAAAK,aAAA;IACbC,iBAAiB,GAAAN,EAAA,CAAAM,iBAAA;IACjBC,OAAO,GAAAP,EAAA,CAAAO,OAAA;IACPC,QAAQ,GAAAR,EAAA,CAAAQ,QAAA;IACLC,KAAK,GAAAC,MAAA,CAAAV,EAAA,EARV,4FASC,CADS;EAIV,IAAMW,UAAU,GAAG,GAAAC,MAAA,CAAGV,EAAE,aAAU;EAClC,OACEW,IAAA,CAAChB,MAAM,EAAAiB,QAAA,KACDL,KAAK,EACLb,eAAe,CAACe,UAAU,EAAEJ,OAAO,CAAC;IACxCL,EAAE,EAAEA,EAAE;IACND,GAAG,EAAEA,GAAG;IACRE,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEV,EAAE,CAAC,mBAAmB,EAAEU,SAAS,CAAC;IAC7CW,aAAa,EAAEZ,QAAQ,IAAI,KAAK;IAChCK,QAAQ,EAAED,OAAO,GAAGT,IAAI,GAAGU;EAAQ;IAAAQ,QAAA,EAElCT,OAAO,IACNM,IAAA,CAAClB,gBAAgB;MACfO,EAAE,EAAES,UAAU;MACdM,KAAK,EAAEZ,aAAa;MACpBD,SAAS,EAAEV,EAAE,CAAC,sBAAsB,EAAEY,iBAAiB,CAAC;MACxDY,QAAQ,EAAE;IAAK;EAElB,GACM;AAEb,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}