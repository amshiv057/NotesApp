{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nvar context = createContext({\n  root: true,\n  dir: \"ltr\",\n  toggleDir: function () {\n    throw new Error(\"Tried to toggle the current writing direction without initializing the `Dir` component.\");\n  }\n});\nvar Provider = context.Provider;\n/**\n * Gets the writing direction context which provides access to the current `dir`\n * and a `toggleDir` function.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useDir() {\n  var _a = useContext(context),\n    _root = _a.root,\n    current = __rest(_a, [\"root\"]);\n  return current;\n}\n/**\n * @remarks \\@since 2.3.0\n */\nexport var DEFAULT_DIR = function () {\n  var dir = \"ltr\";\n  if (typeof document !== \"undefined\") {\n    var rootDir = document.documentElement.getAttribute(\"dir\");\n    dir = rootDir === \"rtl\" ? \"rtl\" : \"ltr\";\n  }\n  return dir;\n};\n/**\n * The `Dir` component is used to handle the current writing direction within\n * your app as well as conditionally updating the writing direction for small\n * sections in your app. When this component is used for the first time near the\n * root of your React component tree, the current direction will be applied to\n * the root `<html>` element. Otherwise the current dir will be cloned into the\n * child element so it can be passed as a prop.\n *\n * ```tsx\n * // html element will be updated to have `dir=\"ltr\"`\n * ReactDOM.render(<Dir><App /></Dir>, root)\n * ```\n *\n * ```tsx\n * // html element will be updated to have `dir=\"rtl\"` while the `<span>` will\n * // now be `<span dir=\"ltr\">`\n * ReactDOM.render(\n *   <Dir defaultDir=\"rtl\">\n *     <Some>\n *       <Other>\n *         <Components>\n *           <Dir defaultDir=\"ltr\">\n *             <span>Content</span>\n *           </Dir>\n *         </Components>\n *       </Other>\n *     </Some>\n *   </Dir>,\n *   root\n * );\n * ```\n *\n * Note: Since the `dir` is cloned into the child element, you need to make sure\n * that the child is either a DOM element or the `dir` prop is passed from your\n * custom component.\n *\n * @remarks \\@since 2.3.0\n */\nexport function Dir(_a) {\n  var children = _a.children,\n    _b = _a.defaultDir,\n    defaultDir = _b === void 0 ? DEFAULT_DIR : _b;\n  var root = useContext(context).root;\n  var _c = __read(useState(defaultDir), 2),\n    dir = _c[0],\n    setDir = _c[1];\n  useEffect(function () {\n    if (!root || typeof document === \"undefined\") {\n      return;\n    }\n    document.documentElement.setAttribute(\"dir\", dir);\n    return function () {\n      document.documentElement.removeAttribute(\"dir\");\n    };\n  }, [dir, root]);\n  var toggleDir = useCallback(function () {\n    setDir(function (prevDir) {\n      return prevDir === \"ltr\" ? \"rtl\" : \"ltr\";\n    });\n  }, []);\n  var value = useMemo(function () {\n    return {\n      root: false,\n      dir: dir,\n      toggleDir: toggleDir\n    };\n  }, [dir, toggleDir]);\n  var child = Children.only(children);\n  if (!root) {\n    child = cloneElement(child, {\n      dir: dir\n    });\n  }\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: child\n  }));\n}","map":{"version":3,"names":["Children","cloneElement","createContext","useCallback","useContext","useEffect","useMemo","useState","context","root","dir","toggleDir","Error","Provider","useDir","_a","_root","current","__rest","DEFAULT_DIR","document","rootDir","documentElement","getAttribute","Dir","children","_b","defaultDir","_c","__read","setDir","setAttribute","removeAttribute","prevDir","value","child","only","_jsx","__assign"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\Dir.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport {\n  Children,\n  cloneElement,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\n/**\n * Note: unlike the `dir` DOM attribute, the `\"auto\"` value is not supported\n *\n * @remarks \\@since 2.3.0\n */\nexport type WritingDirection = \"ltr\" | \"rtl\";\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport interface WritingDirectionContext {\n  /**\n   * The current writing direction that is being inherited.\n   */\n  dir: WritingDirection;\n\n  /**\n   * Toggles the current writing direction for the first parent `Dir` component.\n   */\n  toggleDir(): void;\n}\n\n/**\n * @internal\n */\ninterface InheritableContext extends WritingDirectionContext {\n  root: boolean;\n}\n\nconst context = createContext<InheritableContext>({\n  root: true,\n  dir: \"ltr\",\n  toggleDir: () => {\n    throw new Error(\n      \"Tried to toggle the current writing direction without initializing the `Dir` component.\"\n    );\n  },\n});\nconst { Provider } = context;\n\n/**\n * Gets the writing direction context which provides access to the current `dir`\n * and a `toggleDir` function.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useDir(): WritingDirectionContext {\n  const { root: _root, ...current } = useContext(context);\n  return current;\n}\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport interface DirProps {\n  /**\n   * A single ReactElement child. If the `Dir` has a parent `Dir`, the child\n   * will have the `dir` prop cloned into this element.\n   */\n  children: ReactElement;\n\n  /**\n   * The default writing direction for your app or a subtree. To change the\n   * current writing direction, use the `useDir` hook to get access to the\n   * current `dir` and the `toggleDir` function.\n   */\n  defaultDir?: WritingDirection | (() => WritingDirection);\n}\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport const DEFAULT_DIR = (): WritingDirection => {\n  let dir: WritingDirection = \"ltr\";\n  if (typeof document !== \"undefined\") {\n    const rootDir = document.documentElement.getAttribute(\"dir\");\n    dir = rootDir === \"rtl\" ? \"rtl\" : \"ltr\";\n  }\n\n  return dir;\n};\n\n/**\n * The `Dir` component is used to handle the current writing direction within\n * your app as well as conditionally updating the writing direction for small\n * sections in your app. When this component is used for the first time near the\n * root of your React component tree, the current direction will be applied to\n * the root `<html>` element. Otherwise the current dir will be cloned into the\n * child element so it can be passed as a prop.\n *\n * ```tsx\n * // html element will be updated to have `dir=\"ltr\"`\n * ReactDOM.render(<Dir><App /></Dir>, root)\n * ```\n *\n * ```tsx\n * // html element will be updated to have `dir=\"rtl\"` while the `<span>` will\n * // now be `<span dir=\"ltr\">`\n * ReactDOM.render(\n *   <Dir defaultDir=\"rtl\">\n *     <Some>\n *       <Other>\n *         <Components>\n *           <Dir defaultDir=\"ltr\">\n *             <span>Content</span>\n *           </Dir>\n *         </Components>\n *       </Other>\n *     </Some>\n *   </Dir>,\n *   root\n * );\n * ```\n *\n * Note: Since the `dir` is cloned into the child element, you need to make sure\n * that the child is either a DOM element or the `dir` prop is passed from your\n * custom component.\n *\n * @remarks \\@since 2.3.0\n */\nexport function Dir({\n  children,\n  defaultDir = DEFAULT_DIR,\n}: DirProps): ReactElement {\n  const { root } = useContext(context);\n  const [dir, setDir] = useState(defaultDir);\n  useEffect(() => {\n    if (!root || typeof document === \"undefined\") {\n      return;\n    }\n\n    document.documentElement.setAttribute(\"dir\", dir);\n\n    return () => {\n      document.documentElement.removeAttribute(\"dir\");\n    };\n  }, [dir, root]);\n\n  const toggleDir = useCallback(() => {\n    setDir((prevDir) => (prevDir === \"ltr\" ? \"rtl\" : \"ltr\"));\n  }, []);\n\n  const value = useMemo<InheritableContext>(\n    () => ({ root: false, dir, toggleDir }),\n    [dir, toggleDir]\n  );\n  let child = Children.only(children);\n  if (!root) {\n    child = cloneElement(child, { dir });\n  }\n\n  return <Provider value={value}>{child}</Provider>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SACEA,QAAQ,EACRC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,OAAO,EACPC,QAAQ,QACH,OAAO;AA+Bd,IAAMC,OAAO,GAAGN,aAAa,CAAqB;EAChDO,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE,KAAK;EACVC,SAAS,EAAE,SAAAA,CAAA;IACT,MAAM,IAAIC,KAAK,CACb,yFAAyF,CAC1F;EACH;CACD,CAAC;AACM,IAAAC,QAAQ,GAAKL,OAAO,CAAAK,QAAZ;AAEhB;;;;;;AAMA,OAAM,SAAUC,MAAMA,CAAA;EACpB,IAAMC,EAAA,GAA8BX,UAAU,CAACI,OAAO,CAAC;IAAzCQ,KAAK,GAAAD,EAAA,CAAAN,IAAA;IAAKQ,OAAO,GAAAC,MAAA,CAAAH,EAAA,EAAzB,QAA2B,CAAsB;EACvD,OAAOE,OAAO;AAChB;AAoBA;;;AAGA,OAAO,IAAME,WAAW,GAAG,SAAAA,CAAA;EACzB,IAAIT,GAAG,GAAqB,KAAK;EACjC,IAAI,OAAOU,QAAQ,KAAK,WAAW,EAAE;IACnC,IAAMC,OAAO,GAAGD,QAAQ,CAACE,eAAe,CAACC,YAAY,CAAC,KAAK,CAAC;IAC5Db,GAAG,GAAGW,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;;EAGzC,OAAOX,GAAG;AACZ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,OAAM,SAAUc,GAAGA,CAACT,EAGT;MAFTU,QAAQ,GAAAV,EAAA,CAAAU,QAAA;IACRC,EAAA,GAAAX,EAAA,CAAAY,UAAwB;IAAxBA,UAAU,GAAAD,EAAA,cAAGP,WAAW,GAAAO,EAAA;EAEhB,IAAAjB,IAAI,GAAKL,UAAU,CAACI,OAAO,CAAC,CAAAC,IAAxB;EACN,IAAAmB,EAAA,GAAAC,MAAA,CAAgBtB,QAAQ,CAACoB,UAAU,CAAC;IAAnCjB,GAAG,GAAAkB,EAAA;IAAEE,MAAM,GAAAF,EAAA,GAAwB;EAC1CvB,SAAS,CAAC;IACR,IAAI,CAACI,IAAI,IAAI,OAAOW,QAAQ,KAAK,WAAW,EAAE;MAC5C;;IAGFA,QAAQ,CAACE,eAAe,CAACS,YAAY,CAAC,KAAK,EAAErB,GAAG,CAAC;IAEjD,OAAO;MACLU,QAAQ,CAACE,eAAe,CAACU,eAAe,CAAC,KAAK,CAAC;IACjD,CAAC;EACH,CAAC,EAAE,CAACtB,GAAG,EAAED,IAAI,CAAC,CAAC;EAEf,IAAME,SAAS,GAAGR,WAAW,CAAC;IAC5B2B,MAAM,CAAC,UAACG,OAAO;MAAK,OAACA,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;IAAlC,CAAmC,CAAC;EAC1D,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,KAAK,GAAG5B,OAAO,CACnB;IAAM,OAAC;MAAEG,IAAI,EAAE,KAAK;MAAEC,GAAG,EAAAA,GAAA;MAAEC,SAAS,EAAAA;IAAA,CAAE;EAAhC,CAAiC,EACvC,CAACD,GAAG,EAAEC,SAAS,CAAC,CACjB;EACD,IAAIwB,KAAK,GAAGnC,QAAQ,CAACoC,IAAI,CAACX,QAAQ,CAAC;EACnC,IAAI,CAAChB,IAAI,EAAE;IACT0B,KAAK,GAAGlC,YAAY,CAACkC,KAAK,EAAE;MAAEzB,GAAG,EAAAA;IAAA,CAAE,CAAC;;EAGtC,OAAO2B,IAAA,CAACxB,QAAQ,EAAAyB,QAAA;IAACJ,KAAK,EAAEA;EAAK;IAAAT,QAAA,EAAGU;EAAK,GAAY;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}