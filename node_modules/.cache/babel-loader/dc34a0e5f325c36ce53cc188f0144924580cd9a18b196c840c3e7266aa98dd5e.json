{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { getContainer } from \"./getContainer\";\n/**\n * This component is a simple wrapper for the `createPortal` API from ReactDOM\n * that will just ensure that `null` is always returned for server side\n * rendering as well as a \"nice\" way to choose specific portal targets or just\n * falling back to the `document.body`.\n */\nexport function Portal(_a) {\n  var into = _a.into,\n    intoId = _a.intoId,\n    children = _a.children;\n  var _b = __read(useState(null), 2),\n    container = _b[0],\n    setContainer = _b[1];\n  // setting the container via useEffect instead of immediately in the render\n  // just so that it doesn't throw an error immediately if the dom hasn't fully\n  // painted after a SSR\n  useEffect(function () {\n    var nextContainer = getContainer(into, intoId);\n    if (container !== nextContainer) {\n      setContainer(nextContainer);\n    }\n  }, [into, intoId, container]);\n  if (!container) {\n    return null;\n  }\n  return createPortal(children, container);\n}","map":{"version":3,"names":["useEffect","useState","createPortal","getContainer","Portal","_a","into","intoId","children","_b","__read","container","setContainer","nextContainer"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\portal\\src\\Portal.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport type { PortalInto } from \"./getContainer\";\nimport { getContainer } from \"./getContainer\";\n\nexport interface PortalProps {\n  /**\n   * Either a function that returns an HTMLElement, an HTMLElement, or a\n   * `document.querySelector` string that will return the HTMLElement to render\n   * the children into. If both the `into` and `intoId` props are `undefined`,\n   * the `document.body` will be chosen instead.\n   *\n   * If the `querySelector` string does not return a valid HTMLElement, an error\n   * will be thrown.\n   */\n  into?: PortalInto;\n\n  /**\n   * The id of an element that the portal should be rendered into. If an element\n   * with the provided id can not be found on the page at the time of mounting,\n   * an error will be thrown.\n   */\n  intoId?: string;\n\n  /**\n   * The children to render within the portal.\n   */\n  children?: ReactNode;\n}\n\n/**\n * This component is a simple wrapper for the `createPortal` API from ReactDOM\n * that will just ensure that `null` is always returned for server side\n * rendering as well as a \"nice\" way to choose specific portal targets or just\n * falling back to the `document.body`.\n */\nexport function Portal({\n  into,\n  intoId,\n  children,\n}: PortalProps): ReactElement | null {\n  const [container, setContainer] = useState<HTMLElement | null>(null);\n\n  // setting the container via useEffect instead of immediately in the render\n  // just so that it doesn't throw an error immediately if the dom hasn't fully\n  // painted after a SSR\n  useEffect(() => {\n    const nextContainer = getContainer(into, intoId);\n    if (container !== nextContainer) {\n      setContainer(nextContainer);\n    }\n  }, [into, intoId, container]);\n\n  if (!container) {\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,WAAW;AAGxC,SAASC,YAAY,QAAQ,gBAAgB;AA2B7C;;;;;;AAMA,OAAM,SAAUC,MAAMA,CAACC,EAIT;MAHZC,IAAI,GAAAD,EAAA,CAAAC,IAAA;IACJC,MAAM,GAAAF,EAAA,CAAAE,MAAA;IACNC,QAAQ,GAAAH,EAAA,CAAAG,QAAA;EAEF,IAAAC,EAAA,GAAAC,MAAA,CAA4BT,QAAQ,CAAqB,IAAI,CAAC;IAA7DU,SAAS,GAAAF,EAAA;IAAEG,YAAY,GAAAH,EAAA,GAAsC;EAEpE;EACA;EACA;EACAT,SAAS,CAAC;IACR,IAAMa,aAAa,GAAGV,YAAY,CAACG,IAAI,EAAEC,MAAM,CAAC;IAChD,IAAII,SAAS,KAAKE,aAAa,EAAE;MAC/BD,YAAY,CAACC,aAAa,CAAC;;EAE/B,CAAC,EAAE,CAACP,IAAI,EAAEC,MAAM,EAAEI,SAAS,CAAC,CAAC;EAE7B,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,IAAI;;EAGb,OAAOT,YAAY,CAACM,QAAQ,EAAEG,SAAS,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}