{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-icon\");\n/**\n * The `SVGIcon` component is used to render inline SVG icons or SVG icons in a\n * sprite map as an icon.\n */\nexport var SVGIcon = forwardRef(function SVGIcon(_a, ref) {\n  var _b = _a[\"aria-hidden\"],\n    ariaHidden = _b === void 0 ? true : _b,\n    _c = _a.focusable,\n    focusable = _c === void 0 ? \"false\" : _c,\n    _d = _a.xmlns,\n    xmlns = _d === void 0 ? \"http://www.w3.org/2000/svg\" : _d,\n    _e = _a.viewBox,\n    viewBox = _e === void 0 ? \"0 0 24 24\" : _e,\n    _f = _a.dense,\n    dense = _f === void 0 ? false : _f,\n    className = _a.className,\n    use = _a.use,\n    propChildren = _a.children,\n    props = __rest(_a, [\"aria-hidden\", \"focusable\", \"xmlns\", \"viewBox\", \"dense\", \"className\", \"use\", \"children\"]);\n  var children = propChildren;\n  if (!children && use) {\n    children = _jsx(\"use\", {\n      xlinkHref: use\n    });\n  }\n  return _jsx(\"svg\", __assign({}, props, {\n    \"aria-hidden\": ariaHidden,\n    ref: ref,\n    className: cn(block({\n      svg: true,\n      dense: dense\n    }), className),\n    focusable: focusable,\n    xmlns: xmlns,\n    viewBox: viewBox\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","bem","block","SVGIcon","_a","ref","_b","ariaHidden","_c","focusable","_d","xmlns","_e","viewBox","_f","dense","className","use","propChildren","children","props","__rest","_jsx","xlinkHref","__assign","svg"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\icon\\src\\SVGIcon.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface SVGIconProps extends HTMLAttributes<SVGSVGElement> {\n  /**\n   * Boolean if the SVG should gain the `focusable` attribute. This is disabled\n   * by default since IE11 and Edge actually default this to true and keyboard's\n   * will tab focus all SVGs.\n   */\n  focusable?: \"false\" | \"true\" | boolean;\n\n  /**\n   * The `viewBox` attribute allows you to specify that a given set of graphics\n   * stretch to fit a particular container element.\n   *\n   * The value of the `viewBox` attribute is a list of four numbers min-x,\n   * min-y, width and height, separated by white space and/or a comma, which\n   * specify a rectangle in user space which should be mapped to the bounds of\n   * the viewport established by the given element, taking into account\n   * attribute `preserveAspectRatio`.\n   *\n   * Negative values for width or height are not permitted and a value of zero\n   * disables rendering of the element. An optional `viewbox` for the SVG.\n   *\n   * For example, if the SVG element is 250 (width) by 200 (height) and you\n   * provide `viewBox=\"0 0 25 20\"`, the coordinates inside the SVG will go from\n   * the top left corner (0, 0) to the bottom right (25, 20) and each unit will\n   * be worth `10px`.\n   */\n  viewBox?: string;\n\n  /**\n   * An optional `xmlns` string to provide. The `use` prop will not work without\n   * this prop defined.\n   */\n  xmlns?: string;\n\n  /**\n   * This should be a link to a part of an SVG sprite map. So normally one of\n   * the following:\n   * - `'#some-custom-svg'`\n   * - `'/images/spritemap.svg#some-custom-svg'`\n   *\n   * This prop **should not** be used with the `children` prop as only one will\n   * be rendered.\n   *\n   * @remarks\n   *\n   * NOTE: IE **does not support** external SVGs. Please see the demo for more\n   * details.\n   */\n  use?: string;\n\n  /**\n   * Boolean if the icon should use the dense spec.\n   */\n  dense?: boolean;\n\n  /**\n   * Any `<svg>` children to render to create your icon. This can not be used\n   * with the `use` prop.\n   */\n  children?: ReactNode;\n}\n\nconst block = bem(\"rmd-icon\");\n\n/**\n * The `SVGIcon` component is used to render inline SVG icons or SVG icons in a\n * sprite map as an icon.\n */\nexport const SVGIcon = forwardRef<SVGSVGElement, SVGIconProps>(function SVGIcon(\n  {\n    \"aria-hidden\": ariaHidden = true,\n    focusable = \"false\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    viewBox = \"0 0 24 24\",\n    dense = false,\n    className,\n    use,\n    children: propChildren,\n    ...props\n  },\n  ref\n) {\n  let children = propChildren;\n  if (!children && use) {\n    children = <use xlinkHref={use} />;\n  }\n\n  return (\n    <svg\n      {...props}\n      aria-hidden={ariaHidden}\n      ref={ref}\n      className={cn(block({ svg: true, dense }), className)}\n      focusable={focusable}\n      xmlns={xmlns}\n      viewBox={viewBox}\n    >\n      {children}\n    </svg>\n  );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAgErC,IAAMC,KAAK,GAAGD,GAAG,CAAC,UAAU,CAAC;AAE7B;;;;AAIA,OAAO,IAAME,OAAO,GAAGJ,UAAU,CAA8B,SAASI,OAAOA,CAC7EC,EAUC,EACDC,GAAG;EAVD,IAAAC,EAAA,GAAAF,EAAA,eAAgC;IAAjBG,UAAU,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAChCE,EAAA,GAAAJ,EAAA,CAAAK,SAAmB;IAAnBA,SAAS,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA;IACnBE,EAAA,GAAAN,EAAA,CAAAO,KAAoC;IAApCA,KAAK,GAAAD,EAAA,cAAG,4BAA4B,GAAAA,EAAA;IACpCE,EAAA,GAAAR,EAAA,CAAAS,OAAqB;IAArBA,OAAO,GAAAD,EAAA,cAAG,WAAW,GAAAA,EAAA;IACrBE,EAAA,GAAAV,EAAA,CAAAW,KAAa;IAAbA,KAAK,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACbE,SAAS,GAAAZ,EAAA,CAAAY,SAAA;IACTC,GAAG,GAAAb,EAAA,CAAAa,GAAA;IACOC,YAAY,GAAAd,EAAA,CAAAe,QAAA;IACnBC,KAAK,GAAAC,MAAA,CAAAjB,EAAA,EATV,yFAUC,CADS;EAIV,IAAIe,QAAQ,GAAGD,YAAY;EAC3B,IAAI,CAACC,QAAQ,IAAIF,GAAG,EAAE;IACpBE,QAAQ,GAAGG,IAAA;MAAKC,SAAS,EAAEN;IAAG,EAAI;;EAGpC,OACEK,IAAA,QAAAE,QAAA,KACMJ,KAAK;IAAA,eACIb,UAAU;IACvBF,GAAG,EAAEA,GAAG;IACRW,SAAS,EAAEhB,EAAE,CAACE,KAAK,CAAC;MAAEuB,GAAG,EAAE,IAAI;MAAEV,KAAK,EAAAA;IAAA,CAAE,CAAC,EAAEC,SAAS,CAAC;IACrDP,SAAS,EAAEA,SAAS;IACpBE,KAAK,EAAEA,KAAK;IACZE,OAAO,EAAEA;EAAO;IAAAM,QAAA,EAEfA;EAAQ,GACL;AAEV,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}