{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, forwardRef } from \"react\";\nimport { GridListCell } from \"./GridListCell\";\nimport { DEFAULT_GRID_LIST_MAX_CELL_SIZE, DEFAULT_GRID_LIST_PADDING, GridListSizeProvider, useGridList } from \"./useGridList\";\nvar isRenderFunction = function (children) {\n  return typeof children === \"function\";\n};\n/**\n * The `GridList` component is a different way to render a list of data where\n * the number of columns is dynamic and based on the max-width for each cell.\n * Instead of setting a percentage width to each cell based on the number of\n * columns, this will dynamically add columns to fill up the remaining space and\n * have each cell grow up to a set max-width. A really good use-case for this is\n * displaying a list of images or thumbnails and allowing the user to see a full\n * screen preview once selected/clicked.\n */\nexport var GridList = forwardRef(function GridList(_a, forwardedRef) {\n  var style = _a.style,\n    className = _a.className,\n    children = _a.children,\n    _b = _a.clone,\n    clone = _b === void 0 ? false : _b,\n    _c = _a.wrapOnly,\n    wrapOnly = _c === void 0 ? false : _c,\n    cellMargin = _a.cellMargin,\n    defaultSize = _a.defaultSize,\n    _d = _a.maxCellSize,\n    maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d,\n    _e = _a.containerPadding,\n    containerPadding = _e === void 0 ? DEFAULT_GRID_LIST_PADDING : _e,\n    _f = _a.disableHeightObserver,\n    disableHeightObserver = _f === void 0 ? false : _f,\n    _g = _a.disableWidthObserver,\n    disableWidthObserver = _g === void 0 ? false : _g,\n    props = __rest(_a, [\"style\", \"className\", \"children\", \"clone\", \"wrapOnly\", \"cellMargin\", \"defaultSize\", \"maxCellSize\", \"containerPadding\", \"disableHeightObserver\", \"disableWidthObserver\"]);\n  var _h = __read(useGridList({\n      ref: forwardedRef,\n      style: style,\n      className: className,\n      cellMargin: cellMargin,\n      defaultSize: defaultSize,\n      maxCellSize: maxCellSize,\n      containerPadding: containerPadding,\n      disableHeight: disableHeightObserver,\n      disableWidth: disableWidthObserver\n    }), 2),\n    gridListProps = _h[0],\n    gridSize = _h[1];\n  var content = null;\n  if (isRenderFunction(children)) {\n    content = children(gridSize);\n  } else if (clone || wrapOnly) {\n    content = Children.map(children, function (child) {\n      return child && _jsx(GridListCell, __assign({\n        clone: clone\n      }, {\n        children: child\n      }));\n    });\n  } else {\n    content = children;\n  }\n  return _jsx(GridListSizeProvider, __assign({\n    value: gridSize\n  }, {\n    children: _jsx(\"div\", __assign({}, props, gridListProps, {\n      children: content\n    }))\n  }));\n});","map":{"version":3,"names":["Children","forwardRef","GridListCell","DEFAULT_GRID_LIST_MAX_CELL_SIZE","DEFAULT_GRID_LIST_PADDING","GridListSizeProvider","useGridList","isRenderFunction","children","GridList","_a","forwardedRef","style","className","_b","clone","_c","wrapOnly","cellMargin","defaultSize","_d","maxCellSize","_e","containerPadding","_f","disableHeightObserver","_g","disableWidthObserver","props","__rest","_h","__read","ref","disableHeight","disableWidth","gridListProps","gridSize","content","map","child","_jsx","__assign","value"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\layout\\GridList.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { Children, forwardRef } from \"react\";\n\nimport { GridListCell } from \"./GridListCell\";\nimport type { GridListSize, UseGridListOptions } from \"./useGridList\";\nimport {\n  DEFAULT_GRID_LIST_MAX_CELL_SIZE,\n  DEFAULT_GRID_LIST_PADDING,\n  GridListSizeProvider,\n  useGridList,\n} from \"./useGridList\";\n\n/**\n * The children render function that will be provided the current grid list size\n * object and should return renderable elements.\n *\n * Note: The first time this is called, the `columns` and `cellWidth` will be\n * the `defaultSize`.  Once the `GridList` has been fully mounted in the DOM, it\n * will begin the sizing calculations and update with the \"real\" values. This\n * doesn't cause any problems if you are only rendering client side, but it\n * might mess up server-side rendering, so it is recommended to update the\n * `defaultSize` when server-side rendering if this can be \"known\" service-side\n * in your app.\n */\nexport type RenderGridListChildren = (size: GridListSize) => ReactNode;\n\nexport interface GridListProps\n  extends HTMLAttributes<HTMLDivElement>,\n    UseGridListOptions {\n  /**\n   * Boolean if the resize observer should stop tracking width changes within\n   * the `GridList`. This should normally stay as `false` since tracking width\n   * changes will allow for dynamic content being added to the list to not mess\n   * up the grid calculation when the user is on an OS that shows scrollbars.\n   */\n  disableHeightObserver?: boolean;\n\n  /**\n   * Boolean if the resize observer should stop tracking width changes within\n   * the `GridList`. This should normally stay as `false` since tracking width\n   * changes will allow for dynamic content being added to the list to not mess\n   * up the grid calculation when the user is on an OS that shows scrollbars.\n   */\n  disableWidthObserver?: boolean;\n\n  /**\n   * The children to display within the grid list. This can either be a callback\n   * function that will provide the current calculated width for each cell that\n   * should return renderable elements or any renderable elements that are sized\n   * with the `--rmd-cell-width` css variable.\n   */\n  children: ReactNode | RenderGridListChildren;\n\n  /**\n   * Boolean if the current cell sizing should automatically be cloned into each\n   * child. This will only work if the `children` is renderable element or a\n   * list of renderable elements that accept the `style` and `className` props.\n   */\n  clone?: boolean;\n\n  /**\n   * Boolean if each child within the `GridList` should be wrapped with the\n   * `GridListCell` component.  This will only work if the `children` is not a\n   * `function`.\n   */\n  wrapOnly?: boolean;\n}\n\nconst isRenderFunction = (\n  children: GridListProps[\"children\"]\n): children is RenderGridListChildren => typeof children === \"function\";\n\n/**\n * The `GridList` component is a different way to render a list of data where\n * the number of columns is dynamic and based on the max-width for each cell.\n * Instead of setting a percentage width to each cell based on the number of\n * columns, this will dynamically add columns to fill up the remaining space and\n * have each cell grow up to a set max-width. A really good use-case for this is\n * displaying a list of images or thumbnails and allowing the user to see a full\n * screen preview once selected/clicked.\n */\nexport const GridList = forwardRef<HTMLDivElement, GridListProps>(\n  function GridList(\n    {\n      style,\n      className,\n      children,\n      clone = false,\n      wrapOnly = false,\n      cellMargin,\n      defaultSize,\n      maxCellSize = DEFAULT_GRID_LIST_MAX_CELL_SIZE,\n      containerPadding = DEFAULT_GRID_LIST_PADDING,\n      disableHeightObserver = false,\n      disableWidthObserver = false,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const [gridListProps, gridSize] = useGridList({\n      ref: forwardedRef,\n      style,\n      className,\n      cellMargin,\n      defaultSize,\n      maxCellSize,\n      containerPadding,\n      disableHeight: disableHeightObserver,\n      disableWidth: disableWidthObserver,\n    });\n\n    let content: ReactNode = null;\n    if (isRenderFunction(children)) {\n      content = children(gridSize);\n    } else if (clone || wrapOnly) {\n      content = Children.map(\n        children,\n        (child) => child && <GridListCell clone={clone}>{child}</GridListCell>\n      );\n    } else {\n      content = children;\n    }\n\n    return (\n      <GridListSizeProvider value={gridSize}>\n        <div {...props} {...gridListProps}>\n          {content}\n        </div>\n      </GridListSizeProvider>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAE5C,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SACEC,+BAA+B,EAC/BC,yBAAyB,EACzBC,oBAAoB,EACpBC,WAAW,QACN,eAAe;AA0DtB,IAAMC,gBAAgB,GAAG,SAAAA,CACvBC,QAAmC;EACI,cAAOA,QAAQ,KAAK,UAAU;AAA9B,CAA8B;AAEvE;;;;;;;;;AASA,OAAO,IAAMC,QAAQ,GAAGR,UAAU,CAChC,SAASQ,QAAQA,CACfC,EAaC,EACDC,YAAY;EAbV,IAAAC,KAAK,GAAAF,EAAA,CAAAE,KAAA;IACLC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IACTL,QAAQ,GAAAE,EAAA,CAAAF,QAAA;IACRM,EAAA,GAAAJ,EAAA,CAAAK,KAAa;IAAbA,KAAK,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACbE,EAAA,GAAAN,EAAA,CAAAO,QAAgB;IAAhBA,QAAQ,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IAChBE,UAAU,GAAAR,EAAA,CAAAQ,UAAA;IACVC,WAAW,GAAAT,EAAA,CAAAS,WAAA;IACXC,EAAA,GAAAV,EAAA,CAAAW,WAA6C;IAA7CA,WAAW,GAAAD,EAAA,cAAGjB,+BAA+B,GAAAiB,EAAA;IAC7CE,EAAA,GAAAZ,EAAA,CAAAa,gBAA4C;IAA5CA,gBAAgB,GAAAD,EAAA,cAAGlB,yBAAyB,GAAAkB,EAAA;IAC5CE,EAAA,GAAAd,EAAA,CAAAe,qBAA6B;IAA7BA,qBAAqB,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IAC7BE,EAAA,GAAAhB,EAAA,CAAAiB,oBAA4B;IAA5BA,oBAAoB,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACzBE,KAAK,GAAAC,MAAA,CAAAnB,EAAA,EAZV,wKAaC,CADS;EAIJ,IAAAoB,EAAA,GAAAC,MAAA,CAA4BzB,WAAW,CAAC;MAC5C0B,GAAG,EAAErB,YAAY;MACjBC,KAAK,EAAAA,KAAA;MACLC,SAAS,EAAAA,SAAA;MACTK,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,WAAW,EAAAA,WAAA;MACXE,gBAAgB,EAAAA,gBAAA;MAChBU,aAAa,EAAER,qBAAqB;MACpCS,YAAY,EAAEP;KACf,CAAC;IAVKQ,aAAa,GAAAL,EAAA;IAAEM,QAAQ,GAAAN,EAAA,GAU5B;EAEF,IAAIO,OAAO,GAAc,IAAI;EAC7B,IAAI9B,gBAAgB,CAACC,QAAQ,CAAC,EAAE;IAC9B6B,OAAO,GAAG7B,QAAQ,CAAC4B,QAAQ,CAAC;GAC7B,MAAM,IAAIrB,KAAK,IAAIE,QAAQ,EAAE;IAC5BoB,OAAO,GAAGrC,QAAQ,CAACsC,GAAG,CACpB9B,QAAQ,EACR,UAAC+B,KAAK;MAAK,OAAAA,KAAK,IAAIC,IAAA,CAACtC,YAAY,EAAAuC,QAAA;QAAC1B,KAAK,EAAEA;MAAK;QAAAP,QAAA,EAAG+B;MAAK,GAAgB;IAA3D,CAA2D,CACvE;GACF,MAAM;IACLF,OAAO,GAAG7B,QAAQ;;EAGpB,OACEgC,IAAA,CAACnC,oBAAoB,EAAAoC,QAAA;IAACC,KAAK,EAAEN;EAAQ;IAAA5B,QAAA,EACnCgC,IAAA,QAAAC,QAAA,KAASb,KAAK,EAAMO,aAAa;MAAA3B,QAAA,EAC9B6B;IAAO;EACJ,GACe;AAE3B,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}