{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Overlay } from \"@react-md/overlay\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { bem, FocusContainer, useCloseOnEscape, useScrollLock } from \"@react-md/utils\";\nimport { useNestedDialogFixes } from \"./useNestedDialogFixes\";\n// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.\nvar noop = function () {\n  // do nothing\n};\nvar block = bem(\"rmd-dialog\");\n/** @remarks \\@since 4.0.0 */\nexport var DEFAULT_DIALOG_CLASSNAMES = {\n  appear: \"rmd-dialog--enter\",\n  appearActive: \"rmd-dialog--enter-active\",\n  enter: \"rmd-dialog--enter\",\n  enterActive: \"rmd-dialog--enter-active\",\n  exit: \"rmd-dialog--exit\",\n  exitActive: \"rmd-dialog--exit-active\"\n};\n/** @remarks \\@since 4.0.0 */\nexport var DEFAULT_DIALOG_TIMEOUT = {\n  enter: 200,\n  exit: 150\n};\n/**\n * A dialog is used to show important content above all other elements within\n * the page. This is normally used for alerts, confirmations, or just temporary\n * content. The dialog within react-md also has the additional features for\n * accessibility:\n *\n * - automatically focus the dialog on mount for keyboard users\n * - prevent elements outside of the dialog to be focused\n * - close via the escape key\n * - prevent the page outside of the dialog from being scrolled\n *\n * To complete the dialog accessibility requirements, every dialog **must**\n * provide an `id` and either an `aria-label` describing the dialog or an\n * `aria-labelledby` id that points to an element describing this dialog.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import {\n *   Dialog,\n *   DialogHeader,\n *   DialogTitle,\n *   DialogContent,\n *   DialogFooter,\n * } from \"@react-md/dialog\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [visible, setVisible] = useState(false);\n *   const hide = (): void => {\n *     setVisible(false);\n *   };\n *\n *   return (\n *     <>\n *       <Button onClick={() => setVisible(!visible)}>\n *         Show Dialog\n *       </Button>\n *       <Dialog\n *         aria-labelledby=\"dialog-title\"\n *         id=\"simple-dialog\"\n *         visible={visible}\n *         onRequestClose={hide}\n *       >\n *         <DialogHeader>\n *           <DialogTitle id=\"dialog-title\">Simple Dialog</DialogTitle>\n *         </DialogHeader>\n *         <DialogContent>\n *           <Typography margin=\"none\">This is some text in a dialog.</Typography>\n *         </DialogContent>\n *         <DialogFooter>\n *           <Button onClick={hide}>\n *             Close\n *           </Button>\n *         </DialogFooter>\n *       </Dialog>\n *     </>\n *   );\n * }\n * ```\n */\nexport var Dialog = forwardRef(function Dialog(_a, nodeRef) {\n  var _b = _a.component,\n    component = _b === void 0 ? \"div\" : _b,\n    _c = _a.tabIndex,\n    tabIndex = _c === void 0 ? -1 : _c,\n    children = _a.children,\n    className = _a.className,\n    containerStyle = _a.containerStyle,\n    containerClassName = _a.containerClassName,\n    propOverlay = _a.overlay,\n    overlayStyle = _a.overlayStyle,\n    overlayClassName = _a.overlayClassName,\n    _d = _a.overlayHidden,\n    overlayHidden = _d === void 0 ? false : _d,\n    visible = _a.visible,\n    onRequestClose = _a.onRequestClose,\n    _e = _a.forceContainer,\n    forceContainer = _e === void 0 ? false : _e,\n    _f = _a.defaultFocus,\n    defaultFocus = _f === void 0 ? \"first\" : _f,\n    _g = _a.portal,\n    portal = _g === void 0 ? true : _g,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    _h = _a.appear,\n    appear = _h === void 0 ? false : _h,\n    _j = _a.enter,\n    enter = _j === void 0 ? true : _j,\n    _k = _a.exit,\n    exit = _k === void 0 ? true : _k,\n    _l = _a.disableTransition,\n    disableTransition = _l === void 0 ? false : _l,\n    _m = _a.classNames,\n    classNames = _m === void 0 ? DEFAULT_DIALOG_CLASSNAMES : _m,\n    _o = _a.timeout,\n    timeout = _o === void 0 ? DEFAULT_DIALOG_TIMEOUT : _o,\n    _p = _a.temporary,\n    temporary = _p === void 0 ? true : _p,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    _q = _a.modal,\n    modal = _q === void 0 ? false : _q,\n    _r = _a.role,\n    role = _r === void 0 ? \"dialog\" : _r,\n    _s = _a.type,\n    type = _s === void 0 ? \"centered\" : _s,\n    _t = _a.disableScrollLock,\n    disableScrollLock = _t === void 0 ? false : _t,\n    _u = _a.disableEscapeClose,\n    propDisableEscapeClose = _u === void 0 ? false : _u,\n    _v = _a.disableFocusContainer,\n    disableFocusContainer = _v === void 0 ? false : _v,\n    _w = _a.disableTabFocusWrap,\n    disableTabFocusWrap = _w === void 0 ? false : _w,\n    _x = _a.disableFocusOnMount,\n    disableFocusOnMount = _x === void 0 ? false : _x,\n    _y = _a.disableFocusOnUnmount,\n    disableFocusOnUnmount = _y === void 0 ? false : _y,\n    _z = _a.disableNestedDialogFixes,\n    disableNestedDialogFixes = _z === void 0 ? false : _z,\n    onKeyDown = _a.onKeyDown,\n    overlayProps = _a.overlayProps,\n    props = __rest(_a, [\"component\", \"tabIndex\", \"children\", \"className\", \"containerStyle\", \"containerClassName\", \"overlay\", \"overlayStyle\", \"overlayClassName\", \"overlayHidden\", \"visible\", \"onRequestClose\", \"forceContainer\", \"defaultFocus\", \"portal\", \"portalInto\", \"portalIntoId\", \"appear\", \"enter\", \"exit\", \"disableTransition\", \"classNames\", \"timeout\", \"temporary\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"modal\", \"role\", \"type\", \"disableScrollLock\", \"disableEscapeClose\", \"disableFocusContainer\", \"disableTabFocusWrap\", \"disableFocusOnMount\", \"disableFocusOnUnmount\", \"disableNestedDialogFixes\", \"onKeyDown\", \"overlayProps\"]);\n  var id = props.id;\n  var isNoneRole = role === \"none\";\n  var isFullPage = type === \"full-page\";\n  var isCentered = type === \"centered\";\n  var _0 = useNestedDialogFixes({\n      id: id,\n      visible: visible,\n      disabled: disableNestedDialogFixes,\n      disableEscapeClose: propDisableEscapeClose\n    }),\n    disableOverlay = _0.disableOverlay,\n    disableEscapeClose = _0.disableEscapeClose;\n  useScrollLock(visible && !isNoneRole && !disableScrollLock);\n  var overlayEl = null;\n  if (typeof propOverlay === \"boolean\" ? propOverlay : !isFullPage) {\n    // do not add the portal props to the overlay element since the portalling\n    // is handled in here. With how portals work, this would be rendered **after**\n    // the dialog instead of before which breaks some dialog styles\n    overlayEl = _jsx(Overlay, __assign({\n      id: \"\".concat(id, \"-overlay\")\n    }, overlayProps, {\n      style: overlayStyle,\n      className: cn(\"rmd-dialog-overlay\", overlayClassName),\n      hidden: overlayHidden || disableOverlay,\n      visible: visible,\n      clickable: !modal,\n      onRequestClose: modal ? noop : onRequestClose\n    }));\n  }\n  var _1 = useCSSTransition({\n      nodeRef: nodeRef,\n      transitionIn: visible,\n      timeout: timeout,\n      classNames: classNames,\n      className: cn(block({\n        centered: isCentered,\n        \"full-page\": isFullPage\n      }), className),\n      appear: !disableTransition && appear,\n      enter: !disableTransition && enter,\n      exit: !disableTransition && exit,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      temporary: temporary\n    }),\n    elementProps = _1.elementProps,\n    rendered = _1.rendered;\n  var dialog = _jsx(FocusContainer, __assign({}, props, elementProps, {\n    role: isNoneRole ? undefined : role,\n    \"aria-modal\": !isNoneRole && !!overlayEl || undefined,\n    tabIndex: tabIndex,\n    component: component,\n    defaultFocus: defaultFocus,\n    disableTabFocusWrap: isNoneRole || disableTabFocusWrap || disableFocusContainer,\n    disableFocusOnMount: isNoneRole || disableFocusContainer || disableFocusOnMount,\n    disableFocusOnMountScroll: true,\n    disableFocusOnUnmount: isNoneRole || disableFocusContainer || disableFocusOnUnmount,\n    onKeyDown: useCloseOnEscape(onRequestClose, disableEscapeClose || isNoneRole, onKeyDown)\n  }, {\n    children: children\n  }));\n  if (isCentered || forceContainer) {\n    // the additional container is only required when we don't have a full page dialog. it's just\n    // used to apply flex center to the dialog and add some margin\n    dialog = _jsx(\"span\", __assign({\n      id: \"\".concat(id, \"-container\"),\n      style: containerStyle,\n      className: cn(\"rmd-dialog-container\", containerClassName)\n    }, {\n      children: dialog\n    }));\n  }\n  return _jsxs(ConditionalPortal, __assign({\n    portal: !isNoneRole && portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: [overlayEl, rendered && dialog]\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","Overlay","ConditionalPortal","useCSSTransition","bem","FocusContainer","useCloseOnEscape","useScrollLock","useNestedDialogFixes","noop","block","DEFAULT_DIALOG_CLASSNAMES","appear","appearActive","enter","enterActive","exit","exitActive","DEFAULT_DIALOG_TIMEOUT","Dialog","_a","nodeRef","_b","component","_c","tabIndex","children","className","containerStyle","containerClassName","propOverlay","overlay","overlayStyle","overlayClassName","_d","overlayHidden","visible","onRequestClose","_e","forceContainer","_f","defaultFocus","_g","portal","portalInto","portalIntoId","_h","_j","_k","_l","disableTransition","_m","classNames","_o","timeout","_p","temporary","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_q","modal","_r","role","_s","type","_t","disableScrollLock","_u","disableEscapeClose","propDisableEscapeClose","_v","disableFocusContainer","_w","disableTabFocusWrap","_x","disableFocusOnMount","_y","disableFocusOnUnmount","_z","disableNestedDialogFixes","onKeyDown","overlayProps","props","__rest","id","isNoneRole","isFullPage","isCentered","_0","disabled","disableOverlay","overlayEl","_jsx","__assign","concat","style","hidden","clickable","_1","transitionIn","centered","elementProps","rendered","dialog","undefined","disableFocusOnMountScroll","_jsxs"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\dialog\\src\\Dialog.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Overlay } from \"@react-md/overlay\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type {\n  CSSTransitionClassNames,\n  CSSTransitionComponentProps,\n  TransitionActions,\n  TransitionTimeout,\n} from \"@react-md/transition\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport type {\n  FocusContainerOptionsProps,\n  LabelRequiredForA11y,\n} from \"@react-md/utils\";\nimport {\n  bem,\n  FocusContainer,\n  useCloseOnEscape,\n  useScrollLock,\n} from \"@react-md/utils\";\n\nimport { useNestedDialogFixes } from \"./useNestedDialogFixes\";\n\nexport interface BaseDialogProps\n  extends CSSTransitionComponentProps,\n    TransitionActions,\n    RenderConditionalPortalProps,\n    FocusContainerOptionsProps,\n    HTMLAttributes<HTMLDivElement> {\n  /**\n   * An id required for a11y for the dialog.\n   */\n  id: string;\n\n  /**\n   * The role for the dialog component. This should normally stay as the default\n   * of `\"dialog\"` **unless** you want the screen reader to interrupt the normal\n   * workflow for this message. It is good to set this value to `\"alertdialog\"`\n   * error message confirmations or general confirmation prompts.\n   *\n   * Note: The `dialog` technically supports being rendered as a `menu`, but\n   * this is really only for mobile sheet support and will not provide the menu\n   * keyboard functionality automatically.\n   */\n  role?: \"dialog\" | \"alertdialog\" | \"menu\" | \"none\";\n\n  /**\n   * A label to apply to the dialog. Either this or the `aria-labelledby` prop\n   * are required for accessibility.\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * An id pointing to an element that is a label for the dialog. Either this or\n   * the `aria-label` prop are required for accessibility.\n   */\n  \"aria-labelledby\"?: string;\n\n  /**\n   * Boolean if the dialog is currently visible.\n   */\n  visible: boolean;\n\n  /**\n   * A function used to close the dialog when the overlay is clicked or the\n   * escape key is pressed when the `modal` prop is not enabled.\n   */\n  onRequestClose(): void;\n\n  /**\n   * The tab index for the sheet. This should normally stay at `-1`.\n   */\n  tabIndex?: number;\n\n  /**\n   * Boolean if there should be an overlay displayed with the sheet. This is\n   * recommended/required on mobile devices.\n   */\n  overlay?: boolean;\n\n  /**\n   * An optional style to apply to the overlay.\n   */\n  overlayStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the overlay.\n   */\n  overlayClassName?: string;\n\n  /**\n   * Boolean if the overlay should be \"hidden\" from the user once it's visible\n   * be keeping the opacity set to `0`. This is really only used for custom\n   * dialogs like the `FixedDialog`.\n   */\n  overlayHidden?: boolean;\n\n  /**\n   * An optional style to apply to the dialog container when the `type` is set\n   * to `\"centered\"` or when the `forceContainer` prop is enabled. You probably\n   * don't want to use this prop in most cases.\n   */\n  containerStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the dialog container when the `type` is\n   * set to `\"centered\"` or when the `forceContainer` prop is enabled. You\n   * probably don't want to use this prop in most cases.\n   */\n  containerClassName?: string;\n\n  /**\n   * Boolean if the dialog should be \"forcefully\" wrapped in the\n   * `.md-dialog-container` element. You probably don't want to use this in most\n   * cases, but the container element will be used when the `type` prop is set\n   * to `\"centered\"`.\n   */\n  forceContainer?: boolean;\n\n  /**\n   * Boolean if the dialog should act as a modal. This means that the user will\n   * no longer be able to close the dialog by pressing the escape key or by\n   * clicking on the overlay. You will be required to update the dialog to have\n   * an action that closes the dialog instead.\n   */\n  modal?: boolean;\n\n  /**\n   * The display type for the modal. If you would like to position the modal in\n   * different locations within the page, you should set this prop to `\"custom\"`\n   * and add custom styles to position it instead.\n   */\n  type?: \"full-page\" | \"centered\" | \"custom\";\n\n  /**\n   * Either the \"first\" or \"last\" string to focus the first or last focusable\n   * element within the container or a query selector string to find a focusable\n   * element within the container.\n   */\n  defaultFocus?: \"first\" | \"last\" | string;\n\n  /**\n   * Boolean if the dialog should no longer add scroll locking to the page when\n   * visible. You normally want this prop to stay `false`, but it is useful when\n   * using custom dialogs that are more for popovers and don't require full user\n   * attention.\n   */\n  disableScrollLock?: boolean;\n\n  /**\n   * Boolean if the ability to close the dialog via the escape key should be\n   * disabled. You should really not be using this as it breaks accessibility in\n   * most cases.\n   *\n   * Note: When the `modal` prop is enabled, this flag will be considered `true`\n   * as well so that the escape keypress no longer closes the dialog.\n   */\n  disableEscapeClose?: boolean;\n\n  /**\n   * Boolean if the dialog's focus container logic should be disabled. This\n   * should normally be kept at the default of `false` unless implementing a\n   * custom dialog that does not require consistent user focus.\n   */\n  disableFocusContainer?: boolean;\n\n  /**\n   * The Dialog component will attempt to automatically fix nested dialogs\n   * behind the scenes using the `NestedDialogContextProvider` component. This\n   * prop will disable that feature if it does not seem to be working as\n   * expected.\n   */\n  disableNestedDialogFixes?: boolean;\n\n  /**\n   * Boolean if the `appear`, `enter`, and `exit` transitions should be disabled\n   * for the dialog.  This is just a shortcut so all three of those props don't\n   * need to be disabled.\n   */\n  disableTransition?: boolean;\n\n  /**\n   * The component to render the dialog as. This really shouldn't be used\n   * outside of the `@react-md/layout` and `@react-md/sheet` packages to\n   * conditionally render a navigation panel.\n   */\n  component?: \"div\" | \"nav\";\n\n  /**\n   * Any additional props that should be passed to the `Overlay` element.\n   *\n   * @remarks \\@since 5.0.0\n   */\n  overlayProps?: Omit<HTMLAttributes<HTMLSpanElement>, \"style\" | \"className\">;\n}\n\nexport type DialogProps = LabelRequiredForA11y<BaseDialogProps>;\n\n// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.\nconst noop = (): void => {\n  // do nothing\n};\nconst block = bem(\"rmd-dialog\");\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_DIALOG_CLASSNAMES: Readonly<CSSTransitionClassNames> = {\n  appear: \"rmd-dialog--enter\",\n  appearActive: \"rmd-dialog--enter-active\",\n  enter: \"rmd-dialog--enter\",\n  enterActive: \"rmd-dialog--enter-active\",\n  exit: \"rmd-dialog--exit\",\n  exitActive: \"rmd-dialog--exit-active\",\n};\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_DIALOG_TIMEOUT: Readonly<TransitionTimeout> = {\n  enter: 200,\n  exit: 150,\n};\n\n/**\n * A dialog is used to show important content above all other elements within\n * the page. This is normally used for alerts, confirmations, or just temporary\n * content. The dialog within react-md also has the additional features for\n * accessibility:\n *\n * - automatically focus the dialog on mount for keyboard users\n * - prevent elements outside of the dialog to be focused\n * - close via the escape key\n * - prevent the page outside of the dialog from being scrolled\n *\n * To complete the dialog accessibility requirements, every dialog **must**\n * provide an `id` and either an `aria-label` describing the dialog or an\n * `aria-labelledby` id that points to an element describing this dialog.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import {\n *   Dialog,\n *   DialogHeader,\n *   DialogTitle,\n *   DialogContent,\n *   DialogFooter,\n * } from \"@react-md/dialog\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [visible, setVisible] = useState(false);\n *   const hide = (): void => {\n *     setVisible(false);\n *   };\n *\n *   return (\n *     <>\n *       <Button onClick={() => setVisible(!visible)}>\n *         Show Dialog\n *       </Button>\n *       <Dialog\n *         aria-labelledby=\"dialog-title\"\n *         id=\"simple-dialog\"\n *         visible={visible}\n *         onRequestClose={hide}\n *       >\n *         <DialogHeader>\n *           <DialogTitle id=\"dialog-title\">Simple Dialog</DialogTitle>\n *         </DialogHeader>\n *         <DialogContent>\n *           <Typography margin=\"none\">This is some text in a dialog.</Typography>\n *         </DialogContent>\n *         <DialogFooter>\n *           <Button onClick={hide}>\n *             Close\n *           </Button>\n *         </DialogFooter>\n *       </Dialog>\n *     </>\n *   );\n * }\n * ```\n */\nexport const Dialog = forwardRef<HTMLDivElement, DialogProps>(function Dialog(\n  {\n    component = \"div\",\n    tabIndex = -1,\n    children,\n    className,\n    containerStyle,\n    containerClassName,\n    overlay: propOverlay,\n    overlayStyle,\n    overlayClassName,\n    overlayHidden = false,\n    visible,\n    onRequestClose,\n    forceContainer = false,\n    defaultFocus = \"first\",\n    portal = true,\n    portalInto,\n    portalIntoId,\n    appear = false,\n    enter = true,\n    exit = true,\n    disableTransition = false,\n    classNames = DEFAULT_DIALOG_CLASSNAMES,\n    timeout = DEFAULT_DIALOG_TIMEOUT,\n    temporary = true,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    modal = false,\n    role = \"dialog\",\n    type = \"centered\",\n    disableScrollLock = false,\n    disableEscapeClose: propDisableEscapeClose = false,\n    disableFocusContainer = false,\n    disableTabFocusWrap = false,\n    disableFocusOnMount = false,\n    disableFocusOnUnmount = false,\n    disableNestedDialogFixes = false,\n    onKeyDown,\n    overlayProps,\n    ...props\n  },\n  nodeRef\n) {\n  const { id } = props;\n  const isNoneRole = role === \"none\";\n  const isFullPage = type === \"full-page\";\n  const isCentered = type === \"centered\";\n\n  const { disableOverlay, disableEscapeClose } = useNestedDialogFixes({\n    id,\n    visible,\n    disabled: disableNestedDialogFixes,\n    disableEscapeClose: propDisableEscapeClose,\n  });\n\n  useScrollLock(visible && !isNoneRole && !disableScrollLock);\n\n  let overlayEl: ReactNode = null;\n  if (typeof propOverlay === \"boolean\" ? propOverlay : !isFullPage) {\n    // do not add the portal props to the overlay element since the portalling\n    // is handled in here. With how portals work, this would be rendered **after**\n    // the dialog instead of before which breaks some dialog styles\n    overlayEl = (\n      <Overlay\n        id={`${id}-overlay`}\n        {...overlayProps}\n        style={overlayStyle}\n        className={cn(\"rmd-dialog-overlay\", overlayClassName)}\n        hidden={overlayHidden || disableOverlay}\n        visible={visible}\n        clickable={!modal}\n        onRequestClose={modal ? noop : onRequestClose}\n      />\n    );\n  }\n\n  const { elementProps, rendered } = useCSSTransition({\n    nodeRef,\n    transitionIn: visible,\n    timeout,\n    classNames,\n    className: cn(\n      block({\n        centered: isCentered,\n        \"full-page\": isFullPage,\n      }),\n      className\n    ),\n    appear: !disableTransition && appear,\n    enter: !disableTransition && enter,\n    exit: !disableTransition && exit,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    temporary,\n  });\n\n  let dialog = (\n    <FocusContainer\n      {...props}\n      {...elementProps}\n      role={isNoneRole ? undefined : role}\n      aria-modal={(!isNoneRole && !!overlayEl) || undefined}\n      tabIndex={tabIndex}\n      component={component}\n      defaultFocus={defaultFocus}\n      disableTabFocusWrap={\n        isNoneRole || disableTabFocusWrap || disableFocusContainer\n      }\n      disableFocusOnMount={\n        isNoneRole || disableFocusContainer || disableFocusOnMount\n      }\n      disableFocusOnMountScroll\n      disableFocusOnUnmount={\n        isNoneRole || disableFocusContainer || disableFocusOnUnmount\n      }\n      onKeyDown={useCloseOnEscape(\n        onRequestClose,\n        disableEscapeClose || isNoneRole,\n        onKeyDown\n      )}\n    >\n      {children}\n    </FocusContainer>\n  );\n\n  if (isCentered || forceContainer) {\n    // the additional container is only required when we don't have a full page dialog. it's just\n    // used to apply flex center to the dialog and add some margin\n    dialog = (\n      <span\n        id={`${id}-container`}\n        style={containerStyle}\n        className={cn(\"rmd-dialog-container\", containerClassName)}\n      >\n        {dialog}\n      </span>\n    );\n  }\n\n  return (\n    <ConditionalPortal\n      portal={!isNoneRole && portal}\n      portalInto={portalInto}\n      portalIntoId={portalIntoId}\n    >\n      {overlayEl}\n      {rendered && dialog}\n    </ConditionalPortal>\n  );\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}