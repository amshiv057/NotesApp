{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport { LayoutAppBarTitle } from \"./LayoutAppBarTitle\";\nimport { LayoutNavToggle } from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\nexport var LayoutAppBar = forwardRef(function LayoutAppBar(_a, ref) {\n  var children = _a.children,\n    _b = _a.fixed,\n    fixed = _b === void 0 ? true : _b,\n    propNavToggle = _a.navToggle,\n    navToggleProps = _a.navToggleProps,\n    customTitle = _a.customTitle,\n    titleChildren = _a.title,\n    titleProps = _a.titleProps,\n    props = __rest(_a, [\"children\", \"fixed\", \"navToggle\", \"navToggleProps\", \"customTitle\", \"title\", \"titleProps\"]);\n  var _c = useLayoutConfig(),\n    baseId = _c.baseId,\n    layout = _c.layout;\n  var nav = propNavToggle;\n  if (typeof nav === \"undefined\") {\n    // set the key to the current layout since we want the button to re-mount\n    // on layout changes so the transition does not occur\n    nav = _jsx(LayoutNavToggle, __assign({}, navToggleProps), layout);\n  }\n  var title = customTitle;\n  if (typeof title === \"undefined\") {\n    title = _jsx(LayoutAppBarTitle, __assign({}, titleProps, {\n      children: titleChildren\n    }));\n  }\n  return _jsxs(AppBar, __assign({\n    id: \"\".concat(baseId, \"-header\")\n  }, props, {\n    ref: ref,\n    fixed: fixed\n  }, {\n    children: [nav, title, children]\n  }));\n});","map":{"version":3,"names":["forwardRef","AppBar","LayoutAppBarTitle","LayoutNavToggle","useLayoutConfig","LayoutAppBar","_a","ref","children","_b","fixed","propNavToggle","navToggle","navToggleProps","customTitle","titleChildren","title","titleProps","props","__rest","_c","baseId","layout","nav","_jsx","__assign","_jsxs","id","concat"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\layout\\src\\LayoutAppBar.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport type { AppBarProps } from \"@react-md/app-bar\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport { LayoutAppBarTitle } from \"./LayoutAppBarTitle\";\nimport type { LayoutWithNavToggle } from \"./LayoutNavToggle\";\nimport { LayoutNavToggle } from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport type { LayoutWithTitle } from \"./types\";\n\nexport interface BaseLayoutAppBarProps extends Omit<AppBarProps, \"title\"> {\n  /**\n   * Boolean if the `AppBar` should be fixed to the top of the page. Unlike the\n   * regular `AppBar`, this will be defaulted to `true`\n   */\n  fixed?: boolean;\n}\n\nexport interface LayoutAppBarProps\n  extends BaseLayoutAppBarProps,\n    LayoutWithNavToggle,\n    LayoutWithTitle {}\n\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\nexport const LayoutAppBar = forwardRef<HTMLDivElement, LayoutAppBarProps>(\n  function LayoutAppBar(\n    {\n      children,\n      fixed = true,\n      navToggle: propNavToggle,\n      navToggleProps,\n      customTitle,\n      title: titleChildren,\n      titleProps,\n      ...props\n    },\n    ref\n  ) {\n    const { baseId, layout } = useLayoutConfig();\n\n    let nav = propNavToggle;\n    if (typeof nav === \"undefined\") {\n      // set the key to the current layout since we want the button to re-mount\n      // on layout changes so the transition does not occur\n      nav = <LayoutNavToggle key={layout} {...navToggleProps} />;\n    }\n\n    let title = customTitle;\n    if (typeof title === \"undefined\") {\n      title = (\n        <LayoutAppBarTitle {...titleProps}>{titleChildren}</LayoutAppBarTitle>\n      );\n    }\n\n    return (\n      <AppBar id={`${baseId}-header`} {...props} ref={ref} fixed={fixed}>\n        {nav}\n        {title}\n        {children}\n      </AppBar>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,eAAe,QAAQ,kBAAkB;AAgBlD;;;;;AAKA,OAAO,IAAMC,YAAY,GAAGL,UAAU,CACpC,SAASK,YAAYA,CACnBC,EASC,EACDC,GAAG;EATD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IACRC,EAAA,GAAAH,EAAA,CAAAI,KAAY;IAAZA,KAAK,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACDE,aAAa,GAAAL,EAAA,CAAAM,SAAA;IACxBC,cAAc,GAAAP,EAAA,CAAAO,cAAA;IACdC,WAAW,GAAAR,EAAA,CAAAQ,WAAA;IACJC,aAAa,GAAAT,EAAA,CAAAU,KAAA;IACpBC,UAAU,GAAAX,EAAA,CAAAW,UAAA;IACPC,KAAK,GAAAC,MAAA,CAAAb,EAAA,EARV,0FASC,CADS;EAIJ,IAAAc,EAAA,GAAqBhB,eAAe,EAAE;IAApCiB,MAAM,GAAAD,EAAA,CAAAC,MAAA;IAAEC,MAAM,GAAAF,EAAA,CAAAE,MAAsB;EAE5C,IAAIC,GAAG,GAAGZ,aAAa;EACvB,IAAI,OAAOY,GAAG,KAAK,WAAW,EAAE;IAC9B;IACA;IACAA,GAAG,GAAGC,IAAA,CAACrB,eAAe,EAAAsB,QAAA,KAAkBZ,cAAc,GAA1BS,MAAM,CAAwB;;EAG5D,IAAIN,KAAK,GAAGF,WAAW;EACvB,IAAI,OAAOE,KAAK,KAAK,WAAW,EAAE;IAChCA,KAAK,GACHQ,IAAA,CAACtB,iBAAiB,EAAAuB,QAAA,KAAKR,UAAU;MAAAT,QAAA,EAAGO;IAAa,GAClD;;EAGH,OACEW,KAAA,CAACzB,MAAM,EAAAwB,QAAA;IAACE,EAAE,EAAE,GAAAC,MAAA,CAAGP,MAAM;EAAS,GAAMH,KAAK;IAAEX,GAAG,EAAEA,GAAG;IAAEG,KAAK,EAAEA;EAAK;IAAAF,QAAA,GAC9De,GAAG,EACHP,KAAK,EACLR,QAAQ;EAAA,GACF;AAEb,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}