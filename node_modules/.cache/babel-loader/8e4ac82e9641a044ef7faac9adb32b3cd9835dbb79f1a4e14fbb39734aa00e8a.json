{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, getPercentage } from \"@react-md/utils\";\nvar block = bem(\"rmd-circular-progress\");\nexport var CircularProgress = forwardRef(function CircularProgress(_a, ref) {\n  var className = _a.className,\n    propSvgStyle = _a.svgStyle,\n    svgClassName = _a.svgClassName,\n    propCircleStyle = _a.circleStyle,\n    circleClassName = _a.circleClassName,\n    value = _a.value,\n    _b = _a.min,\n    min = _b === void 0 ? 0 : _b,\n    _c = _a.max,\n    max = _c === void 0 ? 100 : _c,\n    _d = _a.radius,\n    radius = _d === void 0 ? 30 : _d,\n    _e = _a.center,\n    center = _e === void 0 ? 33 : _e,\n    _f = _a.viewBox,\n    viewBox = _f === void 0 ? \"0 0 66 66\" : _f,\n    _g = _a.dashoffset,\n    dashoffset = _g === void 0 ? 187 : _g,\n    _h = _a.animate,\n    animate = _h === void 0 ? true : _h,\n    _j = _a.centered,\n    centered = _j === void 0 ? true : _j,\n    _k = _a.maxRotation,\n    maxRotation = _k === void 0 ? 360 * 1.75 : _k,\n    _l = _a.small,\n    small = _l === void 0 ? false : _l,\n    props = __rest(_a, [\"className\", \"svgStyle\", \"svgClassName\", \"circleStyle\", \"circleClassName\", \"value\", \"min\", \"max\", \"radius\", \"center\", \"viewBox\", \"dashoffset\", \"animate\", \"centered\", \"maxRotation\", \"small\"]);\n  var progress;\n  if (typeof value === \"number\") {\n    progress = getPercentage({\n      min: min,\n      max: max,\n      value: value\n    });\n  }\n  var svgStyle = useMemo(function () {\n    if (typeof progress !== \"number\") {\n      return propSvgStyle;\n    }\n    var transform = propSvgStyle && propSvgStyle.transform;\n    if (maxRotation > 0) {\n      var rotate = \"rotate(\".concat(maxRotation * progress, \"deg)\");\n      transform = \"\".concat(rotate).concat(transform ? \" \".concat(transform) : \"\");\n    }\n    return __assign(__assign({}, propSvgStyle), {\n      WebkitTransform: transform,\n      transform: transform\n    });\n  }, [progress, maxRotation, propSvgStyle]);\n  var circleStyle = useMemo(function () {\n    if (typeof progress !== \"number\") {\n      return propCircleStyle;\n    }\n    return __assign(__assign({}, propCircleStyle), {\n      strokeDashoffset: dashoffset - dashoffset * progress\n    });\n  }, [progress, propCircleStyle, dashoffset]);\n  var determinate = typeof progress === \"number\";\n  var indeterminate = !determinate;\n  return _jsx(\"span\", __assign({}, props, {\n    ref: ref,\n    role: \"progressbar\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": value,\n    className: cn(block({\n      centered: centered,\n      small: small\n    }), className)\n  }, {\n    children: _jsx(\"svg\", __assign({\n      style: svgStyle,\n      className: cn(block(\"svg\", {\n        animate: animate && determinate,\n        determinate: determinate,\n        indeterminate: indeterminate\n      }), svgClassName),\n      viewBox: viewBox\n    }, {\n      children: _jsx(\"circle\", {\n        style: circleStyle,\n        className: cn(block(\"circle\", {\n          animate: animate && determinate,\n          determinate: determinate,\n          indeterminate: indeterminate\n        }), circleClassName),\n        r: radius,\n        cx: center,\n        cy: center\n      })\n    }))\n  }));\n});","map":{"version":3,"names":["forwardRef","useMemo","cn","bem","getPercentage","block","CircularProgress","_a","ref","className","propSvgStyle","svgStyle","svgClassName","propCircleStyle","circleStyle","circleClassName","value","_b","min","_c","max","_d","radius","_e","center","_f","viewBox","_g","dashoffset","_h","animate","_j","centered","_k","maxRotation","_l","small","props","__rest","progress","transform","rotate","concat","__assign","WebkitTransform","strokeDashoffset","determinate","indeterminate","_jsx","role","children","style","r","cx","cy"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\progress\\src\\CircularProgress.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, getPercentage } from \"@react-md/utils\";\n\nimport type { ProgressProps } from \"./types\";\n\nexport interface CircularProgressProps\n  extends Omit<HTMLAttributes<HTMLSpanElement>, \"id\">,\n    ProgressProps {\n  /**\n   * An optional style to apply to the svg within the circular progress. The\n   * values of this style object will be merged with the current determinate\n   * style (if it exists).\n   */\n  svgStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the svg within the circular progress.\n   */\n  svgClassName?: string;\n\n  /**\n   * An optional style to apply to the circle within the circular progress. The\n   * values of this style object will be merged with the current determinate\n   * style (if it exists).\n   */\n  circleStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the circle within the circular progress.\n   */\n  circleClassName?: string;\n\n  /**\n   * The radius for the circle. It is generally recommended to have the radius\n   * be 1/2 of the viewbox and minus a few more pixels so that there is some\n   * surrounding padding. You probably shouldn't really be changing this prop\n   * though.\n   */\n  radius?: number;\n\n  /**\n   * The center point for the circle. This should be half of the `viewBox` prop\n   * 99% of the time and probably won't be changed.\n   */\n  center?: number;\n\n  /**\n   * The viewbox for the child svg. I wouldn't recommend changing this value as\n   * you will also need to update the `dashoffset` in both Sass and this prop to\n   * get the animation to look nice again.\n   */\n  viewBox?: string;\n\n  /**\n   * The `stroke-dashoffset` for the circle within the SVG. You probably won't\n   * be changing this value that much as it should match the\n   * `$rmd-progress-circle-dashoffset` Sass variable. This is really just used\n   * to help to create the determinate progress animation.\n   */\n  dashoffset?: number;\n\n  /**\n   * The max rotation value for the circular progress. If you set this value to\n   * a number less than or equal to 0, the circular progress will no longer\n   * rotate with the determinate progress type.\n   */\n  maxRotation?: number;\n\n  /**\n   * Boolean if the circular progress should be centered using left and right\n   * margins.\n   */\n  centered?: boolean;\n\n  /**\n   * Boolean if the smaller size should be used instead.\n   *\n   * @remarks \\@since 2.3.0\n   */\n  small?: boolean;\n}\n\nconst block = bem(\"rmd-circular-progress\");\n\nexport const CircularProgress = forwardRef<\n  HTMLSpanElement,\n  CircularProgressProps\n>(function CircularProgress(\n  {\n    className,\n    svgStyle: propSvgStyle,\n    svgClassName,\n    circleStyle: propCircleStyle,\n    circleClassName,\n    value,\n    min = 0,\n    max = 100,\n    radius = 30,\n    center = 33,\n    viewBox = \"0 0 66 66\",\n    dashoffset = 187,\n    animate = true,\n    centered = true,\n    maxRotation = 360 * 1.75,\n    small = false,\n    ...props\n  },\n  ref\n) {\n  let progress: number | undefined;\n  if (typeof value === \"number\") {\n    progress = getPercentage({ min, max, value });\n  }\n\n  const svgStyle = useMemo<CSSProperties | undefined>(() => {\n    if (typeof progress !== \"number\") {\n      return propSvgStyle;\n    }\n\n    let transform = propSvgStyle && propSvgStyle.transform;\n    if (maxRotation > 0) {\n      const rotate = `rotate(${maxRotation * progress}deg)`;\n      transform = `${rotate}${transform ? ` ${transform}` : \"\"}`;\n    }\n\n    return {\n      ...propSvgStyle,\n      WebkitTransform: transform,\n      transform,\n    };\n  }, [progress, maxRotation, propSvgStyle]);\n\n  const circleStyle = useMemo(() => {\n    if (typeof progress !== \"number\") {\n      return propCircleStyle;\n    }\n\n    return {\n      ...propCircleStyle,\n      strokeDashoffset: dashoffset - dashoffset * progress,\n    };\n  }, [progress, propCircleStyle, dashoffset]);\n\n  const determinate = typeof progress === \"number\";\n  const indeterminate = !determinate;\n  return (\n    <span\n      {...props}\n      ref={ref}\n      role=\"progressbar\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      className={cn(block({ centered, small }), className)}\n    >\n      <svg\n        style={svgStyle}\n        className={cn(\n          block(\"svg\", {\n            animate: animate && determinate,\n            determinate,\n            indeterminate,\n          }),\n          svgClassName\n        )}\n        viewBox={viewBox}\n      >\n        <circle\n          style={circleStyle}\n          className={cn(\n            block(\"circle\", {\n              animate: animate && determinate,\n              determinate,\n              indeterminate,\n            }),\n            circleClassName\n          )}\n          r={radius}\n          cx={center}\n          cy={center}\n        />\n      </svg>\n    </span>\n  );\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}