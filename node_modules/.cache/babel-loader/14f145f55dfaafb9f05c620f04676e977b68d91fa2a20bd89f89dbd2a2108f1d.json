{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Card, CardContent } from \"@react-md/card\";\nimport { useCollapseTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nimport { ExpansionPanelHeader } from \"./ExpansionPanelHeader\";\nvar block = bem(\"rmd-expansion-panel\");\n/**\n * The expansion panel renders a header element (that is just a button) and\n * dynamically shows content once expanded.\n */\nexport var ExpansionPanel = forwardRef(function ExpansionPanel(_a, ref) {\n  var className = _a.className,\n    children = _a.children,\n    headerStyle = _a.headerStyle,\n    headerClassName = _a.headerClassName,\n    contentStyle = _a.contentStyle,\n    contentClassName = _a.contentClassName,\n    headerRef = _a.headerRef,\n    _b = _a.disablePadding,\n    disablePadding = _b === void 0 ? false : _b,\n    _c = _a.disableSecondaryColor,\n    disableSecondaryColor = _c === void 0 ? false : _c,\n    customHeader = _a.customHeader,\n    header = _a.header,\n    expanded = _a.expanded,\n    onExpandClick = _a.onExpandClick,\n    expanderIcon = _a.expanderIcon,\n    _d = _a.marginTop,\n    marginTop = _d === void 0 ? false : _d,\n    _e = _a.fullWidth,\n    fullWidth = _e === void 0 ? true : _e,\n    _f = _a.persistent,\n    persistent = _f === void 0 ? false : _f,\n    _g = _a.disabled,\n    disabled = _g === void 0 ? false : _g,\n    _h = _a.disableTransition,\n    disableTransition = _h === void 0 ? false : _h,\n    props = __rest(_a, [\"className\", \"children\", \"headerStyle\", \"headerClassName\", \"contentStyle\", \"contentClassName\", \"headerRef\", \"disablePadding\", \"disableSecondaryColor\", \"customHeader\", \"header\", \"expanded\", \"onExpandClick\", \"expanderIcon\", \"marginTop\", \"fullWidth\", \"persistent\", \"disabled\", \"disableTransition\"]);\n  var id = props.id;\n  var contentId = \"\".concat(id, \"-content\");\n  var _j = useCollapseTransition({\n      style: contentStyle,\n      className: contentClassName,\n      timeout: disableTransition ? 0 : undefined,\n      transitionIn: expanded,\n      temporary: !persistent\n    }),\n    elementProps = _j.elementProps,\n    rendered = _j.rendered;\n  return _jsxs(Card, __assign({}, props, {\n    id: \"\".concat(id, \"-container\"),\n    ref: ref,\n    fullWidth: fullWidth,\n    className: cn(block({\n      expanded: expanded,\n      \"margin-top\": marginTop\n    }), className)\n  }, {\n    children: [customHeader || _jsx(ExpansionPanelHeader, __assign({\n      \"aria-disabled\": disabled || undefined,\n      id: id,\n      ref: headerRef,\n      style: headerStyle,\n      className: headerClassName,\n      icon: expanderIcon,\n      expanded: expanded,\n      onClick: onExpandClick,\n      disableTransition: disableTransition\n    }, {\n      children: header\n    })), rendered && _jsx(CardContent, __assign({}, elementProps, {\n      id: contentId,\n      \"aria-labelledby\": id,\n      role: \"region\",\n      disableSecondaryColor: disableSecondaryColor,\n      disablePadding: disablePadding,\n      disableExtraPadding: true\n    }, {\n      children: children\n    }))]\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","Card","CardContent","useCollapseTransition","bem","ExpansionPanelHeader","block","ExpansionPanel","_a","ref","className","children","headerStyle","headerClassName","contentStyle","contentClassName","headerRef","_b","disablePadding","_c","disableSecondaryColor","customHeader","header","expanded","onExpandClick","expanderIcon","_d","marginTop","_e","fullWidth","_f","persistent","_g","disabled","_h","disableTransition","props","__rest","id","contentId","concat","_j","style","timeout","undefined","transitionIn","temporary","elementProps","rendered","_jsxs","__assign","_jsx","icon","onClick","role","disableExtraPadding"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\expansion-panel\\src\\ExpansionPanel.tsx"],"sourcesContent":["import type { CSSProperties, MouseEventHandler, ReactNode, Ref } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { CardContentProps, CardProps } from \"@react-md/card\";\nimport { Card, CardContent } from \"@react-md/card\";\nimport { useCollapseTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\n\nimport { ExpansionPanelHeader } from \"./ExpansionPanelHeader\";\n\ntype ConfigurableCardContentProps = Pick<\n  CardContentProps,\n  \"disablePadding\" | \"disableSecondaryColor\" | \"disableParagraphMargin\"\n>;\n\nexport interface ExpansionPanelProps\n  extends CardProps,\n    ConfigurableCardContentProps {\n  /**\n   * An id for the panel that is required for a11y.\n   */\n  id: string;\n\n  /**\n   * An optional style object to provide to the default header implementation. If\n   * the `header` prop is provided, this will do nothing.\n   */\n  headerStyle?: CSSProperties;\n\n  /**\n   * An optional className to provide to the default header implementation. If\n   * the `header` prop is provided, this will do nothing.\n   */\n  headerClassName?: string;\n\n  /**\n   * An optional style to provide to the content of the panel.\n   */\n  contentStyle?: CSSProperties;\n\n  /**\n   * An optional className to provide the content of the panel.\n   */\n  contentClassName?: string;\n\n  /**\n   * An optional header element to display instead of the default\n   * implementation.\n   */\n  customHeader?: ReactNode;\n\n  /**\n   * The children to display within the default header element.\n   */\n  header?: ReactNode;\n\n  /**\n   * An optional ref to pass to the default header implementation. This will be\n   * provided automatically if you are using the `usePanels` hook to allow\n   * keyboard movement with the arrow keys and home/end keys. If you provide\n   * your own `header`, you'll need to pass the `headerRef` to your custom\n   * implementation to the focusable element for the keyboard focus behavior to\n   * work.\n   */\n  headerRef?: Ref<HTMLButtonElement>;\n\n  /**\n   * Boolean if clicking on the header should no longer toggle the expansion\n   * state. This will automatically be provided from the `usePanels` hook for\n   * when a panel cannot be closed to do preventing all panels from being closed\n   * at a time.\n   */\n  disabled?: boolean;\n\n  /**\n   * An optional expander icon to use within the default header implementation.\n   * This defaults to the `\"expander\"` icon.\n   */\n  expanderIcon?: ReactNode;\n\n  /**\n   * Boolean if margin top should be applied to this header to add some\n   * additional spacing between this panel and the previous panel. This will\n   * automatically be provided for panels when using the `usePanels` hook.\n   */\n  marginTop?: boolean;\n\n  /**\n   * Boolean if the panel is currently expanded.\n   */\n  expanded: boolean;\n\n  /**\n   * A function that should attempt to change the expansion state of the panel.\n   */\n  onExpandClick: MouseEventHandler<HTMLButtonElement>;\n\n  /**\n   * Boolean if the collapse transition should be disabled for the content\n   * within the panel. It is recommended to disable this transition if there is\n   * a lot of content within the panel since animating max-height isn't super\n   * great since it causes DOM repaints during the entire transition.\n   */\n  disableTransition?: boolean;\n\n  /**\n   * Boolean if the content should be persistent within the DOM instead of\n   * unmounting once no longer expanded. This is only really helpful if you want\n   * to maintain state while the panel is hidden since the children will unmount\n   * when not expanded.\n   */\n  persistent?: boolean;\n}\n\nconst block = bem(\"rmd-expansion-panel\");\n\n/**\n * The expansion panel renders a header element (that is just a button) and\n * dynamically shows content once expanded.\n */\nexport const ExpansionPanel = forwardRef<HTMLDivElement, ExpansionPanelProps>(\n  function ExpansionPanel(\n    {\n      className,\n      children,\n      headerStyle,\n      headerClassName,\n      contentStyle,\n      contentClassName,\n      headerRef,\n      disablePadding = false,\n      disableSecondaryColor = false,\n      customHeader,\n      header,\n      expanded,\n      onExpandClick,\n      expanderIcon,\n      marginTop = false,\n      fullWidth = true,\n      persistent = false,\n      disabled = false,\n      disableTransition = false,\n      ...props\n    },\n    ref\n  ) {\n    const { id } = props;\n    const contentId = `${id}-content`;\n    const { elementProps, rendered } = useCollapseTransition({\n      style: contentStyle,\n      className: contentClassName,\n      timeout: disableTransition ? 0 : undefined,\n      transitionIn: expanded,\n      temporary: !persistent,\n    });\n\n    return (\n      <Card\n        {...props}\n        id={`${id}-container`}\n        ref={ref}\n        fullWidth={fullWidth}\n        className={cn(block({ expanded, \"margin-top\": marginTop }), className)}\n      >\n        {customHeader || (\n          <ExpansionPanelHeader\n            aria-disabled={disabled || undefined}\n            id={id}\n            ref={headerRef}\n            style={headerStyle}\n            className={headerClassName}\n            icon={expanderIcon}\n            expanded={expanded}\n            onClick={onExpandClick}\n            disableTransition={disableTransition}\n          >\n            {header}\n          </ExpansionPanelHeader>\n        )}\n        {rendered && (\n          <CardContent\n            {...elementProps}\n            id={contentId}\n            aria-labelledby={id}\n            role=\"region\"\n            disableSecondaryColor={disableSecondaryColor}\n            disablePadding={disablePadding}\n            disableExtraPadding\n          >\n            {children}\n          </CardContent>\n        )}\n      </Card>\n    );\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}