{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\nimport { useCollapseTransition } from \"./useCollapseTransition\";\n/**\n * This is a component implementation of the {@link useCollapseTransition} hook\n * that implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Simple Example\n * ```tsx\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       <Collapse collapsed={collapsed}>\n *         <div>\n *           Some content that should only be visible while not collapsed.\n *         </div>\n *       </Collapse>\n *     </>\n *   );\n * }\n * ```\n *\n * @see {@link useCollapseTransition} for additional examples\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API.\n */\nexport function Collapse(_a) {\n  var children = _a.children,\n    collapsed = _a.collapsed,\n    className = _a.className,\n    options = __rest(_a, [\"children\", \"collapsed\", \"className\"]);\n  var child = Children.only(children);\n  var _b = useCollapseTransition(__assign(__assign({}, options), {\n      className: cn(child.props.className, className),\n      transitionIn: !collapsed\n    })),\n    elementProps = _b.elementProps,\n    rendered = _b.rendered;\n  if (!rendered) {\n    return null;\n  }\n  return cloneElement(children, elementProps);\n}","map":{"version":3,"names":["Children","cloneElement","cn","useCollapseTransition","Collapse","_a","children","collapsed","className","options","__rest","child","only","_b","__assign","props","transitionIn","elementProps","rendered"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\transition\\src\\Collapse.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\n\nimport type {\n  CollapseElementProps,\n  CollapseTransitionHookOptions,\n} from \"./useCollapseTransition\";\nimport { useCollapseTransition } from \"./useCollapseTransition\";\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API.\n */\nexport interface CollapseProps<E extends HTMLElement>\n  extends Omit<CollapseTransitionHookOptions<E>, \"transitionIn\"> {\n  /**\n   * The child element that should have a `ref` and the `style`, `className` and\n   * `hidden` props cloned into using the `cloneElement` API. If the child is a\n   * custom component, you **must** use `React.forwardRef` and pass the `ref`\n   * and the other props for the transition to work correctly.\n   */\n  children: ReactElement<CollapseElementProps<E>>;\n\n  /**\n   * Boolean if the element should be collapsed.\n   *\n   * @see {@link CollapseTransitionHookOptions.transitionIn}\n   */\n  collapsed: boolean;\n}\n\n/**\n * This is a component implementation of the {@link useCollapseTransition} hook\n * that implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Simple Example\n * ```tsx\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       <Collapse collapsed={collapsed}>\n *         <div>\n *           Some content that should only be visible while not collapsed.\n *         </div>\n *       </Collapse>\n *     </>\n *   );\n * }\n * ```\n *\n * @see {@link useCollapseTransition} for additional examples\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API.\n */\nexport function Collapse<E extends HTMLElement>({\n  children,\n  collapsed,\n  className,\n  ...options\n}: CollapseProps<E>): ReactElement | null {\n  const child = Children.only(children);\n  const { elementProps, rendered } = useCollapseTransition({\n    ...options,\n    className: cn(child.props.className, className),\n    transitionIn: !collapsed,\n  });\n\n  if (!rendered) {\n    return null;\n  }\n\n  return cloneElement(children, elementProps);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,OAAO;AAC9C,OAAOC,EAAE,MAAM,YAAY;AAM3B,SAASC,qBAAqB,QAAQ,yBAAyB;AA0B/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAM,SAAUC,QAAQA,CAAwBC,EAK7B;EAJjB,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IACTC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IACNC,OAAO,GAAAC,MAAA,CAAAL,EAAA,EAJoC,sCAK/C,CADW;EAEV,IAAMM,KAAK,GAAGX,QAAQ,CAACY,IAAI,CAACN,QAAQ,CAAC;EAC/B,IAAAO,EAAA,GAA6BV,qBAAqB,CAAAW,QAAA,CAAAA,QAAA,KACnDL,OAAO;MACVD,SAAS,EAAEN,EAAE,CAACS,KAAK,CAACI,KAAK,CAACP,SAAS,EAAEA,SAAS,CAAC;MAC/CQ,YAAY,EAAE,CAACT;IAAS,GACxB;IAJMU,YAAY,GAAAJ,EAAA,CAAAI,YAAA;IAAEC,QAAQ,GAAAL,EAAA,CAAAK,QAI5B;EAEF,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb,OAAOjB,YAAY,CAACK,QAAQ,EAAEW,YAAY,CAAC;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}