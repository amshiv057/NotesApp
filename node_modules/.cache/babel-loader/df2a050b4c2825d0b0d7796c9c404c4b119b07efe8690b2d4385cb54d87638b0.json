{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nimport { useFieldStates } from \"../useFieldStates\";\nvar block = bem(\"rmd-text-field\");\nvar SPECIAL_TYPES = [\"date\", \"time\", \"datetime-local\", \"month\", \"week\", \"color\"];\n/**\n * The text field is a wrapper of the `<input type=\"text\" />` component with\n * some nice default themes. It can also be used to render other text input\n * types with _some_ support.\n */\nexport var TextField = forwardRef(function TextField(_a, ref) {\n  var style = _a.style,\n    className = _a.className,\n    inputStyle = _a.inputStyle,\n    inputClassName = _a.inputClassName,\n    label = _a.label,\n    labelStyle = _a.labelStyle,\n    labelClassName = _a.labelClassName,\n    _b = _a.type,\n    type = _b === void 0 ? \"text\" : _b,\n    propTheme = _a.theme,\n    _c = _a.dense,\n    dense = _c === void 0 ? false : _c,\n    _d = _a.inline,\n    inline = _d === void 0 ? false : _d,\n    _e = _a.error,\n    error = _e === void 0 ? false : _e,\n    _f = _a.stretch,\n    stretch = _f === void 0 ? false : _f,\n    _g = _a.disabled,\n    disabled = _g === void 0 ? false : _g,\n    propOnBlur = _a.onBlur,\n    propOnFocus = _a.onFocus,\n    propOnChange = _a.onChange,\n    containerRef = _a.containerRef,\n    _h = _a.isLeftAddon,\n    isLeftAddon = _h === void 0 ? true : _h,\n    _j = _a.isRightAddon,\n    isRightAddon = _j === void 0 ? true : _j,\n    leftChildren = _a.leftChildren,\n    rightChildren = _a.rightChildren,\n    propUnderlineDirection = _a.underlineDirection,\n    containerProps = _a.containerProps,\n    props = __rest(_a, [\"style\", \"className\", \"inputStyle\", \"inputClassName\", \"label\", \"labelStyle\", \"labelClassName\", \"type\", \"theme\", \"dense\", \"inline\", \"error\", \"stretch\", \"disabled\", \"onBlur\", \"onFocus\", \"onChange\", \"containerRef\", \"isLeftAddon\", \"isRightAddon\", \"leftChildren\", \"rightChildren\", \"underlineDirection\", \"containerProps\"]);\n  var id = props.id,\n    value = props.value,\n    defaultValue = props.defaultValue;\n  var _k = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      value: value,\n      defaultValue: defaultValue\n    }),\n    valued = _k.valued,\n    focused = _k.focused,\n    onBlur = _k.onBlur,\n    onFocus = _k.onFocus,\n    onChange = _k.onChange;\n  var _l = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection\n    }),\n    theme = _l.theme,\n    underlineDirection = _l.underlineDirection;\n  return _jsxs(TextFieldContainer, __assign({}, containerProps, {\n    style: style,\n    className: className,\n    ref: containerRef,\n    theme: theme,\n    error: error,\n    active: focused,\n    label: !!label,\n    dense: dense,\n    inline: inline,\n    stretch: stretch,\n    disabled: disabled,\n    isLeftAddon: isLeftAddon,\n    isRightAddon: isRightAddon,\n    leftChildren: leftChildren,\n    rightChildren: rightChildren,\n    underlineDirection: underlineDirection\n  }, {\n    children: [_jsx(FloatingLabel, __assign({\n      style: labelStyle,\n      className: labelClassName,\n      htmlFor: id,\n      error: error,\n      active: focused,\n      floating: focused || valued || SPECIAL_TYPES.includes(type),\n      valued: valued,\n      dense: dense,\n      disabled: disabled\n    }, {\n      children: label\n    })), _jsx(\"input\", __assign({}, props, {\n      ref: ref,\n      type: type,\n      disabled: disabled,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      style: inputStyle,\n      className: cn(block({\n        floating: label && theme !== \"none\"\n      }), inputClassName)\n    }))]\n  }));\n});","map":{"version":3,"names":["forwardRef","cn","bem","useFormTheme","FloatingLabel","TextFieldContainer","useFieldStates","block","SPECIAL_TYPES","TextField","_a","ref","style","className","inputStyle","inputClassName","label","labelStyle","labelClassName","_b","type","propTheme","theme","_c","dense","_d","inline","_e","error","_f","stretch","_g","disabled","propOnBlur","onBlur","propOnFocus","onFocus","propOnChange","onChange","containerRef","_h","isLeftAddon","_j","isRightAddon","leftChildren","rightChildren","propUnderlineDirection","underlineDirection","containerProps","props","__rest","id","value","defaultValue","_k","valued","focused","_l","_jsxs","__assign","active","children","_jsx","htmlFor","floating","includes"],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\form\\src\\text-field\\TextField.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactNode,\n  Ref,\n} from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport type { TextFieldContainerOptions } from \"./TextFieldContainer\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nimport { useFieldStates } from \"../useFieldStates\";\n\n/**\n * These are all the \"supported\" input types for react-md so that they at least\n * render reasonably well by default. There is no built-in validation or\n * anything adding onto existing browser functionality for these types.\n *\n * @remarks \\@since 2.5.0 - `\"search\"` was added\n */\nexport type SupportedInputTypes =\n  | \"text\"\n  | \"password\"\n  | \"number\"\n  | \"tel\"\n  | \"email\"\n  | \"date\"\n  | \"time\"\n  | \"datetime-local\"\n  | \"month\"\n  | \"week\"\n  | \"url\"\n  | \"color\"\n  | \"search\";\n\ntype TextFieldAttributes = Omit<InputHTMLAttributes<HTMLInputElement>, \"type\">;\n\nexport interface TextFieldProps\n  extends TextFieldAttributes,\n    TextFieldContainerOptions {\n  /**\n   * The id for the text field. This is required for accessibility.\n   */\n  id: string;\n\n  /**\n   * The value to use for the text field. This will make the component\n   * controlled and require the `onChange` prop to be provided as well otherwise\n   * this will act as a read only text field.\n   */\n  value?: string;\n\n  /**\n   * The default value for the text field which will make it uncontrolled. If\n   * you manually change the `defaultValue` prop, the input's value **will not\n   * change** unless you provide a different `key` as well. Use the `value` prop\n   * instead for a controlled input.\n   */\n  defaultValue?: string;\n\n  /**\n   * An optional floating label to use for the text field. This should really\n   * only be used when the `theme` prop is not set to `\"none\"`. This will be\n   * wrapped in the `<Label>` component itself and automatically apply the\n   * `htmlFor` prop for this text field.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the label wrapper.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the label wrapper.\n   */\n  labelClassName?: string;\n\n  /**\n   * The type for the text field. `react-md`'s `TextField` supports rendering\n   * most of the input types, but will have no built-in validation or additional\n   * functionality included.\n   */\n  type?: SupportedInputTypes;\n\n  /**\n   * An optional style to apply to the input itself. The `style` prop will be\n   * applied to the container `<div>` instead.\n   */\n  inputStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the input itself. The `className` prop\n   * will be applied to the container `<div>` instead.\n   */\n  inputClassName?: string;\n\n  /**\n   * An optional ref to apply to the text field's container div element. The\n   * default ref is forwarded on to the `input` element.\n   */\n  containerRef?: Ref<HTMLDivElement>;\n\n  /**\n   * Any additional html attributes that should be applied to the main container\n   * div. This is probably only going to be used internally so that additional\n   * accessibility can be added to text fields for more complex widgets.\n   */\n  containerProps?: Omit<HTMLAttributes<HTMLDivElement>, \"style\" | \"className\">;\n}\n\nconst block = bem(\"rmd-text-field\");\n\nconst SPECIAL_TYPES: readonly SupportedInputTypes[] = [\n  \"date\",\n  \"time\",\n  \"datetime-local\",\n  \"month\",\n  \"week\",\n  \"color\",\n];\n\n/**\n * The text field is a wrapper of the `<input type=\"text\" />` component with\n * some nice default themes. It can also be used to render other text input\n * types with _some_ support.\n */\nexport const TextField = forwardRef<HTMLInputElement, TextFieldProps>(\n  function TextField(\n    {\n      style,\n      className,\n      inputStyle,\n      inputClassName,\n      label,\n      labelStyle,\n      labelClassName,\n      type = \"text\",\n      theme: propTheme,\n      dense = false,\n      inline = false,\n      error = false,\n      stretch = false,\n      disabled = false,\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      containerRef,\n      isLeftAddon = true,\n      isRightAddon = true,\n      leftChildren,\n      rightChildren,\n      underlineDirection: propUnderlineDirection,\n      containerProps,\n      ...props\n    },\n    ref\n  ) {\n    const { id, value, defaultValue } = props;\n    const { valued, focused, onBlur, onFocus, onChange } = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      value,\n      defaultValue,\n    });\n\n    const { theme, underlineDirection } = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection,\n    });\n\n    return (\n      <TextFieldContainer\n        {...containerProps}\n        style={style}\n        className={className}\n        ref={containerRef}\n        theme={theme}\n        error={error}\n        active={focused}\n        label={!!label}\n        dense={dense}\n        inline={inline}\n        stretch={stretch}\n        disabled={disabled}\n        isLeftAddon={isLeftAddon}\n        isRightAddon={isRightAddon}\n        leftChildren={leftChildren}\n        rightChildren={rightChildren}\n        underlineDirection={underlineDirection}\n      >\n        <FloatingLabel\n          style={labelStyle}\n          className={labelClassName}\n          htmlFor={id}\n          error={error}\n          active={focused}\n          floating={focused || valued || SPECIAL_TYPES.includes(type)}\n          valued={valued}\n          dense={dense}\n          disabled={disabled}\n        >\n          {label}\n        </FloatingLabel>\n        <input\n          {...props}\n          ref={ref}\n          type={type}\n          disabled={disabled}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          onChange={onChange}\n          style={inputStyle}\n          className={cn(\n            block({\n              floating: label && theme !== \"none\",\n            }),\n            inputClassName\n          )}\n        />\n      </TextFieldContainer>\n    );\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}