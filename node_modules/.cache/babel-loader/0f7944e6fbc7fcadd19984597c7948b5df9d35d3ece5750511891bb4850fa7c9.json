{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\utils\\src\\positioning\\types.ts"],"sourcesContent":["/**\n * Above:\n * - the container top is in-line with the bottom of the element.\n *\n * Below:\n * - the container bottom is in-line with the top of the element\n *\n * Center:\n * - the container center is in-line with the top of the element\n *\n * Top:\n * - the container top is in-line with the top of the element\n *\n * Bottom:\n * - the container bottom is in-line with the bottom of the element\n */\nexport type VerticalPosition = \"above\" | \"below\" | \"center\" | \"top\" | \"bottom\";\n\n/**\n * Left:\n * - the container left is in-line with the right of the element\n *\n * Right:\n * - the container right is in-line with the left of the element\n *\n * Center:\n * - the container's horizontal center point will be aligned with the element's\n *   horizontal center point\n *\n * Inner Left:\n * - the container's left is in-line with the left of the element\n *\n * Inner Right:\n * - the container's right is in-line with the right of the element\n */\nexport type HorizontalPosition =\n  | \"left\"\n  | \"right\"\n  | \"center\"\n  | \"inner-left\"\n  | \"inner-right\";\n\n/**\n * An object containing the x and y positions to anchor a fixed element to\n * another container element.\n */\nexport interface PositionAnchor {\n  x: HorizontalPosition;\n  y: VerticalPosition;\n}\n\n/**\n * A \"simple\" version of all the positioning options. These are generally used\n * across all of react-md as it'll use the \"center\" version of the opposite type\n * when creating a fixed position.\n */\nexport type SimplePosition = \"above\" | \"below\" | \"left\" | \"right\";\n\n/**\n * An optional configuration for calculating and setting the width of the\n * element relative to the width of the container. When this value is set to\n * `\"auto\"` (default), the width will be based on content width but still\n * ensuring it can fit within the viewport. Setting this to `\"equal\"` will just\n * apply the container's width to the fixed element. Finally, setting this to\n * `\"min\"` will set the container's width as the `minWidth` for the fixed\n * element so that it is at least the same width as the container.\n *\n * If this is set to `\"equal\"` or `\"min\"` and the horizontal anchor is not set\n * to `\"center\"`, an error will be thrown.\n *\n * @defaultValue `\"auto\"`\n */\nexport type PositionWidth = \"auto\" | \"equal\" | \"min\";\n\nexport interface InitialCoords {\n  /**\n   * The initial x value to use when calculating the position instead of\n   * finding the container element to determine the the correct position. All\n   * the other positioning logic will still be in effect to ensure the element\n   * will be visible within the viewport.\n   */\n  initialX?: number;\n\n  /**\n   * The initial y value to use when calculating the position instead of\n   * finding the container element to determine the the correct position. All\n   * the other positioning logic will still be in effect to ensure the element\n   * will be visible within the viewport.\n   */\n  initialY?: number;\n}\n\n/** @remarks \\@since 4.0.0 */\nexport interface CalculateFixedPositionOptions extends InitialCoords {\n  /**\n   * The configuration to anchor the fixed element to the container element.\n   *\n   * @defaultValue `BELOW_CENTER_ANCHOR`\n   */\n  anchor?: PositionAnchor;\n\n  /**\n   * The viewwidth margin to apply so that the element doesn't need to be\n   * directly on the screen edge.\n   *\n   * @defaultValue `16`\n   */\n  vwMargin?: number;\n\n  /**\n   * The viewwidth margin to apply so that the element doesn't need to be\n   * directly on the screen edge.\n   *\n   * @defaultValue `16`\n   */\n  vhMargin?: number;\n\n  /**\n   * The container width margin to apply so that the element doesn't need to be\n   * directly on the container's edge.\n   *\n   * @defaultValue `0`\n   */\n  xMargin?: number;\n\n  /**\n   * The container height margin to apply so that the element doesn't need to be\n   * directly on the container's edge\n   *\n   * @defaultValue `0`\n   */\n  yMargin?: number;\n\n  /** {@inheritDoc PositionWidth} */\n  width?: PositionWidth;\n\n  /**\n   * Boolean if the style object should include the `transformOrigin` value\n   * based on the x and y positions.\n   *\n   * @defaultValue `false`\n   */\n  transformOrigin?: boolean;\n\n  /**\n   * Boolean if the fixed element should no longer be able to overlap the\n   * container element. This is useful for autocomplete menus or other\n   * components that retain focus on the container element while the fixed\n   * element becomes visible.\n   *\n   * @defaultValue `false`\n   */\n  preventOverlap?: boolean;\n\n  /**\n   * Boolean if the auto-swapping behavior should be disabled. It's normally\n   * recommended to not disable this since it'll allow elements to appear off\n   * screen.\n   *\n   * @defaultValue `false`\n   * @remarks \\@since 5.0.0 This will always be `true` if the\n   * {@link FixedPositionOptions.container} is `null`.\n   */\n  disableSwapping?: boolean;\n\n  /**\n   * Boolean if the fixed positioning should no longer prevent the fixed element\n   * to be positioned within the viewport. This is nice if you want to allow for\n   * full page scrolling instead and manually set a max-height on your element.\n   *\n   * @defaultValue `false`\n   */\n  disableVHBounds?: boolean;\n}\n\nexport interface FixedPositionOptions extends CalculateFixedPositionOptions {\n  /**\n   * The container element that the `element` should be fixed to.\n   */\n  container: HTMLElement | null;\n\n  /**\n   * The element that is fixed to a `container` element.\n   */\n  element: HTMLElement | null;\n}\n\n/**\n * This is more of a private interface that is used to help show how fixed\n * elements are placed within the viewport. Most of the time the `top` and\n * `left` values will be provided, but there are a few flows where the `right`\n * and `bottom` could be added or the `top` and `left` are removed.\n *\n * The `width` values will only be used when the `equalWidth` or `minEqualWidth`\n * options are enabled.\n *\n * @internal\n */\nexport interface Coords {\n  top?: number;\n  right?: number;\n  bottom?: number;\n  left?: number;\n  width?: number;\n  minWidth?: number;\n}\n\n/**\n * The style object that should be applied to the fixed element so it will be\n * fixed to the container element. This will be `undefined` if the container\n * element doesn't exist within the DOM.\n *\n * Note: The fixed element styles **will not** contain styles for `z-index` or\n * `background-color` so you'll need to add that manually.\n *\n * @remarks \\@since 4.0.0\n */\nexport interface FixedPositionStyle extends Coords {\n  /**\n   * This will be `\"fixed\"` unless\n   * {@link CalculateFixedPositionOptions.disableVHBounds} is set to `true`.\n   */\n  position: \"fixed\" | \"absolute\";\n\n  /**\n   * This will be `undefined` unless\n   * {@link CalculateFixedPositionOptions.transformOrigin} is set to `true`\n   */\n  transformOrigin?: string;\n}\n\n/**\n * Since the position can be \"swapped\" to help fit the fixed element within the\n * viewport, this interface is used to contain the calculated positions as well\n * as an optional style object to apply.\n */\nexport interface FixedPosition {\n  /**\n   * The calculated horizontal position that can be used to compare to the\n   * provided horizontal position anchor if additional manual updates should be\n   * applied.\n   */\n  actualX: HorizontalPosition;\n\n  /**\n   * The calculated vertical position that can be used to compare to the\n   * provided horizontal position anchor if additional manual updates should be\n   * applied.\n   */\n  actualY: VerticalPosition;\n  /** {@inheritDoc FixedPositionStyle} */\n  style?: FixedPositionStyle;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}