{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\WebDevelop\\React\\Project 07\\movies-app\\node_modules\\@react-md\\autocomplete\\src\\types.ts"],"sourcesContent":["import type { CSSProperties, ReactNode } from \"react\";\nimport type { ListboxOptionProps, TextFieldProps } from \"@react-md/form\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport type {\n  CalculateFixedPositionOptions,\n  CaseInsensitiveOptions,\n  PositionWidth,\n} from \"@react-md/utils\";\n\n/**\n * The supported autocompletion types.\n *\n * - \"none\" - The autocomplete will not filter any results and will just show a\n *   dropdown list of suggestions instead.\n * - \"inline\" - The first match will appear inline as the user types by using a\n *   selection range to highlight the remaining match characters.\n * - \"list\" - The autocomplete will filter the results and show a dropdown list\n *   of matches based on the current text field's value.\n * - \"both\" - A combination of both the `\"inline\"` and `\"list\"` autocomplete\n *   behaviors\n *\n * Note: \"inline\" versions still aren't actually supported...\n */\nexport type AutoCompletion = \"none\" | \"inline\" | \"list\" | \"both\";\n\n/**\n * The supported data that can be filtered and autocompleted. When the data is\n * an object, the searchable value and display label can be extracted with the\n * provided getter functions and `labelKey`/`valueKey` props.\n */\nexport type AutoCompleteData = string | ListboxOptionProps;\n\n/**\n * The autocomplete supports a fuzzy filter and a case insensitive filter\n * function out of the box. If you don't want any filtering to happen because\n * the filtering is done through an API call or somewhere else, you can use the\n * `\"none\"` value instead.\n */\nexport type PreconfiguredFilterFunction = \"fuzzy\" | \"case-insensitive\" | \"none\";\n\n/**\n * The filter options provided to the filter function.\n */\nexport type FilterFunctionOptions<O extends {} = {}> = O &\n  CaseInsensitiveOptions<AutoCompleteData>;\n\n/**\n * The autocomplete works with a filter function that takes in the current\n * search query, the list of data, and search options to return a new filtered\n * list. If the default fuzzy filter and case insensitive filters don't match\n * your use cases, you can also provide your own function that matches this api\n * instead.\n */\nexport type FilterFunction<O extends {} = {}> = (\n  query: string,\n  data: readonly AutoCompleteData[],\n  options: FilterFunctionOptions<O>\n) => readonly AutoCompleteData[];\n\n/**\n * Either a preconfigured/provided filter function of the autocomplete or a\n * custom function to use.\n */\nexport type AutoCompleteFilterFunction<O extends {} = {}> =\n  | PreconfiguredFilterFunction\n  | FilterFunction<O>;\n\n/**\n * The shape of the autocomplete result.\n */\nexport interface AutoCompleteResult {\n  /**\n   * The stringified value of the autocomplete data by using `getResultValue` on\n   * the `result`. This is really just used for the default behavior of\n   * autocompleting the text field's value to this value.\n   */\n  readonly value: string;\n\n  /**\n   * The index of the result in the **filtered data list**.\n   */\n  readonly index: number;\n\n  /**\n   * The current autocomplete result.\n   */\n  readonly result: Readonly<AutoCompleteData>;\n\n  /**\n   * The index of the result in the **original data list**.\n   */\n  readonly dataIndex: number;\n\n  /**\n   * The list of data that has been filtered based on the current value.\n   */\n  readonly filteredData: readonly AutoCompleteData[];\n}\n\n/**\n * The function to call whenever the value is auto completed by:\n * - clicking an item with the mouse or touch\n * - keyboard focusing a result and pressing enter\n */\nexport type AutoCompleteHandler = (result: AutoCompleteResult) => void;\n\nexport interface AutoCompleteListboxPositionOptions\n  extends Omit<CalculateFixedPositionOptions, \"width\"> {\n  /**\n   * The sizing behavior for the listbox. It will default to have the same width\n   * as the select button, but it is also possible to either have the\n   * `min-width` be the width of the select button or just automatically\n   * determine the width.\n   *\n   * The sizing behavior will always ensure that the left and right bounds of\n   * the listbox appear within the viewport.\n   */\n  listboxWidth?: PositionWidth;\n\n  /**\n   * An optional style to also apply to the listbox element showing all the\n   * matches.\n   */\n  listboxStyle?: CSSProperties;\n\n  /**\n   * Boolean if the select's listbox should not hide if the user resizes the\n   * browser while it is visible.\n   */\n  closeOnResize?: boolean;\n\n  /**\n   * Boolean if the select's listbox should not hide if the user scrolls the\n   * page while it is visible.\n   */\n  closeOnScroll?: boolean;\n}\n\nexport interface AutoCompleteProps\n  extends Omit<TextFieldProps, \"type\">,\n    RenderConditionalPortalProps,\n    AutoCompleteListboxPositionOptions {\n  /**\n   * The id to use for the AutoComplete and is required for a11y to fulfill the\n   * `combobox` role. This id will be passed directly to the `<input>` element\n   * and prefixed for all the other id-required elements.\n   */\n  id: string;\n\n  /**\n   * @see AutoCompletion\n   */\n  autoComplete?: AutoCompletion;\n\n  /**\n   * Boolean if the text field's value should be cleared when the value is\n   * autocompleted. This is useful when also adding custom `onAutoComplete`\n   * behavior.\n   */\n  clearOnAutoComplete?: boolean;\n\n  /**\n   * Boolean if the list of suggestions should no longer appear immediately once\n   * the text field is focused and there is at least one item in the `data`\n   * list. If this is set to `false`, the menu will only be shown when:\n   *\n   * - a letter is added or removed from the text field\n   * - the user clicks it again\n   * - using the alt+arrow-down keyboard shortcut\n   *\n   * If this prop is omitted, the show on focus behavior will be disabled on\n   * touch devices since touch device's soft keyboards do a lot of funky things\n   * with the viewport and scroll behavior. This makes it so the native viewport\n   * and scroll behavior actions are normally finished before the suggestions\n   * appear.\n   */\n  disableShowOnFocus?: boolean;\n\n  /**\n   * The list of data that should be autocompleted based on the provided filter.\n   */\n  data: readonly AutoCompleteData[];\n\n  /**\n   * @see AutoCompleteFilterFunction\n   */\n  filter?: AutoCompleteFilterFunction;\n\n  /**\n   * An optional object of options to provide to the filter function. This will\n   * be defaulted to work with the fuzzy filter and case-insensitive filter\n   * functions to trim whitespace before doing the comparisons.\n   */\n  filterOptions?: FilterFunctionOptions;\n\n  /**\n   * Boolean if the filter function should still be called when there is no\n   * value in the text field. This normally defaults to `false` so that the\n   * `data` is just returned, but it can be useful with a custom filter function\n   * that returns different data while there is no value.\n   */\n  filterOnNoValue?: boolean;\n\n  /**\n   * An optional className to also apply to the listbox element showing all the\n   * matches.\n   */\n  listboxClassName?: string;\n\n  /**\n   * Boolean if the result list labels should be updated so that each matching\n   * letter is bolded. This only works when the data list is a list of strings,\n   * or the `label` is a string and when the letters appear in order. This will\n   * always be `false` if the `filter` prop is set to `\"fuzzy\"`.\n   */\n  highlight?: boolean;\n\n  /**\n   * Boolean if the highlight functionality should no longer stop after the\n   * first match and instead highlight all matches of the search string within\n   * the label for an item.\n   */\n  highlightReapeating?: boolean;\n\n  /**\n   * An optional style to apply to the `<span>` surrounding the matched text\n   * when the `highlight` prop is enabled.\n   */\n  highlightStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the `<span>` surrounding the matched text\n   * when the `highlight` prop is enabled.\n   */\n  highlightClassName?: string;\n\n  /**\n   * The key to use to extract a label from a result when the provided data list\n   * is a list of objects.\n   */\n  labelKey?: string;\n\n  /**\n   * The key to use to extract a searchable value string from a result when the\n   * provided data list is a list of objects.\n   */\n  valueKey?: string;\n\n  /**\n   * A function to call that will generate an id for each result in the\n   * autocomplete's listbox. These ids are required for a11y as it'll be used\n   * with the `aria-activedescendant` movement within the autocomplete.\n   */\n  getResultId?(id: string, index: number): string;\n\n  /**\n   * A function to call that will get a renderable label or children to display\n   * for a result in the autocomplete's list of results. The default behavior\n   * will be to return the result itself if it is a string, otherwise try to\n   * return the `children` or `labelKey` attribute if it is an object.\n   */\n  getResultLabel?(\n    data: Readonly<AutoCompleteData>,\n    labelKey: string,\n    query: string\n  ): ReactNode;\n\n  /**\n   * A function to call that will extract a searchable value string from each\n   * result. This **must** return a string and will prevent the autocomplete\n   * from filtering data with the built in filter functions.\n   */\n  getResultValue?(datum: Readonly<AutoCompleteData>, valueKey: string): string;\n\n  /**\n   * @see AutoCompleteHandler\n   */\n  onAutoComplete?: AutoCompleteHandler;\n\n  /**\n   * An optional list of keys that should be omitted from your `data` item\n   * before passing it to the suggestion `Option`. This is useful if you have\n   * additional metadata in your data objects that should not be passed as DOM\n   * attributes.\n   *\n   *\n   * ```ts\n   * const item = { __id: 9432432, name: \"Item\", value: \"guid\" }\n   *\n   * // don't want to pass `__id` to the Option\n   * const omitKeys = [\"__id\"];\n   *```\n   */\n  omitKeys?: readonly string[];\n\n  /**\n   * Any optional children to display before the matched results in the\n   * autocomplete's menu. This should normally be for any presentational data or\n   * things that should not be searchable.\n   *\n   * @remarks \\@since 2.1.0\n   */\n  beforeResultsChildren?: ReactNode;\n\n  /**\n   * Any optional children to display after the matched results in the\n   * autocomplete's menu. This should normally be for any presentational data or\n   * things that should not be searchable.\n   *\n   * @remarks \\@since 2.1.0\n   */\n  afterResultsChildren?: ReactNode;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}